package dc.visao.suprimento.contrato;

import java.io.File;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

import org.vaadin.addons.maskedtextfield.MaskedTextField;
import org.vaadin.addons.maskedtextfield.NumericField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.data.util.converter.Converter;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractSelect.ItemCaptionMode;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.DragAndDropWrapper.DragStartMode;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.contrato.ContratoFormController;
import dc.entidade.geral.diverso.UfEntity;
import dc.entidade.geral.ged.Documento;
import dc.entidade.geral.ged.DocumentoArquivo;
import dc.entidade.geral.pessoal.PessoaEntity;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.entidade.suprimentos.contrato.ContratoEntity;
import dc.entidade.suprimentos.contrato.ContratoProduto;
import dc.entidade.suprimentos.contrato.HistFaturamentoEntity;
import dc.entidade.suprimentos.contrato.HistoricoReajusteEntity;
import dc.entidade.suprimentos.contrato.PrevFaturamentoEntity;
import dc.entidade.suprimentos.contrato.SolicitacaoServicoEntity;
import dc.entidade.suprimentos.contrato.TipoContratoEntity;
import dc.framework.StringToBigDecimalConverter;
import dc.visao.framework.component.BigDecimalConverter;
import dc.visao.framework.component.IntegerConverter;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.component.upload.DCMultiFileUpload;
import dc.visao.framework.component.upload.UploadFileListner;
import dc.visao.framework.util.ComponentUtil;

public class ContratosFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet tabSheet_2;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_6;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_4;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_3;
	@AutoGenerated
	private Table table_2;
	@AutoGenerated
	private TabSheet tabSheet_1;
	@AutoGenerated
	private GridLayout gridLayout_2;
	@AutoGenerated
	private GridLayout gridLayout_3;
	private GridLayout gridLayout_5;

	@AutoGenerated
	private TextArea txaObservacoes;
	@AutoGenerated
	private TextArea txaAditivo;
	@AutoGenerated
	private TextArea txaDescricao;
	@AutoGenerated
	private Button btnGerarParcelas;

	private NumericField txtIntervaloParcelas;
	private NumericField txtQuantidadeParcelas;
	// private PopupDateField dtPrimeiroVencimento;

	@AutoGenerated
	private TextField txtValor;
	private NumericField txtDiaFaturamento;
	@AutoGenerated
	private PopupDateField dtFimVigencia;
	@AutoGenerated
	private PopupDateField dtVigencia;

	private PopupDateField dtCadastro;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private ManyToOneComboField<SolicitacaoServicoEntity> cmbSolicitacaoServico;
	@AutoGenerated
	private TextField txtNome;
	@AutoGenerated
	private TextField txtNumero;
	@AutoGenerated
	private ManyToOneComboField<PessoaEntity> cbmPessoa;
	@AutoGenerated
	private ManyToOneComboField<TipoContratoEntity> cbmTipoContrato;
	@AutoGenerated
	private ManyToOneComboField<Documento> cbmDocumento;

	@AutoGenerated
	private ManyToOneComboField<ProdutoEntity> cmbProduto;

	@AutoGenerated
	private GridLayout gridLayout_4;
	@AutoGenerated
	private TextField txtLogradouroObjeto;
	@AutoGenerated
	private TextField txtNumeroObjeto;
	@AutoGenerated
	private TextField txtComplementoObjeto;
	@AutoGenerated
	private TextField txtBairroObjeto;
	@AutoGenerated
	private TextField txtCidadeObjeto;
	private VerticalLayout parcelasLayout;
	@AutoGenerated
	private MaskedTextField txtCEPObjeto;

	private DCMultiFileUpload upArquivo;

	@AutoGenerated
	private TextField txtValorTarifa;

	// @AutoGenerated
	// private ComboBox cmbEstadoObjeto;

	@AutoGenerated
	private ManyToOneComboField<UfEntity> mocUf;

	private SubFormComponent<HistFaturamentoEntity, Integer> historicoFaturamentoSubForm;
	private SubFormComponent<HistoricoReajusteEntity, Integer> historicoReajustesSubForm;
	private SubFormComponent<PrevFaturamentoEntity, Integer> previsaoFaturamentoSubForm;
	private SubFormComponent<ContratoProduto, Integer> contratoProdutoSubForm;
	// private SubFormComponent<Documento, Integer> arquivoContratoSubForm;
	@AutoGenerated
	private Button btnGerarContrato;

	private ContratoFormController controller;
	private VerticalLayout contratoLayout;
	private GridLayout miniaturasLayout;

	private List<String> listArquivos = new ArrayList<String>();
	private List<String> listArquivosExcluidos = new ArrayList<String>();

	public ContratosFormView(ContratoFormController contratoFormController) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.controller = contratoFormController;
		listArquivos = new ArrayList<String>();
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public Table getTable_2() {
		return table_2;
	}

	public void setTable_2(Table table_2) {
		this.table_2 = table_2;
	}

	public TextArea getTxaObservacoes() {
		return txaObservacoes;
	}

	public void setTxaObservacoes(TextArea txaObservacoes) {
		this.txaObservacoes = txaObservacoes;
	}

	public TextArea getTxaDescricao() {
		return txaDescricao;
	}

	public void setTxaDescricao(TextArea txaDescricao) {
		this.txaDescricao = txaDescricao;
	}

	public TextField getTxtIntervaloParcelas() {
		return txtIntervaloParcelas;
	}

	public void setTxtIntervaloParcelas(NumericField txtIntervaloParcelas) {
		this.txtIntervaloParcelas = txtIntervaloParcelas;
	}

	public TextField getTxtQuantidadeParcelas() {
		return txtQuantidadeParcelas;
	}

	public void setTxtQuantidadeParcelas(NumericField txtQuantidadeParcelas) {
		this.txtQuantidadeParcelas = txtQuantidadeParcelas;
	}

	public TextField getTxtValor() {
		return txtValor;
	}

	public void setTxtValor(TextField txtValor) {
		this.txtValor = txtValor;
	}

	public NumericField getTxtDiaFaturamento() {
		return txtDiaFaturamento;
	}

	public void setTxtDiaFaturamento(NumericField txtDiaFaturamento) {
		this.txtDiaFaturamento = txtDiaFaturamento;
	}

	public PopupDateField getDtFimVigencia() {
		return dtFimVigencia;
	}

	public void setDtFimVigencia(PopupDateField dtFimVigencia) {
		this.dtFimVigencia = dtFimVigencia;
	}

	public PopupDateField getDtVigencia() {
		return dtVigencia;
	}

	public void setDtVigencia(PopupDateField dtVigencia) {
		this.dtVigencia = dtVigencia;
	}

	public PopupDateField getDtCadastro() {
		return dtCadastro;
	}

	public void setDtCadastro(PopupDateField dtCadastro) {
		this.dtCadastro = dtCadastro;
	}

	public TextField getTxtNome() {
		return txtNome;
	}

	public void setTxtNome(TextField txtNome) {
		this.txtNome = txtNome;
	}

	public TextField getTxtNumero() {
		return txtNumero;
	}

	public void setTxtNumero(TextField txtNumero) {
		this.txtNumero = txtNumero;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// tabSheet_1
		tabSheet_1 = buildTabSheet_1();
		mainLayout.addComponent(tabSheet_1);
		mainLayout.setExpandRatio(tabSheet_1, 1.0f);

		// tabSheet_2
		tabSheet_2 = buildTabSheet_2();
		mainLayout.addComponent(tabSheet_2);
		mainLayout.setExpandRatio(tabSheet_2, 1.0f);

		return mainLayout;
	}

	public ManyToOneComboField<ProdutoEntity> getCmbProduto() {
		return cmbProduto;
	}

	public void setCmbProduto(ManyToOneComboField<ProdutoEntity> cmbProduto) {
		this.cmbProduto = cmbProduto;
	}

	@AutoGenerated
	private TabSheet buildTabSheet_1() {
		// common part: create layout
		tabSheet_1 = new TabSheet();
		tabSheet_1.setImmediate(false);
		tabSheet_1.setSizeFull();

		// absoluteLayout_5
		gridLayout_1 = buildGridLayout1();
		tabSheet_1.addTab(gridLayout_1, "Dados Básicos", null);

		// absoluteLayout_2
		gridLayout_2 = buildGridLayout_2();
		tabSheet_1.addTab(gridLayout_2, "Dados Complementares", null);

		tabSheet_1.addTab(buildObjetoProdutoSubForm(), "OBJETO/PROTUTO", null);

		gridLayout_4 = buildGridLayout_4();
		tabSheet_1.addTab(gridLayout_4, "Endereço Objeto", null);

		gridLayout_3 = buildGridLayout_3();
		tabSheet_1.addTab(gridLayout_3, "Aditivo Contrato", null);

		gridLayout_5 = buildDocumentosTab();
		tabSheet_1.addTab(gridLayout_5, "Documentos", null);

		return tabSheet_1;
	}

	private GridLayout buildDocumentosTab() {
		gridLayout_5 = new GridLayout(4, 4);
		// gridLayout_2.setRows(4);
		// gridLayout_2.setColumns(4);
		gridLayout_5.setImmediate(false);
		gridLayout_5.setMargin(true);
		gridLayout_5.setSpacing(true);
		gridLayout_5.setWidth("100%");

		upArquivo = new DCMultiFileUpload(new UploadFileListner() {
			@Override
			public void handleFile(File file, String fileName, String mimeType, long length) {
				uploadArquivo(file, fileName.toLowerCase().trim(), mimeType, length);
			}
		});

		upArquivo.setCaption("Documento");
		upArquivo.setUploadButtonCaption("Selecione o(s) arquivo(s)");
		gridLayout_5.addComponent(upArquivo, 0, 1);

		gridLayout_5.addComponent(montarPainelMiniaturas(), 0, 2, 3, 2);

		return gridLayout_5;
	}

	public Panel montarPainelMiniaturas() {
		Panel nPanel = new Panel();
		nPanel.setImmediate(true);
		nPanel.setHeight("350px");
		nPanel.setWidth("100%");
		nPanel.setScrollTop(1600);
		miniaturasLayout = new GridLayout(12, 100);
		nPanel.setContent(miniaturasLayout);

		return nPanel;
	}

	@AutoGenerated
	private GridLayout buildGridLayout1() {
		// common part: create layout
		gridLayout_1 = new GridLayout(4, 5);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		// gridLayout_1.setRows(4);
		// gridLayout_1.setColumns(2);
		gridLayout_1.setWidth("100%");

		// cbmPessoa
		cbmPessoa = new ManyToOneComboField<>(PessoaEntity.class);
		cbmPessoa.setCaption("Pessoa");
		cbmPessoa.setSizeFull();
		gridLayout_1.addComponent(cbmPessoa, 0, 0);

		// cbmTipoContrato
		cbmTipoContrato = new ManyToOneComboField<>(TipoContratoEntity.class);
		cbmTipoContrato.setCaption("Tipo de Contrato");
		cbmTipoContrato.setSizeFull();
		gridLayout_1.addComponent(cbmTipoContrato, 1, 0);

		// cmbSolicitacaoServico
		cmbSolicitacaoServico = new ManyToOneComboField<>(SolicitacaoServicoEntity.class);
		cmbSolicitacaoServico.setCaption("Solicitação de serviço");
		cmbSolicitacaoServico.setSizeFull();
		gridLayout_1.addComponent(cmbSolicitacaoServico, 0, 1);

		// txtNumero
		txtNumero = ComponentUtil.buildTextField("Número");
		gridLayout_1.addComponent(txtNumero, 0, 2);

		// txtNome
		txtNome = ComponentUtil.buildTextField("Nome");
		gridLayout_1.addComponent(txtNome, 1, 2);

		cbmDocumento = new ManyToOneComboField<>(Documento.class);
		cbmDocumento.setCaption("Modelo Documento");
		gridLayout_1.addComponent(cbmDocumento, 0, 3, 1, 3);
		// gridLayout_1.addComponent(cbmDocumento, 0, 3);

		btnGerarContrato = new Button("Gerar Contrato");
		btnGerarContrato.setVisible(true);
		gridLayout_1.addComponent(btnGerarContrato, 0, 4);
		// gridLayout_1.addComponent(btnGerarContrato, 1,3);

		return gridLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_3() {
		gridLayout_3 = new GridLayout(1, 1);
		gridLayout_3.setImmediate(false);
		gridLayout_3.setMargin(true);
		gridLayout_3.setSpacing(true);
		gridLayout_3.setWidth("100%");

		// txaDescricao
		txaAditivo = ComponentUtil.buildTextArea("Aditivo Contrato");
		txaAditivo.setHeight("100%");
		txaAditivo.setWidth("100%");
		txaAditivo.setRows(9);

		gridLayout_3.addComponent(txaAditivo, 0, 0);

		return gridLayout_3;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_4() {
		gridLayout_4 = new GridLayout(4, 4);
		gridLayout_4.setImmediate(false);
		gridLayout_4.setMargin(true);
		gridLayout_4.setSpacing(true);
		gridLayout_4.setWidth("100%");

		// txaDescricao
		txtCEPObjeto = ComponentUtil.buildMaskedTextField("CEP", "#####-###");
		txtCEPObjeto.setMaskClientOnly(true);
		txtCEPObjeto.setWidth("30%");
		gridLayout_4.addComponent(txtCEPObjeto, 0, 0);

		txtLogradouroObjeto = ComponentUtil.buildTextField("Logradouro");
		gridLayout_4.addComponent(txtLogradouroObjeto, 0, 1);

		txtNumeroObjeto = ComponentUtil.buildNumericField("Número");
		txtNumeroObjeto.setMaxLength(6);
		txtNumeroObjeto.setWidth("20%");
		txtNumeroObjeto.setConverter(new IntegerConverter());
		gridLayout_4.addComponent(txtNumeroObjeto, 1, 1);

		txtComplementoObjeto = ComponentUtil.buildTextField("Complemento");
		gridLayout_4.addComponent(txtComplementoObjeto, 0, 2);

		txtBairroObjeto = ComponentUtil.buildTextField("Bairro");
		gridLayout_4.addComponent(txtBairroObjeto, 1, 2);

		txtCidadeObjeto = ComponentUtil.buildTextField("Cidade");
		gridLayout_4.addComponent(txtCidadeObjeto, 0, 3);

		mocUf = new ManyToOneComboField<>(UfEntity.class);
		mocUf.setCaption("UF");
		mocUf.setImmediate(false);
		mocUf.setWidth("200px");
		mocUf.setHeight("-1px");
		/*
		 * cmbEstadoObjeto = ComponentUtil.buildComboBox("UF");
		 * cmbEstadoObjeto.setCaption("UF"); cmbEstadoObjeto.setWidth("156px");
		 * cmbEstadoObjeto.setHeight("-1px"); cmbEstadoObjeto.setSizeFull();
		 */
		gridLayout_4.addComponent(mocUf, 1, 3);

		return gridLayout_4;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_2() {
		// common part: create layout
		gridLayout_2 = new GridLayout(4, 4);
		// gridLayout_2.setRows(4);
		// gridLayout_2.setColumns(4);
		gridLayout_2.setImmediate(false);
		gridLayout_2.setMargin(true);
		gridLayout_2.setSpacing(true);
		gridLayout_2.setWidth("100%");

		// dtCadastro
		dtCadastro = ComponentUtil.buildPopupDateField("Data Cadastro");
		gridLayout_2.addComponent(dtCadastro, 0, 0);

		// dtVigencia
		dtVigencia = ComponentUtil.buildPopupDateField("Data Vigência");
		dtVigencia.setRequired(true);
		gridLayout_2.addComponent(dtVigencia, 1, 0);

		// dtFimVigencia
		dtFimVigencia = ComponentUtil.buildPopupDateField("Data Fim Vigência");
		dtFimVigencia.setRequired(true);
		gridLayout_2.addComponent(dtFimVigencia, 2, 0);

		// txtDiaFaturamento
		txtDiaFaturamento = ComponentUtil.buildNumericField("Dia de Faturamento");
		gridLayout_2.addComponent(txtDiaFaturamento, 3, 0);
		txtDiaFaturamento.setConverter(new IntegerConverter());

		// dtPrimeiroVencimento
		// dtPrimeiroVencimento =
		// ComponentUtil.buildPopupDateField("Primeiro Vencimento");
		// gridLayout_2.addComponent(dtPrimeiroVencimento, 4, 0);

		// txtValor
		txtValor = ComponentUtil.buildCurrencysField("Valor");
		txtValor.setRequired(true);
		gridLayout_2.addComponent(txtValor, 0, 1);

		// txtQuantidadeParcelas
		txtQuantidadeParcelas = ComponentUtil.buildNumericField("Quantidade de Parcelas");
		txtQuantidadeParcelas.setRequired(true);
		gridLayout_2.addComponent(txtQuantidadeParcelas, 1, 1);
		txtQuantidadeParcelas.setConverter(new IntegerConverter());

		// txtIntervaloParcelas
		txtIntervaloParcelas = ComponentUtil.buildNumericField("Intervalo entre Parcelas");
		txtIntervaloParcelas.setNullRepresentation("");
		txtIntervaloParcelas.setRequired(true);
		gridLayout_2.addComponent(txtIntervaloParcelas, 2, 1);
		txtIntervaloParcelas.setConverter(new IntegerConverter());

		btnGerarParcelas = new Button("Gerar Parcelas");
		btnGerarParcelas.setSizeFull();
		gridLayout_2.addComponent(btnGerarParcelas, 3, 1);

		// txaDescricao
		txaDescricao = ComponentUtil.buildTextArea("Descrição");
		gridLayout_2.addComponent(txaDescricao, 0, 2);

		// txaObservacoes
		txaObservacoes = ComponentUtil.buildTextArea("Observações");
		gridLayout_2.addComponent(txaObservacoes, 1, 2);

		txtValorTarifa = ComponentUtil.buildCurrencysField("Valor tarifa de transportes");
		gridLayout_2.addComponent(txtValorTarifa, 2, 2);

		return gridLayout_2;
	}

	/** TextArea (TEMPLATE) */

	@AutoGenerated
	private TabSheet buildTabSheet_2() {
		// common part: create layout
		tabSheet_2 = new TabSheet();
		tabSheet_2.setImmediate(true);
		tabSheet_2.setWidth("100%");
		tabSheet_2.setHeight("100%");
		// tabSheet_2.setSizeFull();

		// historicoFaturamentoSubForm = buildHistoricoFaturaSubForm();
		// historicoReajustesSubForm = buildHistoricoReajustesSubForm();
		// previsaoFaturamentoSubForm = buildPrevisaoFaturamentoSubForm();

		/*
		 * historicoFaturamentoSubForm.setHeight("100%");
		 * historicoReajustesSubForm.setHeight("100%");
		 * previsaoFaturamentoSubForm.setHeight("100%");
		 */

		tabSheet_2.addTab(buildHistoricoFaturaSubForm(), "Histórico Faturamento", null);

		tabSheet_2.addTab(buildHistoricoReajustesSubForm(), "Histórico de Reajustes", null);

		tabSheet_2.addTab(buildPrevisaoFaturamentoSubForm(), "Previsão de 	Faturamento", null);

		// tabSheet_2.addTab(buildArquivoContratoSubForm(), "Arquivo Contrato",
		// null);

		return tabSheet_2;
	}

	/*
	 * private Component buildHistoricoReajustesSubForm() { String[] atributos =
	 * new String[] { "indice", "valorAnterior", "valorAtual", "dataReajustes",
	 * "observacao" }; String[] headers = new String[] { "Índice",
	 * "Valor Anterior", "Valor Atual", "Data Reajustes", "Observação" };
	 * 
	 * this.historicoReajustesSubForm = new
	 * SubFormComponent<ContratoHistoricoReajuste,
	 * Integer>(ContratoHistoricoReajuste.class, atributos, headers) {
	 * 
	 * private static final long serialVersionUID = 1L;
	 * 
	 * @Override protected TableFieldFactory getFieldFactory() { return new
	 * TableFieldFactory() {
	 * 
	 * /**
	 */
	// private static final long serialVersionUID = 1L;

	private SubFormComponent<HistoricoReajusteEntity, Integer> buildHistoricoReajustesSubForm() {
		SubFormComponent<HistoricoReajusteEntity, Integer> subForm = new SubFormComponent<HistoricoReajusteEntity, Integer>(HistoricoReajusteEntity.class, new String[] { "indice", "valorAnterior",
				"valorAtual", "dataReajuste", "observacao" }, new String[] { "Índice", "Valor Anterior", "Valor Atual", "Data Reajuste", "Observação" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("indice".equals(propertyId)) {
							TextField textField = new TextField();
							textField.setSizeFull();
							textField.setConverter(new StringToBigDecimalConverter());
							return textField;
						} else if ("valorAnterior".equals(propertyId)) {
							/*
							 * TextField textField = new TextField();
							 * textField.setSizeFull();
							 * textField.setConverter(new
							 * StringToBigDecimalConverter());
							 */
							return ComponentUtil.buildCurrencysField(null);
						} else if ("valorAtual".equals(propertyId)) {
							/*
							 * TextField textField = new TextField();
							 * textField.setSizeFull();
							 * textField.setConverter(new
							 * StringToBigDecimalConverter());
							 */
							return ComponentUtil.buildCurrencysField(null);
						} else if ("observacao".equals(propertyId)) {
							/*
							 * TextField textField = new TextField();
							 * textField.setSizeFull();
							 */

							return ComponentUtil.buildCurrencyField(null);
						} else if ("dataReajuste".equals(propertyId)) {
							DateField dateField = new DateField();
							dateField.setSizeFull();
							return dateField;
						}

						return ComponentUtil.buildTextField(null);

					}

				};
			}

			protected HistoricoReajusteEntity getNovo() {
				HistoricoReajusteEntity contratoHistoricoReajuste = controller.novoContratoHistoricoReajuste();
				return contratoHistoricoReajuste;
			}

			protected void getRemoverSelecionados(List<HistoricoReajusteEntity> values) {
				controller.removerContratoHistoricoReajuste(values);
			}

			@Override
			public boolean validateItems(List<HistoricoReajusteEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		historicoReajustesSubForm = subForm;

		return subForm;
	}

	/*
	 * private SubFormComponent<ContratoProduto, Integer>
	 * buildObjetoProdutoSubForm() { SubFormComponent<ContratoProduto, Integer>
	 * subForm = new SubFormComponent<ContratoProduto, Integer>(
	 * ContratoProduto.class, new String[] { "produto" }, new String[] {
	 * "Produto" }) {
	 * 
	 * @Override protected TableFieldFactory getFieldFactory() { return new
	 * TableFieldFactory() {
	 * 
	 * @Override public Field<?> createField(Container container, Object itemId,
	 * Object propertyId, Component uiContext) {
	 */

	private SubFormComponent<ContratoProduto, Integer> buildObjetoProdutoSubForm() {
		// private Component buildSubFormNaturezaFinanceira() {

		String[] atributos = new String[] { "produto" };
		String[] headers = new String[] { "Produto" };

		this.contratoProdutoSubForm = new SubFormComponent<ContratoProduto, Integer>(ContratoProduto.class, atributos, headers) {

			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
						 * 
						 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("produto".equals(propertyId)) {

							/*
							 * TextField produtoText = ComponentUtil
							 * .buildTextField(null);
							 * 
							 * produtoText .setConverter(new Converter<String,
							 * ProdutoEntity>() {
							 * 
							 * /**
							 * 
							 * 
							 * private static final long serialVersionUID = 1L;
							 * 
							 * @Override public ProdutoEntity convertToModel(
							 * String value, Class<? extends ProdutoEntity>
							 * targetType, Locale locale) throws
							 * com.vaadin.data.
							 * util.converter.Converter.ConversionException {
							 * return null; }
							 * 
							 * @Override public String convertToPresentation(
							 * ProdutoEntity value, Class<? extends String>
							 * targetType, Locale locale) throws
							 * com.vaadin.data.
							 * util.converter.Converter.ConversionException {
							 * return value.getNome(); }
							 * 
							 * @Override public Class<ProdutoEntity>
							 * getModelType() { return ProdutoEntity.class; }
							 * 
							 * @Override public Class<String>
							 * getPresentationType() { return String.class; }
							 * });
							 * 
							 * produtoText.setReadOnly(true); return
							 * produtoText;
							 */

							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(ProdutoEntity.class, controller.buscarProdutos());

							produtoContainer.addNestedContainerProperty("nome");
							comboBox.setContainerDataSource(produtoContainer);
							comboBox.setItemCaptionMode(ItemCaptionMode.PROPERTY);
							comboBox.setImmediate(true);
							comboBox.setSizeFull();
							comboBox.setStyleName("manyToOneCombo");
							comboBox.setItemCaptionPropertyId("nome");
							comboBox.addValueChangeListener(new Property.ValueChangeListener() {
								@Override
								public void valueChange(ValueChangeEvent event) {
									// Will display 'null selected' when
									// nullPerson is selected.
									Notification.show(event.getProperty().getValue() + " selected");
								}
							});

							return comboBox;

							/*
							 * List<ProdutoEntity> list =
							 * cmbProduto.getModel().getAll(); ComboBox
							 * cmbProdutoObjeto = new ComboBox();
							 * BeanItemContainer<ComboItemValue> objects = new
							 * BeanItemContainer
							 * <ComboItemValue>(ComboItemValue.class);
							 * 
							 * for (ProdutoEntity val : list) { ComboItemValue
							 * item = new ComboItemValue(); item.setBean(val);
							 * objects.addBean(item); }
							 * 
							 * cmbProdutoObjeto.setContainerDataSource(objects);
							 * cmbProdutoObjeto
							 * .setItemCaptionMode(ItemCaptionMode.PROPERTY);
							 * cmbProdutoObjeto.setImmediate(true);
							 * cmbProdutoObjeto.setSizeFull();
							 * cmbProdutoObjeto.setStyleName("manyToOneCombo");
							 * cmbProdutoObjeto
							 * .setItemCaptionPropertyId("caption");
							 * cmbProdutoObjeto .addValueChangeListener(new
							 * Property.ValueChangeListener() {
							 * 
							 * @Override public void valueChange(
							 * ValueChangeEvent event) { // Will display 'null
							 * selected' when // nullPerson is selected.
							 * Notification.show(event .getProperty().getValue()
							 * + " selected"); } });
							 * 
							 * return cmbProdutoObjeto;
							 */

						} else {
							return ComponentUtil.buildTextField(null);
						}
					}

				};
			}

			@Override
			public boolean validateItems(List<ContratoProduto> items) {

				return true;
			}

			protected ContratoProduto getNovo() {
				ContratoProduto contratoProduto = controller.novoContratoProduto();
				return contratoProduto;
			}

			@Override
			protected void getRemoverSelecionados(List<ContratoProduto> values) {
				controller.removerContratoProduto(values);
			}
		};

		return this.contratoProdutoSubForm;

	}

	/*
	 * private Component buildHistoricoFaturamentoSubForm() { String[] atributos
	 * = new String[] { "dataFatura", "valor" }; String[] headers = new String[]
	 * { "Data Fatura", "Valor" };
	 * 
	 * this.historicoFaturamentoSubForm = new
	 * SubFormComponent<ContratoHistFaturamento,
	 * Integer>(ContratoHistFaturamento.class, atributos, headers) {
	 * 
	 * private static final long serialVersionUID = 1L;
	 * 
	 * @Override protected TableFieldFactory getFieldFactory() { return new
	 * TableFieldFactory() {
	 * 
	 * /**
	 */
	// private static final long serialVersionUID = 1L;

	private SubFormComponent<HistFaturamentoEntity, Integer> buildHistoricoFaturaSubForm() {
		SubFormComponent<HistFaturamentoEntity, Integer> subForm = new SubFormComponent<HistFaturamentoEntity, Integer>(HistFaturamentoEntity.class, new String[] { "dataFatura", "valor" },
				new String[] { "Data Fatura", "Valor" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("dataFatura".equals(propertyId)) {
							DateField dateField = new DateField();
							dateField.setSizeFull();
							return dateField;

						} else if ("valor".equals(propertyId)) {
							/*
							 * TextField textField = new TextField();
							 * textField.setSizeFull();
							 * textField.setConverter(new
							 * StringToBigDecimalConverter());
							 */
							return ComponentUtil.buildCurrencysField(null);
						} else {
							return ComponentUtil.buildTextField(null);
						}
					}

				};
			}

			protected HistFaturamentoEntity getNovo() {
				HistFaturamentoEntity contratoHistFaturamento = controller.novoContratoHistFaturamento();
				return contratoHistFaturamento;
			}

			protected void getRemoverSelecionados(List<HistFaturamentoEntity> values) {
				controller.removerContratoHistFaturamento(values);
			}

			@Override
			public boolean validateItems(List<HistFaturamentoEntity> items) {

				return true;
			}
		};

		historicoFaturamentoSubForm = subForm;
		return subForm;
	}

	private Component buildPrevisaoFaturamentoSubForm() {

		contratoLayout = new VerticalLayout();
		contratoLayout.setImmediate(false);
		contratoLayout.setSizeFull();
		contratoLayout.setMargin(false);
		contratoLayout.setSpacing(true);

		String[] atributos = new String[] { "pessoa", "numeroParcela", "dataPrevista", "valor" };

		String[] headers = new String[] { "Pessoa", "Número Parcela", "Data Prevista", "Valor" };

		this.previsaoFaturamentoSubForm = new SubFormComponent<PrevFaturamentoEntity, Integer>(PrevFaturamentoEntity.class, atributos, headers) {

			private static final long serialVersionUID = 1L;

			/*
			 * public SubFormComponent<ContratoPrevFaturamento, Integer>
			 * buildPrevisaoFaturamentoSubForm() {
			 * SubFormComponent<ContratoPrevFaturamento, Integer> subForm = new
			 * SubFormComponent<ContratoPrevFaturamento, Integer>(
			 * ContratoPrevFaturamento.class, new String[] { "pessoa",
			 * "dataPrevista", "valor" }, new String[] { "Pessoa",
			 * "Data Prevista", "Valor" }) {
			 */

			@Override
			protected void adicionarBotoes(Table table) {

			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("dataPrevista".equals(propertyId)) {
							DateField dateField = new DateField();
							dateField.setSizeFull();
							return dateField;

						}

						else if ("pessoa".equals(propertyId)) {
							TextField pessoaText = ComponentUtil.buildTextField(null);

							pessoaText.setConverter(new Converter<String, PessoaEntity>() {

								/**
								 * 
								 */
								private static final long serialVersionUID = 1L;

								@Override
								public PessoaEntity convertToModel(String value, Class<? extends PessoaEntity> targetType, Locale locale)
										throws com.vaadin.data.util.converter.Converter.ConversionException {
									return null;
								}

								@Override
								public String convertToPresentation(PessoaEntity value, Class<? extends String> targetType, Locale locale)
										throws com.vaadin.data.util.converter.Converter.ConversionException {
									return value.getNome();
								}

								@Override
								public Class<PessoaEntity> getModelType() {
									return PessoaEntity.class;
								}

								@Override
								public Class<String> getPresentationType() {
									return String.class;
								}
							});

							pessoaText.setReadOnly(true);
							return pessoaText;

						} else if ("valor".equals(propertyId)) {
							/*
							 * TextField textField = new TextField();
							 * textField.setSizeFull();
							 * textField.setConverter(new
							 * StringToBigDecimalConverter()); return textField;
							 */
							return ComponentUtil.buildCurrencyField(null);
						} else {
							return ComponentUtil.buildTextField(null);
						}
					}

				};
			}

			protected PrevFaturamentoEntity getNovo() {
				PrevFaturamentoEntity contratoPrevFaturamento = controller.novoContratoPrevFaturamento();
				return contratoPrevFaturamento;
			}

			protected void getRemoverSelecionados(List<PrevFaturamentoEntity> values) {
				controller.removerContratoPrevFaturamento(values);
			}

			@Override
			public boolean validateItems(List<PrevFaturamentoEntity> items) {
				return true;
			}
		};

		contratoLayout.addComponent(this.previsaoFaturamentoSubForm);
		contratoLayout.setExpandRatio(previsaoFaturamentoSubForm, 3);

		return contratoLayout;
	}

	public void preencheContrato(ContratoEntity contrato) {

		contrato.setPessoa((PessoaEntity) cbmPessoa.getValue());
		contrato.setContratoSolicitacaoServico((SolicitacaoServicoEntity) cmbSolicitacaoServico.getValue());
		contrato.setDataCadastro(dtCadastro.getValue());
		contrato.setDataFimVigencia(dtFimVigencia.getValue());
		contrato.setDataInicioVigencia(dtVigencia.getValue());
		contrato.setDescricao(txaDescricao.getValue());
		contrato.setDiaFaturamento(txtDiaFaturamento.getConvertedValue() != null ? (Integer) txtDiaFaturamento.getConvertedValue() : 0);
		// contrato.setPrimeiroVencimento(dtPrimeiroVencimento.getValue());
		contrato.setIntervaloEntreParcelas(txtIntervaloParcelas.getConvertedValue() != null ? (Integer) txtIntervaloParcelas.getConvertedValue() : 0);
		contrato.setNome(txtNome.getValue());
		contrato.setNumero(txtNumero.getValue());
		contrato.setObservacao(txaObservacoes.getValue());

		contrato.setQuantidadeParcelas(Integer.parseInt(getTxtQuantidadeParcelas().getValue()));
		contrato.setTipoContrato((TipoContratoEntity) cbmTipoContrato.getValue());
		contrato.setValor(((BigDecimal) txtValor.getConvertedValue()).setScale(2, RoundingMode.HALF_EVEN));
		txtValor.setConverter(new BigDecimalConverter("R$ "));

	}

	public void preencheContratoForm(ContratoEntity contrato) {
		cbmPessoa.setValue(contrato.getPessoa());
		cmbSolicitacaoServico.setValue(contrato.getContratoSolicitacaoServico());
		dtCadastro.setValue(contrato.getDataCadastro());
		dtFimVigencia.setValue(contrato.getDataFimVigencia());
		dtVigencia.setValue(contrato.getDataInicioVigencia());
		txaDescricao.setValue(contrato.getDescricao());
		txtDiaFaturamento.setConvertedValue(contrato.getDiaFaturamento());
		// dtPrimeiroVencimento.setValue(contrato.getPrimeiroVencimento());
		txtIntervaloParcelas.setConvertedValue(contrato.getIntervaloEntreParcelas());
		// getTxtIntervaloParcelas().setValue(String.valueOf(contrato.getIntervaloEntreParcelas()));
		txtNome.setValue(contrato.getNome());
		txtNumero.setValue(contrato.getNumero());
		txaObservacoes.setValue(contrato.getObservacao());

		txtQuantidadeParcelas.setValue(String.valueOf(contrato.getQuantidadeParcelas()));
		cbmTipoContrato.setValue(contrato.getTipoContrato());
		txtValor.setConvertedValue(contrato.getValor());
		// getTxtValor().setValue(contrato.getValor().toString());

		historicoFaturamentoSubForm.fillWith(contrato.getContratosHistoricosFaturamentos());
		historicoReajustesSubForm.fillWith(contrato.getContratosHistoricosReajustes());
		previsaoFaturamentoSubForm.fillWith(contrato.getContratosPrevisoesFaturamentos());
		
		miniaturasLayout.removeAllComponents();

		if (contrato.getDocumento() != null && contrato.getDocumento().getDocumentos() != null) {
			for (DocumentoArquivo documentos : contrato.getDocumento().getDocumentos()) {
				uploadArquivo(documentos.getFile(), documentos.getFile().getName(), "", 0);
			}
		}

		/*
		 * this.fillContratoHistoricoFaturamentoSubForm(contrato.
		 * getContratosHistoricosFaturamentos());
		 * 
		 * this.fillContratoHistoricosReajustesSubForm(contrato.
		 * getContratosHistoricosReajustes());
		 * 
		 * this.fillContratosPrevisoesFaturamentosSubForm(contrato.
		 * getContratosPrevisoesFaturamentos());
		 */

	}

	public void uploadArquivo(File arquivo, String nomeArquivo, String mimeType, long fileLength) {
		if (controller.getCurrentBean().getDocumento() == null) {
			Documento documento = new Documento();
			documento.setNome("Contrato");
			controller.getCurrentBean().setDocumento(documento);
		}

		if (controller.isArquivoTemporario(arquivo)) {
			arquivo = controller.gravaArquivoTemporario(arquivo, nomeArquivo);
		}

		Embedded image = DCMultiFileUpload.gerarMiniaturaArquivo(nomeArquivo, arquivo);
		// Wrap it in a Drag and Drop Wrapper
		DragAndDropWrapper wrapper = new DragAndDropWrapper(image);
		wrapper.setSizeUndefined(); // Shrink to fit
		// Enable dragging the wrapper
		wrapper.setDragStartMode(DragStartMode.WRAPPER);

		Button linkDownload = new Button("baixar");
		linkDownload.setStyleName("link");

		linkDownload.addListener(DCMultiFileUpload.buildDownloadButtonListener(arquivo));
		miniaturasLayout.addComponent(wrapper);
		miniaturasLayout.addComponent(linkDownload);

		listArquivos.add(arquivo.getAbsolutePath());
	}

	public Button getBtnGerarContrato() {
		return btnGerarContrato;
	}

	public void setBtnGerarContrato(Button btnGerarContrato) {
		this.btnGerarContrato = btnGerarContrato;
	}

	public ManyToOneComboField<SolicitacaoServicoEntity> getCmbSolicitacaoServico() {
		return cmbSolicitacaoServico;
	}

	public void setCmbSolicitacaoServico(ManyToOneComboField<SolicitacaoServicoEntity> cmbSolicitacaoServico) {
		this.cmbSolicitacaoServico = cmbSolicitacaoServico;
	}

	public ManyToOneComboField<PessoaEntity> getCbmPessoa() {
		return cbmPessoa;
	}

	public void setCbmPessoa(ManyToOneComboField<PessoaEntity> cbmPessoa) {
		this.cbmPessoa = cbmPessoa;
	}

	public ManyToOneComboField<TipoContratoEntity> getCbmTipoContrato() {
		return cbmTipoContrato;
	}

	public void setCbmTipoContrato(ManyToOneComboField<TipoContratoEntity> cbmTipoContrato) {
		this.cbmTipoContrato = cbmTipoContrato;
	}

	public void setCbmDocumento(ManyToOneComboField<Documento> cbmDocumento) {
		this.cbmDocumento = cbmDocumento;
	}

	public ManyToOneComboField<Documento> getCbmDocumento() {
		return cbmDocumento;
	}

	public Button getBtnGerarParcelas() {
		return btnGerarParcelas;
	}

	public void setBtnGerarParcelas(Button btnGerarParcelas) {
		this.btnGerarParcelas = btnGerarParcelas;
	}

	public SubFormComponent<PrevFaturamentoEntity, Integer> getPrevisaoFaturamentoSubForm() {
		return previsaoFaturamentoSubForm;
	}

	public void setPrevisaoFaturamentoSubForm(SubFormComponent<PrevFaturamentoEntity, Integer> previsaoFaturamentoSubForm) {
		this.previsaoFaturamentoSubForm = previsaoFaturamentoSubForm;
	}

	public SubFormComponent<HistFaturamentoEntity, Integer> getHistoricoFaturamentoSubForm() {
		return historicoFaturamentoSubForm;
	}

	public void setHistoricoFaturamentoSubForm(SubFormComponent<HistFaturamentoEntity, Integer> historicoFaturamentoSubForm) {
		this.historicoFaturamentoSubForm = historicoFaturamentoSubForm;
	}

	public SubFormComponent<HistoricoReajusteEntity, Integer> getHistoricoReajustesSubForm() {
		return historicoReajustesSubForm;
	}

	public void setHistoricoReajustesSubForm(SubFormComponent<HistoricoReajusteEntity, Integer> historicoReajustesSubForm) {
		this.historicoReajustesSubForm = historicoReajustesSubForm;
	}

	public TabSheet getTabSheet_2() {
		return tabSheet_2;
	}

	public void setTabSheet_2(TabSheet tabSheet_2) {
		this.tabSheet_2 = tabSheet_2;
	}

	/*
	 * public ComboBox getCmbEstadoObjeto() { return cmbEstadoObjeto; }
	 * 
	 * public void setCmbEstadoObjeto(ComboBox cmbEstadoObjeto) {
	 * this.cmbEstadoObjeto = cmbEstadoObjeto; }
	 */

	public TabSheet getTabSheet_1() {
		return tabSheet_1;
	}

	public void setTabSheet_1(TabSheet tabSheet_1) {
		this.tabSheet_1 = tabSheet_1;
	}

	public TextArea getTxaAditivo() {
		return txaAditivo;
	}

	public void setTxaAditivo(TextArea txaAditivo) {
		this.txaAditivo = txaAditivo;
	}

	public TextField getTxtLogradouroObjeto() {
		return txtLogradouroObjeto;
	}

	public void setTxtLogradouroObjeto(TextField txtLogradouroObjeto) {
		this.txtLogradouroObjeto = txtLogradouroObjeto;
	}

	public TextField getTxtNumeroObjeto() {
		return txtNumeroObjeto;
	}

	public void setTxtNumeroObjeto(TextField txtNumeroObjeto) {
		this.txtNumeroObjeto = txtNumeroObjeto;
	}

	public TextField getTxtComplementoObjeto() {
		return txtComplementoObjeto;
	}

	public void setTxtComplementoObjeto(TextField txtComplementoObjeto) {
		this.txtComplementoObjeto = txtComplementoObjeto;
	}

	public TextField getTxtBairroObjeto() {
		return txtBairroObjeto;
	}

	public void setTxtBairroObjeto(TextField txtBairroObjeto) {
		this.txtBairroObjeto = txtBairroObjeto;
	}

	public TextField getTxtCidadeObjeto() {
		return txtCidadeObjeto;
	}

	public void setTxtCidadeObjeto(TextField txtCidadeObjeto) {
		this.txtCidadeObjeto = txtCidadeObjeto;
	}

	public MaskedTextField getTxtCEPObjeto() {
		return txtCEPObjeto;
	}

	public void setTxtCEPObjeto(MaskedTextField txtCEPObjeto) {
		this.txtCEPObjeto = txtCEPObjeto;
	}

	public TextField getTxtValorTarifa() {
		return txtValorTarifa;
	}

	public void setTxtValorTarifa(TextField txtValorTarifa) {
		this.txtValorTarifa = txtValorTarifa;
	}

	public ManyToOneComboField<UfEntity> getMocUf() {
		return mocUf;
	}

	public void setMocUf(ManyToOneComboField<UfEntity> mocUf) {
		this.mocUf = mocUf;
	}

	public List<String> getListArquivos() {
		return listArquivos;
	}

	public void setListArquivos(List<String> listArquivos) {
		this.listArquivos = listArquivos;
	}

	public List<String> getListArquivosExcluidos() {
		return listArquivosExcluidos;
	}

	public void setListArquivosExcluidos(List<String> listArquivosExcluidos) {
		this.listArquivosExcluidos = listArquivosExcluidos;
	}

	/*
	 * public PopupDateField getDtPrimeiroVencimento() { return
	 * dtPrimeiroVencimento; }
	 * 
	 * public void setDtPrimeiroVencimento(PopupDateField dtPrimeiroVencimento)
	 * { this.dtPrimeiroVencimento = dtPrimeiroVencimento; }
	 */
}