package dc.visao.suprimento.estoque;

import java.math.BigDecimal;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.estoque.LoteProdutoFormController;
import dc.entidade.nfe.NfeDetalheEntity;
import dc.visao.framework.component.IntegerConverter;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class LoteProdutoFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private TabSheet tabSheet;
	@AutoGenerated
	private VerticalLayout vlProduto;
	@AutoGenerated
	private Panel plProduto;
	
	@AutoGenerated
	private TabSheet tabSheet_2;
	
	private TextField txtCodigo, txtNome;
	private TextArea txaDescricao, txaObservacao;
	private PopupDateField pdDataCadastro, pdDataCompra, pdDataFabricacao, pdDataVencimento;
	
	///private SubFormComponent<NfeDetalheEntity, Integer> nfeDetalheSubForm = null;
	private SubFormComponent<NfeDetalheEntity, Integer> nfeDetalheSubForm;
	
	LoteProdutoFormController controller;
	

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public LoteProdutoFormView(LoteProdutoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.controller = controller;
	}

	private VerticalLayout buildMainLayout() {

		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		fields = buildFields();
		mainLayout.addComponent(fields);
		
		
		// tabSheet_2
		tabSheet_2 = buildTabSheet_2();
		mainLayout.addComponent(tabSheet_2);
		mainLayout.setExpandRatio(tabSheet_2, 1.0f);
				
		return mainLayout;
	}
	
	private GridLayout buildFields() {
		fields = new GridLayout(6,5);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setRows(5);
		fields.setColumns(6);
		
		txtCodigo = ComponentUtil.buildTextField("Código");
		fields.addComponent(txtCodigo, 0, 0);
		
		txtNome = ComponentUtil.buildTextField("Nome");
		fields.addComponent(txtNome, 1, 0, 2,0);
		
		pdDataCadastro = ComponentUtil.buildPopupDateField("Data Cadastro");
		fields.addComponent(pdDataCadastro, 0, 1);
		
		pdDataCompra = ComponentUtil.buildPopupDateField("Data Compra");
		fields.addComponent(pdDataCompra, 1, 1);
		
		pdDataFabricacao = ComponentUtil.buildPopupDateField("Data Fabricação");
		fields.addComponent(pdDataFabricacao, 2, 1);
		
		pdDataVencimento = ComponentUtil.buildPopupDateField("Data Vencimento");
		fields.addComponent(pdDataVencimento, 3, 1);
		
		txaDescricao = ComponentUtil.buildTextArea("Descrição");
		fields.addComponent(txaDescricao, 0, 2, 1,2);
		
		txaObservacao = ComponentUtil.buildTextArea("Observação");
		fields.addComponent(txaObservacao, 2, 2, 3,2);
		
		return fields;
		
	}
	
	@AutoGenerated
	private TabSheet buildTabSheet_2() {
		// common part: create layout
		tabSheet_2 = new TabSheet();
		tabSheet_2.setImmediate(true);
		tabSheet_2.setWidth("100%");
		tabSheet_2.setHeight("100%");
		// tabSheet_2.setSizeFull();

		tabSheet_2.addTab(buildNfeDetalheSubForm(), "NFE Detalhe", null);

		return tabSheet_2;
	}
	
	private SubFormComponent<NfeDetalheEntity, Integer> buildNfeDetalheSubForm() {
		SubFormComponent<NfeDetalheEntity, Integer> subForm = new SubFormComponent<NfeDetalheEntity, Integer>(NfeDetalheEntity.class, 
				new String[] { "numeroItem", "gtin", "nomeProduto","unidadeComercial", "cfop", "quantidadeComercial","valorUnitarioComercial", "valorTotal"},
				new String[] { "Item", "GTIN", "Descrição","Unidade", "CFOP", "Quantidade", "Valor Unitário","Valor Total"}) {
			
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("numeroItem".equals(propertyId)) {
							TextField tf = ComponentUtil.buildNumericField(null);
							tf.setConverter(new IntegerConverter());
							return tf;
						} 
						if ("gtin".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							textField.setSizeFull();
							return textField;
						} 
						if ("nomeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							textField.setSizeFull();
							return textField;
						} 
						if ("unidadeComercial".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							textField.setSizeFull();
							return textField;							
						}
						if ("cfop".equals(propertyId)) {
							TextField tf = ComponentUtil.buildNumericField(null);
							tf.setConverter(new IntegerConverter());
							return tf;								
						}
						if ("quantidadeComercial".equals(propertyId)) {
							
							TextField buildCurrencyField = ComponentUtil.buildNumberField(null);
							buildCurrencyField.addBlurListener(getBlurListener(
									container, itemId, propertyId));
							return buildCurrencyField;

						} 
						if ("valorUnitarioComercial".equals(propertyId)) {
							TextField buildCurrencyField = ComponentUtil.buildCurrencysField(null);
							buildCurrencyField.addBlurListener(getBlurListener(
									container, itemId, propertyId));
							return buildCurrencyField;
						
					    } 
						if ("valorTotal".equals(propertyId)) {
						    return ComponentUtil.buildCurrencyField(null);
					    }

						return ComponentUtil.buildTextField(null);

					}

					private BlurListener getBlurListener(
							final Container container, final Object itemId,
							final Object propertyId) {
						return new BlurListener() {

							/**
							 * 
							 */
							private static final long serialVersionUID = 1L;

							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeComercial");
								Property<BigDecimal> valorUnitario = get("valorUnitarioComercial");
								Property<BigDecimal> valorTotal = get("valorTotal");

								if (quantidade.getValue() != null && valorUnitario.getValue() != null) {
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitario.getValue();
									valorTotal.setValue(q.multiply(vu));
								}

							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);

								return item.getItemProperty(property);
							}

						};
					}

				};
			}

			protected NfeDetalheEntity getNovo() {
				NfeDetalheEntity nfe = controller.novoNfe();
				return nfe;
			}

			protected void getRemoverSelecionados(List<NfeDetalheEntity> values) {
				controller.removerNfe(values);
			}

			@Override
			public boolean validateItems(List<NfeDetalheEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		nfeDetalheSubForm = subForm;

		return subForm;
	}


	public void preencheSubForm(List<NfeDetalheEntity> detalhes) {
		nfeDetalheSubForm.fillWith(detalhes);
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public GridLayout getFields() {
		return fields;
	}

	public void setFields(GridLayout fields) {
		this.fields = fields;
	}

	public TabSheet getTabSheet() {
		return tabSheet;
	}

	public void setTabSheet(TabSheet tabSheet) {
		this.tabSheet = tabSheet;
	}

	public TextField getTxtCodigo() {
		return txtCodigo;
	}

	public void setTxtCodigo(TextField txtCodigo) {
		this.txtCodigo = txtCodigo;
	}

	public TextField getTxtNome() {
		return txtNome;
	}

	public void setTxtNome(TextField txtNome) {
		this.txtNome = txtNome;
	}

	public TextArea getTxaDescricao() {
		return txaDescricao;
	}

	public void setTxaDescricao(TextArea txaDescricao) {
		this.txaDescricao = txaDescricao;
	}

	public TextArea getTxaObservacao() {
		return txaObservacao;
	}

	public void setTxaObservacao(TextArea txaObservacao) {
		this.txaObservacao = txaObservacao;
	}

	public PopupDateField getPdDataCadastro() {
		return pdDataCadastro;
	}

	public void setPdDataCadastro(PopupDateField pdDataCadastro) {
		this.pdDataCadastro = pdDataCadastro;
	}

	public PopupDateField getPdDataCompra() {
		return pdDataCompra;
	}

	public void setPdDataCompra(PopupDateField pdDataCompra) {
		this.pdDataCompra = pdDataCompra;
	}

	public PopupDateField getPdDataFabricacao() {
		return pdDataFabricacao;
	}

	public void setPdDataFabricacao(PopupDateField pdDataFabricacao) {
		this.pdDataFabricacao = pdDataFabricacao;
	}

	public PopupDateField getPdDataVencimento() {
		return pdDataVencimento;
	}

	public void setPdDataVencimento(PopupDateField pdDataVencimento) {
		this.pdDataVencimento = pdDataVencimento;
	}

	public SubFormComponent<NfeDetalheEntity, Integer> getNfeDetalheSubForm() {
		return nfeDetalheSubForm;
	}

	public void setNfeDetalheSubForm(
			SubFormComponent<NfeDetalheEntity, Integer> nfeDetalheSubForm) {
		this.nfeDetalheSubForm = nfeDetalheSubForm;
	}

	public LoteProdutoFormController getController() {
		return controller;
	}

	public void setController(LoteProdutoFormController controller) {
		this.controller = controller;
	}
	
}
