package dc.visao.suprimento.estoque;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.vaadin.addons.maskedtextfield.MaskedTextField;
import org.vaadin.addons.maskedtextfield.NumericField;
import org.vaadin.easyuploads.UploadField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property.ReadOnlyException;
import com.vaadin.data.util.converter.Converter.ConversionException;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload.Receiver;
import com.vaadin.ui.VerticalLayout;

import dc.br.inf.portalfiscal.nfe.TEnderEmi;
import dc.br.inf.portalfiscal.nfe.TNFe;
import dc.br.inf.portalfiscal.nfe.TNFe.InfNFe.Det;
import dc.br.inf.portalfiscal.nfe.TNFe.InfNFe.Emit;
import dc.br.inf.portalfiscal.nfe.TNFe.InfNFe.Ide;
import dc.br.inf.portalfiscal.nfe.TNFe.InfNFe.InfAdic;
import dc.br.inf.portalfiscal.nfe.TNFe.InfNFe.Total.ICMSTot;
import dc.br.inf.portalfiscal.nfe.TNfeProc;
import dc.controller.suprimento.estoque.NotaFiscalFormController;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.entidade.suprimentos.CupomFiscalReferenciadoEntity;
import dc.entidade.suprimentos.NfeDuplicata;
import dc.entidade.suprimentos.NotaFiscalEmitente;
import dc.entidade.suprimentos.NotaReferenciada;
import dc.entidade.suprimentos.estoque.LoteProdutoEntity;
import dc.entidade.suprimentos.estoque.NotaFiscal;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class NotaFiscalFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet subForms;
	@AutoGenerated
	private TabSheet dadosNfe;

	@AutoGenerated
	private GridLayout camposEmitente;
	@AutoGenerated
	private GridLayout camposCuponsVinculados;
	@AutoGenerated
	private GridLayout camposNfeReferenciada;
	@AutoGenerated
	private GridLayout camposEntregaRetirada;
	@AutoGenerated
	private GridLayout camposProdutos;
	@AutoGenerated
	private GridLayout camposTransporte;
	@AutoGenerated
	private GridLayout camposCobranca;
	@AutoGenerated
	private GridLayout camposLote;

	private NotaFiscalFormController controller;

	private SubFormComponent<NfeDuplicata, Integer> duplicataSubForm;

	private SubFormComponent<ProdutoEntity, Integer> produtoSubForm;
	
	private SubFormComponent<LoteProdutoEntity, Integer> loteProdutoSubForm;

	private SubFormComponent<CupomFiscalReferenciadoEntity, Integer> cuponsSubForm;

	private SubFormComponent<NotaReferenciada, Integer> notasSubForm;

	public NotaFiscalFormView(NotaFiscalFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// common part: create layout
		subForms = new TabSheet();
		subForms.setWidth("100.0%");
		subForms.setHeight("100.0%");
		subForms.setSizeFull();
		subForms.setImmediate(true);
		buildAbaNFE();
		buildAbaEmitente();
		buildAbaCuponsVinculados();
		buildAbaNFEReferenciada();
		buildAbaEntregaRetirada();
		buildAbaProdutos();
		buildAbaLoteProdutos();
		buildAbaTransporte();
		buildAbaCobranca();
		buildAbaLote();

		mainLayout.addComponent(subForms);

		return mainLayout;
	}

	ComboBox cmbStatus;
	TextField txtChaveAcesso;

	NumericField txtNumero;

	public TextField txtModelo;

	TextField txtSerie;

	PopupDateField dataEmissao;

	PopupDateField dataEntradaSaida;

	MaskedTextField horaEntradaSaida;

	ComboBox tipoOperacao;

	ComboBox formaPagamento;

	ComboBox formaEmissao;

	ComboBox finalidadeEmissao;

	ComboBox tipoDanfe;

	public TextField natureza;

	TextField baseICMS;

	TextField valorICMS;

	TextField baseICMSST;

	TextField valorICMSST;

	TextField totalCofins;

	TextField totalProdutos;

	TextField valorFrete;

	TextField valorSeguro;

	TextField outrasDespesas;

	TextField valorTotalPIS;

	TextField descontos;

	TextField totalNota;

	TextArea infoFisco;

	// Linha 7
	TextArea infoContrib;

	public TextArea getInfoFisco() {
		return infoFisco;
	}

	public void setInfoFisco(TextArea infoFisco) {
		this.infoFisco = infoFisco;
	}

	public TextArea getInfoContrib() {
		return infoContrib;
	}

	public void setInfoContrib(TextArea infoContrib) {
		this.infoContrib = infoContrib;
	}

	public TextField getValorFrete() {
		return valorFrete;
	}

	public void setValorFrete(TextField valorFrete) {
		this.valorFrete = valorFrete;
	}

	public TextField getValorSeguro() {
		return valorSeguro;
	}

	public void setValorSeguro(TextField valorSeguro) {
		this.valorSeguro = valorSeguro;
	}

	public TextField getOutrasDespesas() {
		return outrasDespesas;
	}

	public void setOutrasDespesas(TextField outrasDespesas) {
		this.outrasDespesas = outrasDespesas;
	}

	public TextField getValorTotalPIS() {
		return valorTotalPIS;
	}

	public void setValorTotalPIS(TextField valorTotalPIS) {
		this.valorTotalPIS = valorTotalPIS;
	}

	public TextField getDescontos() {
		return descontos;
	}

	public void setDescontos(TextField descontos) {
		this.descontos = descontos;
	}

	public TextField getTotalNota() {
		return totalNota;
	}

	public void setTotalNota(TextField totalNota) {
		this.totalNota = totalNota;
	}

	public ComboBox getFormaPagamento() {
		return formaPagamento;
	}

	public void setFormaPagamento(ComboBox formaPagamento) {
		this.formaPagamento = formaPagamento;
	}

	public ComboBox getFormaEmissao() {
		return formaEmissao;
	}

	public void setFormaEmissao(ComboBox formaEmissao) {
		this.formaEmissao = formaEmissao;
	}

	public ComboBox getFinalidadeEmissao() {
		return finalidadeEmissao;
	}

	public void setFinalidadeEmissao(ComboBox finalidadeEmissao) {
		this.finalidadeEmissao = finalidadeEmissao;
	}

	public ComboBox getTipoDanfe() {
		return tipoDanfe;
	}

	public void setTipoDanfe(ComboBox tipoDanfe) {
		this.tipoDanfe = tipoDanfe;
	}

	public TextField getNatureza() {
		return natureza;
	}

	public void setNatureza(TextField natureza) {
		this.natureza = natureza;
	}

	public TextField getBaseICMS() {
		return baseICMS;
	}

	public void setBaseICMS(TextField baseICMS) {
		this.baseICMS = baseICMS;
	}

	public TextField getValorICMS() {
		return valorICMS;
	}

	public void setValorICMS(TextField valorICMS) {
		this.valorICMS = valorICMS;
	}

	public TextField getBaseICMSST() {
		return baseICMSST;
	}

	public void setBaseICMSST(TextField baseICMSST) {
		this.baseICMSST = baseICMSST;
	}

	public TextField getValorICMSST() {
		return valorICMSST;
	}

	public void setValorICMSST(TextField valorICMSST) {
		this.valorICMSST = valorICMSST;
	}

	public TextField getTotalCofins() {
		return totalCofins;
	}

	public void setTotalCofins(TextField totalCofins) {
		this.totalCofins = totalCofins;
	}

	public TextField getTotalProdutos() {
		return totalProdutos;
	}

	public void setTotalProdutos(TextField totalProdutos) {
		this.totalProdutos = totalProdutos;
	}

	@SuppressWarnings({ "deprecation", "serial" })
	public void buildAbaNFE() {
		// Label lblStatus = new Label("Status");

		GridLayout layout = new GridLayout(8, 8);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		// fields.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);

		VerticalLayout xml = new VerticalLayout();

		// final UploadField upload = new UploadField();
		// upload.setCaption("");
		Button submit = new Button("Importar Arquivo");
		final UploadField upload = new UploadField() {
			@Override
			protected void updateDisplay() {
				String filename = getLastFileName();
				Embedded embedded = new Embedded("Arquivo:" + filename);
				getRootLayout().addComponent(embedded);
			}
		};

		layout.addComponent(upload);

		submit.addListener(new Button.ClickListener() {
			OutputStream stream = null;
			JAXBContext context;
			TNfeProc nfe;

			File file = null;

			public void buttonClick(ClickEvent event) {
				InputStream input = null;

				try {
					if (upload != null && upload.getContentAsStream() != null) {
						input = upload.getContentAsStream();
						String temp = System.getProperty("java.io.tmpdir");
						file = new File(temp + "//nfe.xml");
						OutputStream output = new FileOutputStream(file);
						int read = 0;
						byte[] bytes = new byte[1024];

						while ((read = input.read(bytes)) != -1) {
							output.write(bytes, 0, read);
						}

						context = JAXBContext.newInstance(TNfeProc.class);
						Unmarshaller unmarshaller = context
								.createUnmarshaller();
						nfe = (TNfeProc) unmarshaller.unmarshal(file);

						importarPrincipal();
						importarEmitente();
						importarProdutos();
						importarCobranca();
						file.delete();
					}
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			public void importarPrincipal() throws ReadOnlyException,
					ConversionException {
				Ide ide = nfe.getNFe().getInfNFe().getIde();
				InfAdic infAdic = nfe.getNFe().getInfNFe().getInfAdic();
				txtChaveAcesso.setValue(nfe.getProtNFe().getInfProt()
						.getChNFe());

				if (ide != null) {
					tipoOperacao.setValue(TIPO_OPERACAO.getTipoOperacao(ide
							.getTpNF()));
					txtNumero.setValue(ide.getNNF());
					txtModelo.setValue(ide.getMod());
					txtSerie.setValue(ide.getSerie());

					natureza.setValue(ide.getNatOp());
					horaEntradaSaida.setValue(ide.getHSaiEnt());
					dataEntradaSaida.setValue(converteData(ide.getDSaiEnt()));
					dataEmissao.setValue(converteData(ide.getDEmi()));
					formaPagamento.setValue(FORMA_PAGAMENTO
							.getFormaPagamento(ide.getIndPag()));
					formaEmissao.setValue(FORMA_EMISSAO.getFormaEmissao(ide
							.getTpEmis()));
					tipoDanfe.setValue(TIPO_DANFE.getTipoDanfe(ide.getTpImp()));
					finalidadeEmissao.setValue(FINALIDADE_EMISSAO
							.getFinalidadeEmissao(ide.getFinNFe()));
				}

				infoContrib.setNullRepresentation(" ");
				infoFisco.setNullRepresentation(" ");

				if (infAdic != null) {
					infoContrib.setValue(infAdic.getInfCpl());
					infoFisco.setValue(infAdic.getInfAdFisco());
				}

				ICMSTot icms = nfe.getNFe().getInfNFe().getTotal().getICMSTot();

				if (icms != null) {
					baseICMS.setValue(icms.getVBC());
					valorICMS.setValue(icms.getVICMS());
					baseICMSST.setValue(icms.getVBCST());
					valorICMSST.setValue(icms.getVST());
					totalCofins.setValue(icms.getVCOFINS());
					totalProdutos.setValue(icms.getVProd());
					valorFrete.setValue(icms.getVFrete());
					valorSeguro.setValue(icms.getVSeg());
					outrasDespesas.setValue(icms.getVOutro());
					valorTotalPIS.setValue(icms.getVPIS());
					descontos.setValue(icms.getVDesc());
					totalNota.setValue(icms.getVNF());
				}
			}

			public void importarEmitente() {
				Emit emitente = nfe.getNFe().getInfNFe().getEmit();
				TEnderEmi endereco = emitente.getEnderEmit();

				if (emitente != null) {
					cpfCnpjEm.setValue(emitente.getCNPJ());
					razaoEm.setValue(emitente.getXNome());
					fantasiaEm.setValue(emitente.getXFant());
					getInscricao().setValue(emitente.getIE());
					getCrt().setValue(CRT.getCRT(emitente.getCRT()));
				}

				if (endereco != null) {
					getCep().setValue(endereco.getCEP());
					getLogradouro().setValue(endereco.getXLgr());
					getNumero().setValue(endereco.getNro());
					getComplemento().setValue(endereco.getXCpl());
					getBairro().setValue(endereco.getXBairro());
					getTelefone().setValue(endereco.getFone());
					getCodigoMunicipio().setValue(endereco.getCMun());
					getCidade().setValue(endereco.getXMun());
					getUf().setValue(endereco.getUF().value());
				}
			}

			public void importarProdutos() {
				try {
					List<TNFe.InfNFe.Det> produtos = nfe.getNFe().getInfNFe()
							.getDet();

					if (produtos != null) {
						List<ProdutoEntity> lista = new ArrayList<ProdutoEntity>();

						for (Det d : produtos) {
							ProdutoEntity p = new ProdutoEntity();
							// d p.setDescricao(d.getProd().getXProd());
							lista.add(p);
						}

						produtoSubForm.fillWith(lista);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			public void importarCobranca() {

			}
		});

		upload.setButtonCaption("Selecionar XML");
		upload.setImmediate(true);
		xml.addComponent(upload);
		xml.addComponent(submit);
		layout.addComponent(xml, 0, 0, 1, 0);

		// Linha 1
		cmbStatus = new ComboBox("Status");
		cmbStatus.removeAllItems();
		cmbStatus.addItem("1");
		cmbStatus.addItem("2");

		layout.addComponent(cmbStatus, 0, 1);

		txtChaveAcesso = new TextField("Chave de Acesso");
		txtChaveAcesso.setMaxLength(9);
		txtChaveAcesso.setWidth("500");
		layout.addComponent(txtChaveAcesso, 1, 1, 3, 1);

		txtNumero = ComponentUtil.buildNumericField("Número");
		layout.addComponent(txtNumero, 4, 1);

		// Linha 2
		txtModelo = new TextField("Modelo");
		layout.addComponent(txtModelo, 0, 2);

		txtSerie = new TextField("Série");
		layout.addComponent(txtSerie, 1, 2);

		dataEmissao = new PopupDateField("Data Emissão");
		layout.addComponent(dataEmissao, 2, 2);

		dataEntradaSaida = new PopupDateField("Data Entrada/Saida");
		layout.addComponent(dataEntradaSaida, 3, 2);

		horaEntradaSaida = new MaskedTextField("Hora Entrada/Saida", "##:##");
		layout.addComponent(horaEntradaSaida, 4, 2);

		tipoOperacao = new ComboBox("Tipo de Operação");
		carregarTipoOperacao();

		layout.addComponent(tipoOperacao, 5, 2);

		// Linha 3

		formaPagamento = new ComboBox("Forma de Pagamento");
		carregarFormaPagamento();
		layout.addComponent(formaPagamento, 0, 3);

		formaEmissao = new ComboBox("Forma de Emissão");
		carregarFormaEmissao();
		layout.addComponent(formaEmissao, 1, 3);

		finalidadeEmissao = new ComboBox("Finalidade de Emissão");
		carregarFinalidadeEmissao();
		layout.addComponent(finalidadeEmissao, 2, 3);

		tipoDanfe = new ComboBox("Tipo Impressão DANFE");
		carregarTipoDANFE();
		layout.addComponent(tipoDanfe, 3, 3);

		natureza = new TextField("Natureza Operação");
		// natureza.setWidth("250");
		layout.addComponent(natureza, 4, 3, 6, 3);

		// Linha 4
		baseICMS = ComponentUtil.buildCurrencyField("Base de Cálculo ICMS");
		layout.addComponent(baseICMS, 0, 4);

		valorICMS = ComponentUtil.buildCurrencyField("Valor do Cálculo ICMS");
		layout.addComponent(valorICMS, 1, 4);

		baseICMSST = ComponentUtil.buildCurrencyField("Base de Cálculo ICMS ST:");
		layout.addComponent(baseICMSST, 2, 4);

		valorICMSST =ComponentUtil.buildCurrencyField("Valor do Cálculo ICMS ST:");
		layout.addComponent(valorICMSST, 3, 4);

		totalCofins = ComponentUtil.buildCurrencyField("Valor Total COFINS");
		layout.addComponent(totalCofins, 4, 4);

		totalProdutos = ComponentUtil.buildCurrencyField("Total Produtos");
		layout.addComponent(totalProdutos, 5, 4);

		// Linha 5
		valorFrete = ComponentUtil.buildCurrencyField("Valor do Frete");
		layout.addComponent(valorFrete, 0, 5);

		valorSeguro = ComponentUtil.buildCurrencyField("Valor do Seguro");
		layout.addComponent(valorSeguro, 1, 5);

		outrasDespesas = ComponentUtil.buildCurrencyField("Outras Desp.Acessórias");
		layout.addComponent(outrasDespesas, 2, 5);

		valorTotalPIS = ComponentUtil.buildCurrencyField("Valor Total do PIS");
		layout.addComponent(valorTotalPIS, 3, 5);

		descontos = ComponentUtil.buildCurrencyField("Descontos");
		layout.addComponent(descontos, 4, 5);

		totalNota = ComponentUtil.buildCurrencyField("Total Nota");
		layout.addComponent(totalNota, 5, 5);

		// Linha 6
		infoFisco = new TextArea("Informações Adicionais de Interesse do FISCO");
		infoFisco.setNullRepresentation(" ");
		infoFisco.setWidth("800");
		layout.addComponent(infoFisco, 0, 6, 4, 6);

		// Linha 7
		infoContrib = new TextArea(
				"Informações Adicionais de Interesse do Contribuinte");
		infoContrib.setNullRepresentation(" ");
		infoContrib.setWidth("800");
		layout.addComponent(infoContrib, 0, 7, 4, 7);

		subForms.addTab(layout, "Dados da NF-E", null);
	}

	// public void adicionarComponentes(GridLayout grid,List<? extends
	// AbstractComponent>componentes){
	// for(Component c: componentes){
	// grid.addComponent(c);
	// }
	// }

	public void adicionarComponentes(VerticalLayout grid,
			List<? extends AbstractComponent> componentes) {
		for (Component c : componentes) {
			grid.addComponent(c);
		}
	}

	public GridLayout montaGridLayout(Integer colunas, Integer linhas) {
		GridLayout grid = new GridLayout(colunas, linhas);
		grid.setImmediate(false);
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(true);

		return grid;
	}

	public HorizontalLayout montaHorizontal(List<? extends Component> components) {
		HorizontalLayout grid = new HorizontalLayout();
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(true);

		for (Component c : components) {
			grid.addComponent(c);
		}

		return grid;
	}

	public VerticalLayout montaVertical(List<? extends Component> components) {
		VerticalLayout grid = new VerticalLayout();
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(false);

		for (Component c : components) {
			grid.addComponent(c);
		}

		return grid;

	}

	public TextField cpfCnpjEm;
	public TextField razaoEm;
	public TextField fantasiaEm;

	TextField cep;

	TextField logradouro;

	TextField numero;

	TextField complemento;

	// Linha 3
	TextField bairro;

	TextField codigoMunicipio;

	TextField cidade;

	ComboBox uf;

	TextField inscricao;

	// Linha 4
	TextField telefone;

	ComboBox crt;

	public TextField getCpfCnpjEm() {
		return cpfCnpjEm;
	}

	public void setCpfCnpjEm(TextField cpfCnpjEm) {
		this.cpfCnpjEm = cpfCnpjEm;
	}

	public TextField getCodigoMunicipio() {
		return codigoMunicipio;
	}

	public void setCodigoMunicipio(TextField codigoMunicipio) {
		this.codigoMunicipio = codigoMunicipio;
	}

	public TextField getRazaoEm() {
		return razaoEm;
	}

	public void setRazaoEm(TextField razaoEm) {
		this.razaoEm = razaoEm;
	}

	public TextField getFantasiaEm() {
		return fantasiaEm;
	}

	public void setFantasiaEm(TextField fantasiaEm) {
		this.fantasiaEm = fantasiaEm;
	}

	public TextField getLogradouro() {
		return logradouro;
	}

	public void setLogradouro(TextField logradouro) {
		this.logradouro = logradouro;
	}

	public TextField getNumero() {
		return numero;
	}

	public void setNumero(TextField numero) {
		this.numero = numero;
	}

	public TextField getComplemento() {
		return complemento;
	}

	public void setComplemento(TextField complemento) {
		this.complemento = complemento;
	}

	public TextField getCidade() {
		return cidade;
	}

	public void setCidade(TextField cidade) {
		this.cidade = cidade;
	}

	public ComboBox getUf() {
		return uf;
	}

	public void setUf(ComboBox uf) {
		this.uf = uf;
	}

	public TextField getInscricao() {
		return inscricao;
	}

	public void setInscricao(TextField inscricao) {
		this.inscricao = inscricao;
	}

	public TextField getTelefone() {
		return telefone;
	}

	public void setTelefone(TextField telefone) {
		this.telefone = telefone;
	}

	public ComboBox getCrt() {
		return crt;
	}

	public void setCrt(ComboBox crt) {
		this.crt = crt;
	}

	public TextField getCep() {
		return cep;
	}

	public void setCep(TextField cep) {
		this.cep = cep;
	}

	public TextField getBairro() {
		return bairro;
	}

	public void setBairro(TextField bairro) {
		this.bairro = bairro;
	}

	public void buildAbaEmitente() {
		GridLayout layout = new GridLayout(8, 7);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		// fields.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);

		cpfCnpjEm = ComponentUtil.buildTextField("CPF/CNPJ");
		layout.addComponent(cpfCnpjEm, 0, 0);

		razaoEm = ComponentUtil.buildTextField("Razão Social");
		layout.addComponent(razaoEm, 1, 0, 2,0);

		fantasiaEm = ComponentUtil.buildTextField("Nome Fantasia");
		layout.addComponent(fantasiaEm, 3, 0, 5,0);

		cep = ComponentUtil.buildMaskedTextField("CEP", "##.###-###");
		layout.addComponent(cep, 0, 1);

		logradouro = ComponentUtil.buildTextField("Logradouro");
		layout.addComponent(logradouro, 1, 1, 2,1);

		numero = ComponentUtil.buildTextField("Número");
		layout.addComponent(numero, 3, 1);

		complemento = ComponentUtil.buildTextField("Complemento");
		layout.addComponent(complemento, 4, 1, 5, 1);

		// Linha 3
		bairro = ComponentUtil.buildTextField("Bairro");
		layout.addComponent(bairro, 0, 2);

		codigoMunicipio = ComponentUtil.buildTextField("Código IBGE");
		layout.addComponent(codigoMunicipio, 1, 2);

		cidade = ComponentUtil.buildTextField("Cidade");
		layout.addComponent(cidade, 2, 2, 3,2);

		uf = ComponentUtil.buildComboBox("UF");
		layout.addComponent(uf, 4, 2, 5,2);

		// Linha 4

		inscricao = ComponentUtil.buildTextField("Inscrição Estadual");
		layout.addComponent(inscricao, 0, 3);

		telefone = ComponentUtil.buildMaskedTextField("Telefone", "(##) ####-#####");
		layout.addComponent(telefone, 1, 3);

		crt = ComponentUtil.buildComboBox("CRT");
		carregarCRT();
		layout.addComponent(crt, 2, 3, 3,3);

		subForms.addTab(layout, "Emitente", null);
	}

	public void buildAbaCuponsVinculados() {
		TabSheet abaCupom = buildCuponsSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaCupom);
		subForms.addTab(layout, "Cupons Fiscais Vinculados", null);
	}

	@SuppressWarnings("serial")
	private TabSheet buildCuponsSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		cuponsSubForm = new SubFormComponent<CupomFiscalReferenciadoEntity, Integer>(
				CupomFiscalReferenciadoEntity.class,
				new String[] { "modelo", "dataEmissao", "coo", "numeroCaixa",
						"numeroSerieEcf" }, new String[] { "Modelo",
						"Data de Emissão", "COO", "Número de Caixa",
						"Número de Série ECF" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("modelo".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("dataEmissao".equals(propertyId)) {
							PopupDateField valor = ComponentUtil
									.buildPopupDateField("Data Emissão");
							// textField.addBlurListener(getBlurListener(container,
							// itemId, propertyId));

							return valor;
						} else if ("coo".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("numeroCaixa".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("numeroSerieEcf".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						}

						return null;
					}
				};
			}

			protected CupomFiscalReferenciadoEntity getNovo() {
				CupomFiscalReferenciadoEntity detalhe = controller.novoCupom();

				return detalhe;
			}

			@Override
			public boolean validateItems(
					List<CupomFiscalReferenciadoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		sub.addTab(cuponsSubForm, "Cupons Referenciados", null);

		return sub;
	}

	@SuppressWarnings("serial")
	private TabSheet buildProdutosSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		produtoSubForm = new SubFormComponent<ProdutoEntity, Integer>(
				ProdutoEntity.class, new String[] { "descricao" },
				new String[] { "Descrição" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("descricao".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);

							return textField;
						}

						return null;
					}
				};
			}

			protected ProdutoEntity getNovo() {
				return null;
			}

			@Override
			public boolean validateItems(List<ProdutoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		sub.addTab(produtoSubForm, "Produtos", null);

		return sub;
	}

	public void buildAbaNFEReferenciada() {
		TabSheet abaNota = buildNotasSubForm();
		VerticalLayout layout = montaVertical(Arrays.asList(abaNota));
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		subForms.addTab(layout, "NF-E Referenciada", null);
	}

	@SuppressWarnings("serial")
	private TabSheet buildNotasSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setSizeFull();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setImmediate(true);

		notasSubForm = new SubFormComponent<NotaReferenciada, Integer>(
				NotaReferenciada.class, new String[] { "uf", "anoMes", "cnpj",
						"modelo", "serie", "numero" }, new String[] {
						"Código UF", "Ano Mês", "CNPJ", "Modelo", "Série",
						"Número" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("uf".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("anoMes".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("cnpj".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("modelo".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("serie".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("numero".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						}

						return null;
					}
				};
			}

			protected NotaReferenciada getNovo() {
				NotaReferenciada detalhe = controller.novaNota();

				return detalhe;
			}

			@Override
			public boolean validateItems(List<NotaReferenciada> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		sub.addTab(notasSubForm, "NF-E Referenciada", null);

		return sub;
	}

	TextField cnpjEnt;

	TextField logradouroEnt;

	TextField numeroEnt;

	TextField complementoEnt;

	TextField bairroEnt;

	TextField ibgeEnt;

	TextField cidadeEnt;

	ComboBox ufEnt;

	TextField cnpjRet;

	TextField logradouroRet;

	TextField numeroRet;

	TextField complementoRet;

	TextField bairroRet;

	TextField ibgeRet;

	TextField cidadeRet;

	ComboBox ufRet;

	public TextField getCnpjEnt() {
		return cnpjEnt;
	}

	public void setCnpjEnt(TextField cnpjEnt) {
		this.cnpjEnt = cnpjEnt;
	}

	public TextField getLogradouroEnt() {
		return logradouroEnt;
	}

	public void setLogradouroEnt(TextField logradouroEnt) {
		this.logradouroEnt = logradouroEnt;
	}

	public TextField getNumeroEnt() {
		return numeroEnt;
	}

	public void setNumeroEnt(TextField numeroEnt) {
		this.numeroEnt = numeroEnt;
	}

	public TextField getComplementoEnt() {
		return complementoEnt;
	}

	public void setComplementoEnt(TextField complementoEnt) {
		this.complementoEnt = complementoEnt;
	}

	public TextField getBairroEnt() {
		return bairroEnt;
	}

	public void setBairroEnt(TextField bairroEnt) {
		this.bairroEnt = bairroEnt;
	}

	public TextField getIbgeEnt() {
		return ibgeEnt;
	}

	public void setIbgeEnt(TextField ibgeEnt) {
		this.ibgeEnt = ibgeEnt;
	}

	public TextField getCidadeEnt() {
		return cidadeEnt;
	}

	public void setCidadeEnt(TextField cidadeEnt) {
		this.cidadeEnt = cidadeEnt;
	}

	public ComboBox getUfEnt() {
		return ufEnt;
	}

	public void setUfEnt(ComboBox ufEnt) {
		this.ufEnt = ufEnt;
	}

	public TextField getCnpjRet() {
		return cnpjRet;
	}

	public void setCnpjRet(TextField cnpjRet) {
		this.cnpjRet = cnpjRet;
	}

	public TextField getLogradouroRet() {
		return logradouroRet;
	}

	public void setLogradouroRet(TextField logradouroRet) {
		this.logradouroRet = logradouroRet;
	}

	public TextField getNumeroRet() {
		return numeroRet;
	}

	public void setNumeroRet(TextField numeroRet) {
		this.numeroRet = numeroRet;
	}

	public TextField getComplementoRet() {
		return complementoRet;
	}

	public void setComplementoRet(TextField complementoRet) {
		this.complementoRet = complementoRet;
	}

	public TextField getBairroRet() {
		return bairroRet;
	}

	public void setBairroRet(TextField bairroRet) {
		this.bairroRet = bairroRet;
	}

	public TextField getIbgeRet() {
		return ibgeRet;
	}

	public void setIbgeRet(TextField ibgeRet) {
		this.ibgeRet = ibgeRet;
	}

	public TextField getCidadeRet() {
		return cidadeRet;
	}

	public void setCidadeRet(TextField cidadeRet) {
		this.cidadeRet = cidadeRet;
	}

	public ComboBox getUfRet() {
		return ufRet;
	}

	public void setUfRet(ComboBox ufRet) {
		this.ufRet = ufRet;
	}

	public void buildAbaEntregaRetirada() {
		GridLayout layout = new GridLayout(8, 7);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		// fields.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		Panel entrega = new Panel("Dados da Entrega");

		cnpjEnt = new TextField("CPF/CNPJ");
		cnpjEnt.setNullRepresentation(" ");
		layout.addComponent(cnpjEnt, 0, 0);

		logradouroEnt = new TextField("Logradouro");
		logradouroEnt.setNullRepresentation(" ");
		logradouroEnt.setWidth("250");
		layout.addComponent(logradouroEnt, 1, 0, 2, 0);

		numeroEnt = new TextField("Número");
		numeroEnt.setNullRepresentation(" ");
		numeroEnt.setWidth("300");
		layout.addComponent(numeroEnt, 3, 0);

		complementoEnt = new TextField("Complemento");
		complementoEnt.setNullRepresentation(" ");
		complementoEnt.setWidth("300");
		layout.addComponent(complementoEnt, 6, 0);

		bairroEnt = new TextField("Bairro");
		bairroEnt.setNullRepresentation(" ");
		layout.addComponent(bairroEnt, 0, 1);

		ibgeEnt = new TextField("Código IBGE");
		ibgeEnt.setNullRepresentation(" ");
		layout.addComponent(ibgeEnt, 1, 1, 2, 1);

		cidadeEnt = new TextField("Cidade");
		cidadeEnt.setNullRepresentation(" ");
		cidadeEnt.setWidth("300");
		layout.addComponent(cidadeEnt, 3, 1, 5, 1);

		ufEnt = ComponentUtil.buildComboBox("UF");
		layout.addComponent(ufEnt, 6, 1);

		entrega.setContent(layout);

		GridLayout layoutRet = new GridLayout(8, 7);
		layoutRet.setImmediate(false);
		layoutRet.setWidth("100.0%");
		// fields.setHeight("100.0%");
		layoutRet.setMargin(true);
		layoutRet.setSpacing(true);
		Panel retirada = new Panel("Dados da Retirada");

		cnpjRet = new TextField("CPF/CNPJ");
		cnpjRet.setNullRepresentation(" ");
		layoutRet.addComponent(cnpjRet, 0, 0);

		logradouroRet = new TextField("Logradouro");
		logradouroRet.setNullRepresentation(" ");
		logradouroRet.setWidth("250");
		layoutRet.addComponent(logradouroRet, 1, 0, 2, 0);

		numeroRet = new TextField("Número");
		numeroRet.setNullRepresentation(" ");
		numeroRet.setWidth("300");
		layoutRet.addComponent(numeroRet, 3, 0);

		complementoRet = new TextField("Complemento");
		complementoRet.setNullRepresentation(" ");
		complementoRet.setWidth("300");
		layoutRet.addComponent(complementoRet, 6, 0);

		bairroRet = new TextField("Bairro");
		bairroRet.setNullRepresentation(" ");
		layoutRet.addComponent(bairroRet, 0, 1);

		ibgeRet = new TextField("Código IBGE");
		ibgeRet.setNullRepresentation(" ");
		layoutRet.addComponent(ibgeRet, 1, 1, 2, 1);

		cidadeRet = new TextField("Cidade");
		cidadeRet.setNullRepresentation(" ");
		cidadeRet.setWidth("300");
		layoutRet.addComponent(cidadeRet, 3, 1, 5, 1);

		ufRet = ComponentUtil.buildComboBox("UF");
		layoutRet.addComponent(ufRet, 6, 1);

		retirada.setContent(layoutRet);

		VerticalLayout l = new VerticalLayout();
		l.addComponent(entrega);
		l.addComponent(retirada);

		subForms.addTab(l, "Entrega/Retirada", null);
	}

	public void buildAbaProdutos() {
		TabSheet abaProdutos = buildProdutosSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaProdutos);
		subForms.addTab(layout, "Produtos", null);
	}

	TextField cpfTransp;

	TextField razaoSocialTransp;

	TextField inscricaoEstadualTransp;

	TextField logradouroTransp;

	TextField cidadeTransp;

	ComboBox ufTransp;

	TextField codigoMunicipioTransp;

	TextField cfopTransp;

	TextField baseCalculoTransp;

	TextField aliquotaTransp;

	TextField valorServicoTransp;

	TextField icmsRetidoTransp;

	ComboBox ufVeiculo;

	TextField placaVeiculo;

	TextField rntcVeiculo;

	public TextField getCpfTransp() {
		return cpfTransp;
	}

	public void setCpfTransp(TextField cpfTransp) {
		this.cpfTransp = cpfTransp;
	}

	public TextField getRazaoSocialTransp() {
		return razaoSocialTransp;
	}

	public void setRazaoSocialTransp(TextField razaoSocialTransp) {
		this.razaoSocialTransp = razaoSocialTransp;
	}

	public TextField getInscricaoEstadualTransp() {
		return inscricaoEstadualTransp;
	}

	public void setInscricaoEstadualTransp(TextField inscricaoEstadualTransp) {
		this.inscricaoEstadualTransp = inscricaoEstadualTransp;
	}

	public TextField getLogradouroTransp() {
		return logradouroTransp;
	}

	public void setLogradouroTransp(TextField logradouroTransp) {
		this.logradouroTransp = logradouroTransp;
	}

	public TextField getCidadeTransp() {
		return cidadeTransp;
	}

	public void setCidadeTransp(TextField cidadeTransp) {
		this.cidadeTransp = cidadeTransp;
	}

	public ComboBox getUfTransp() {
		return ufTransp;
	}

	public void setUfTransp(ComboBox ufTransp) {
		this.ufTransp = ufTransp;
	}

	public TextField getCodigoMunicipioTransp() {
		return codigoMunicipioTransp;
	}

	public void setCodigoMunicipioTransp(TextField codigoMunicipioTransp) {
		this.codigoMunicipioTransp = codigoMunicipioTransp;
	}

	public TextField getCfopTransp() {
		return cfopTransp;
	}

	public void setCfopTransp(TextField cfopTransp) {
		this.cfopTransp = cfopTransp;
	}

	public TextField getBaseCalculoTransp() {
		return baseCalculoTransp;
	}

	public void setBaseCalculoTransp(TextField baseCalculoTransp) {
		this.baseCalculoTransp = baseCalculoTransp;
	}

	public TextField getAliquotaTransp() {
		return aliquotaTransp;
	}

	public void setAliquotaTransp(TextField aliquotaTransp) {
		this.aliquotaTransp = aliquotaTransp;
	}

	public TextField getValorServicoTransp() {
		return valorServicoTransp;
	}

	public void setValorServicoTransp(TextField valorServicoTransp) {
		this.valorServicoTransp = valorServicoTransp;
	}

	public TextField getIcmsRetidoTransp() {
		return icmsRetidoTransp;
	}

	public void setIcmsRetidoTransp(TextField icmsRetidoTransp) {
		this.icmsRetidoTransp = icmsRetidoTransp;
	}

	public ComboBox getUfVeiculo() {
		return ufVeiculo;
	}

	public void setUfVeiculo(ComboBox ufVeiculo) {
		this.ufVeiculo = ufVeiculo;
	}

	public TextField getPlacaVeiculo() {
		return placaVeiculo;
	}

	public void setPlacaVeiculo(TextField placaVeiculo) {
		this.placaVeiculo = placaVeiculo;
	}

	public TextField getRntcVeiculo() {
		return rntcVeiculo;
	}

	public void setRntcVeiculo(TextField rntcVeiculo) {
		this.rntcVeiculo = rntcVeiculo;
	}


	public void buildAbaLoteProdutos() {
		TabSheet abaProdutos = buildLoteProdutosSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaProdutos);
		subForms.addTab(layout, "Lote de Produtos", null);
	}
	
	@SuppressWarnings("serial")
	private TabSheet buildLoteProdutosSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		loteProdutoSubForm = new SubFormComponent<LoteProdutoEntity, Integer>(
				LoteProdutoEntity.class, new String[] { "codigo","nome","dataCadastro","dataCompra","dataFabricacao","dataVencimento",
					"descricao","observacao"},
				new String[] { "Código","Nome","Data de Cadastro","Data de Compra","Data de Fabricação","Data de Vencimento","Descrição","Observação" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("codigo".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}
						if ("nome".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}
						if ("dataCadastro".equals(propertyId)) {
							PopupDateField textField = ComponentUtil.buildPopupDateField(null);
							return textField;
						}
						if ("dataCompra".equals(propertyId)) {
							PopupDateField textField = ComponentUtil.buildPopupDateField(null);
							return textField;
						}
						if ("dataFabricacao".equals(propertyId)) {
							PopupDateField textField = ComponentUtil.buildPopupDateField(null);
							return textField;
						}
						if ("dataVencimento".equals(propertyId)) {
							PopupDateField textField = ComponentUtil.buildPopupDateField(null);
							return textField;
						}
						if ("descricao".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}
						if ("observacao".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}

						return null;
					}
				};
			}

			protected LoteProdutoEntity getNovo() {
				return null;
			}

			@Override
			public boolean validateItems(List<LoteProdutoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		sub.addTab(loteProdutoSubForm, "Lote de Produtos", null);

		return sub;
	}

	public void buildAbaTransporte() {
		Panel panelTransporte = new Panel("Transporte");

		GridLayout gridTransporte = new GridLayout(8, 7);
		gridTransporte.setImmediate(false);
		gridTransporte.setWidth("100.0%");
		// fields.setHeight("100.0%");
		gridTransporte.setMargin(true);
		gridTransporte.setSpacing(true);

		cpfTransp = new TextField("CPF/CNPJ");
		cpfTransp.setNullRepresentation(" ");
		cpfTransp.setWidth("200");
		gridTransporte.addComponent(cpfTransp, 0, 0, 1, 0);

		razaoSocialTransp = new TextField("Razão Social");
		razaoSocialTransp.setWidth("400");
		gridTransporte.addComponent(razaoSocialTransp, 2, 0, 4, 0);

		inscricaoEstadualTransp = new TextField("Inscrição Estadual");
		inscricaoEstadualTransp.setWidth("400");
		gridTransporte.addComponent(inscricaoEstadualTransp, 5, 0, 7, 0);

		logradouroTransp = new TextField("Logradouro");
		logradouroTransp.setWidth("400");
		gridTransporte.addComponent(logradouroTransp, 0, 1, 3, 1);

		cidadeTransp = new TextField("Cidade");
		cidadeTransp.setWidth("400");
		gridTransporte.addComponent(cidadeTransp, 4, 1, 5, 1);

		ufTransp = ComponentUtil.buildComboBox("UF");
		gridTransporte.addComponent(ufTransp, 6, 1);

		panelTransporte.setContent(gridTransporte);

		Panel panelRetencao = new Panel("Retenção ICMS");
		GridLayout gridRetencao = new GridLayout(8, 7);
		gridRetencao.setImmediate(false);
		gridRetencao.setWidth("100.0%");
		// fields.setHeight("100.0%");
		gridRetencao.setMargin(true);
		gridRetencao.setSpacing(true);

		codigoMunicipioTransp = new TextField("Cidade(IBGE)");
		gridRetencao.addComponent(codigoMunicipioTransp, 0, 0);

		cfopTransp = new TextField("CFOP");
		gridRetencao.addComponent(cfopTransp, 1, 0);

		baseCalculoTransp = ComponentUtil.buildCurrencyField("Base de Cálculo");
		gridRetencao.addComponent(baseCalculoTransp, 2, 0);

		aliquotaTransp = new TextField("Aliquota");
		gridRetencao.addComponent(aliquotaTransp, 3, 0);

		valorServicoTransp = ComponentUtil.buildCurrencyField("Valor Serviço");
		gridRetencao.addComponent(valorServicoTransp, 4, 0);

		icmsRetidoTransp = new TextField("ICMS Retido");
		gridRetencao.addComponent(icmsRetidoTransp, 5, 0);

		panelRetencao.setContent(gridRetencao);

		Panel panelVeiculo = new Panel("Veiculo");
		GridLayout gridVeiculo = new GridLayout(8, 7);
		gridVeiculo.setImmediate(false);
		gridVeiculo.setWidth("100.0%");
		// fields.setHeight("100.0%");
		gridVeiculo.setMargin(true);
		gridVeiculo.setSpacing(true);

		ufVeiculo = ComponentUtil.buildComboBox("UF");
		gridVeiculo.addComponent(ufVeiculo, 0, 0);

		placaVeiculo = new MaskedTextField("Placa", "UUU-####");
		gridVeiculo.addComponent(placaVeiculo);

		rntcVeiculo = new TextField("RNTC");
		gridVeiculo.addComponent(rntcVeiculo, 2, 0);

		panelVeiculo.setContent(gridVeiculo);

		VerticalLayout l = new VerticalLayout();
		l.addComponent(panelTransporte);
		l.addComponent(panelRetencao);
		l.addComponent(panelVeiculo);
		subForms.addTab(l, "Transporte", null);
	}

	public TextField numeroFatura;
	TextField valorOriginalFatura;
	TextField valorDescontoFatura;
	TextField valorLiquidoFatura;

	public TextField getNumeroFatura() {
		return numeroFatura;
	}

	public void setNumeroFatura(TextField numeroFatura) {
		this.numeroFatura = numeroFatura;
	}

	public TextField getValorOriginalFatura() {
		return valorOriginalFatura;
	}

	public void setValorOriginalFatura(TextField valorOriginalFatura) {
		this.valorOriginalFatura = valorOriginalFatura;
	}

	public TextField getValorDescontoFatura() {
		return valorDescontoFatura;
	}

	public void setValorDescontoFatura(TextField valorDescontoFatura) {
		this.valorDescontoFatura = valorDescontoFatura;
	}

	public TextField getValorLiquidoFatura() {
		return valorLiquidoFatura;
	}

	public void setValorLiquidoFatura(TextField valorLiquidoFatura) {
		this.valorLiquidoFatura = valorLiquidoFatura;
	}

	public void buildAbaCobranca() {
		numeroFatura = new TextField("Número");
		valorOriginalFatura = ComponentUtil.buildCurrencyField("Valor Original");
		valorDescontoFatura = ComponentUtil.buildCurrencyField("Valor Desconto");
		valorLiquidoFatura = ComponentUtil.buildCurrencyField("Valor Liquido");

		GridLayout gridFatura = new GridLayout(4, 1);
		gridFatura.setImmediate(false);
		gridFatura.setMargin(true);
		gridFatura.setSpacing(true);
		gridFatura.addComponent(numeroFatura, 0, 0);
		gridFatura.addComponent(valorOriginalFatura, 1, 0);
		gridFatura.addComponent(valorDescontoFatura, 2, 0);
		gridFatura.addComponent(valorLiquidoFatura, 3, 0);

		Panel panelFatura = new Panel("Fatura");
		panelFatura.setWidth("70.0%");

		panelFatura.setContent(gridFatura);

		VerticalLayout layout = new VerticalLayout();
		layout.setHeight("30.0%");
		layout.setWidth("10.0%");
		layout.setSizeFull();
		layout.setSpacing(true);
		layout.setImmediate(true);
		layout.addComponent(panelFatura);
		TabSheet abaDuplicata = buildDuplicataSubForm();
		abaDuplicata.setHeight("500.0%");
		layout.addComponent(abaDuplicata);
		layout.setExpandRatio(abaDuplicata, 2);
		subForms.addTab(layout, "Cobrança", null);
	}

	@SuppressWarnings("serial")
	private TabSheet buildDuplicataSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setImmediate(true);

		duplicataSubForm = new SubFormComponent<NfeDuplicata, Integer>(
				NfeDuplicata.class, new String[] { "numero", "valor" },
				new String[] { "Numero", "Valor" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("numero".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);

							return textField;
						} else if ("valor".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);

							return textField;
						}

						return null;
					}
				};
			}

			protected NfeDuplicata getNovo() {
				NfeDuplicata detalhe = controller.novaDuplicata();

				return detalhe;
			}

			@Override
			public boolean validateItems(List<NfeDuplicata> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		sub.addTab(duplicataSubForm, "Duplicatas", null);

		return sub;
	}

	public void buildAbaLote() {

	}

	public ComboBox getCmbStatus() {
		return cmbStatus;
	}

	public void setCmbStatus(ComboBox cmbStatus) {
		this.cmbStatus = cmbStatus;
	}

	public NumericField getTxtNumero() {
		return txtNumero;
	}

	public void setTxtNumero(NumericField txtNumero) {
		this.txtNumero = txtNumero;
	}

	public TextField getTxtChaveAcesso() {
		return txtChaveAcesso;
	}

	public void setTxtChaveAcesso(TextField txtChaveAcesso) {
		this.txtChaveAcesso = txtChaveAcesso;
	}

	public TextField getTxtModelo() {
		return txtModelo;
	}

	public void setTxtModelo(TextField txtModelo) {
		this.txtModelo = txtModelo;
	}

	public TextField getTxtSerie() {
		return txtSerie;
	}

	public void setTxtSerie(TextField txtSerie) {
		this.txtSerie = txtSerie;
	}

	public PopupDateField getDataEmissao() {
		return dataEmissao;
	}

	public void setDataEmissao(PopupDateField dataEmissao) {
		this.dataEmissao = dataEmissao;
	}

	public PopupDateField getDataEntradaSaida() {
		return dataEntradaSaida;
	}

	public void setDataEntradaSaida(PopupDateField dataEntradaSaida) {
		this.dataEntradaSaida = dataEntradaSaida;
	}

	public MaskedTextField getHoraEntradaSaida() {
		return horaEntradaSaida;
	}

	public void setHoraEntradaSaida(MaskedTextField horaEntradaSaida) {
		this.horaEntradaSaida = horaEntradaSaida;
	}

	public ComboBox getTipoOperacao() {
		return tipoOperacao;
	}

	public void setTipoOperacao(ComboBox tipoOperacao) {
		this.tipoOperacao = tipoOperacao;
	}

	public void preencheCupomSubForm(List<CupomFiscalReferenciadoEntity> cupons) {
		cuponsSubForm.fillWith(cupons);
	}

	public void preencherNotasSubForm(List<NotaReferenciada> notas) {
		notasSubForm.fillWith(notas);
	}

	public void preencherDuplicatasSubForm(List<NfeDuplicata> duplicatas) {
		duplicataSubForm.fillWith(duplicatas);
	}

	public static class MyReceiver implements Receiver {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		private String fileName;
		private String mtype;
		private boolean sleep;
		private int total = 0;

		public OutputStream receiveUpload(String filename, String mimetype) {
			File f = null;
			JAXBContext context;

			try {
				f = File.createTempFile(filename, "xml");
				context = JAXBContext.newInstance(TNfeProc.class);
				Unmarshaller unmarshaller = context.createUnmarshaller();
				TNfeProc nfe = (TNfeProc) unmarshaller.unmarshal(f);
				Ide identificacao = nfe.getNFe().getInfNFe().getIde();
			} catch (JAXBException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			return null;

		}

		public String getFileName() {
			return fileName;
		}

		public String getMimeType() {
			return mtype;
		}

		public void setSlow(boolean value) {
			sleep = value;
		}

	}

	public void carregarCRT() {
		this.crt.removeAllItems();
		this.crt.addItem(CRT.SIMPLES_NACIONAL);
		this.crt.addItem(CRT.SIMPLES_EXCESSO);
		this.crt.addItem(CRT.REGIME_NORMAL);
	}

	public enum CRT {

		SIMPLES_NACIONAL("Simples Nacional", "1"), SIMPLES_EXCESSO(
				"Simples Nacional - excesso de sublimite de receita bruta", "2"), REGIME_NORMAL(
				"Regime Normal. (v2.0)", "3");

		private CRT(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static CRT getCRT(String codigo) {
			if (codigo.equals("1")) {
				return SIMPLES_NACIONAL;
			} else if (codigo.equals("2")) {
				return SIMPLES_EXCESSO;
			} else if (codigo.equals("3")) {
				return REGIME_NORMAL;
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}

	}

	public enum FORMA_PAGAMENTO {

		VISTA("A vista", "0"), PRAZO("A prazo", "1"), OUTROS("Outros", "2");

		private FORMA_PAGAMENTO(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static FORMA_PAGAMENTO getFormaPagamento(String codigo) {
			if (codigo.equals("0")) {
				return VISTA;
			} else if (codigo.equals("1")) {
				return PRAZO;
			} else if (codigo.equals("2")) {
				return OUTROS;
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}

	}

	public void carregarFormaPagamento() {
		this.formaPagamento.removeAllItems();
		this.formaPagamento.addItem(FORMA_PAGAMENTO.VISTA);
		this.formaPagamento.addItem(FORMA_PAGAMENTO.PRAZO);
		this.formaPagamento.addItem(FORMA_PAGAMENTO.OUTROS);
	}

	public enum FORMA_EMISSAO {

		NORMAL("Normal", "1"), CONTINGENCIA_FS("Contingência FS", "2"), CONTINGENCIA_SCAN(
				"Contingência SCAN", "3"), CONTINGENCIA_DPEC(
				"Contingência DPEC", "4"), CONTINGENCIA_FSDA(
				"Contingência FSDA", "5"), CONTINGENCIA__SVC_AN(
				"Contingência SVC - AN", "6"), CONTINGENCIA_SVC_RS(
				"Contingência SVC - RS", "7");

		private FORMA_EMISSAO(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static FORMA_EMISSAO getFormaEmissao(String codigo) {
			if (codigo.equals("1")) {
				return NORMAL;
			}

			if (codigo.equals("2")) {
				return CONTINGENCIA_FS;
			}

			if (codigo.equals("3")) {
				return CONTINGENCIA_SCAN;
			}

			if (codigo.equals("4")) {
				return CONTINGENCIA_DPEC;
			}

			if (codigo.equals("5")) {
				return CONTINGENCIA_FSDA;
			}

			if (codigo.equals("6")) {
				return CONTINGENCIA__SVC_AN;
			}

			if (codigo.equals("7")) {
				return CONTINGENCIA_SVC_RS;
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}

	}

	public void carregarFormaEmissao() {
		this.formaEmissao.removeAllItems();
		this.formaEmissao.addItem(FORMA_EMISSAO.NORMAL);
		this.formaEmissao.addItem(FORMA_EMISSAO.CONTINGENCIA_FS);
		this.formaEmissao.addItem(FORMA_EMISSAO.CONTINGENCIA_SCAN);
		this.formaEmissao.addItem(FORMA_EMISSAO.CONTINGENCIA_DPEC);
		this.formaEmissao.addItem(FORMA_EMISSAO.CONTINGENCIA_FSDA);
		this.formaEmissao.addItem(FORMA_EMISSAO.CONTINGENCIA__SVC_AN);
		this.formaEmissao.addItem(FORMA_EMISSAO.CONTINGENCIA_SVC_RS);
	}

	public enum TIPO_DANFE {

		RETRATO("Retrato", "1"), PAISAGEM("Paisagem", "2");

		private TIPO_DANFE(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TIPO_DANFE getTipoDanfe(String codigo) {
			if (codigo.equals("1")) {
				return RETRATO;
			}

			if (codigo.equals("2")) {
				return PAISAGEM;
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}

	}

	public void carregarTipoDANFE() {
		this.tipoDanfe.removeAllItems();
		this.tipoDanfe.addItem(TIPO_DANFE.RETRATO);
		this.tipoDanfe.addItem(TIPO_DANFE.PAISAGEM);
	}

	public enum FINALIDADE_EMISSAO {

		NORMAL("NFe normal", "1"), COMPLEMENTAR("NFe complementar", "2"), AJUSTE(
				"NFe de ajuste", "3");

		private FINALIDADE_EMISSAO(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static FINALIDADE_EMISSAO getFinalidadeEmissao(String codigo) {
			if (codigo.equals("1")) {
				return NORMAL;
			}

			if (codigo.equals("2")) {
				return COMPLEMENTAR;
			}

			if (codigo.equals("3")) {
				return AJUSTE;
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}

	}

	public void carregarFinalidadeEmissao() {
		this.finalidadeEmissao.removeAllItems();
		this.finalidadeEmissao.addItem(FINALIDADE_EMISSAO.NORMAL);
		this.finalidadeEmissao.addItem(FINALIDADE_EMISSAO.COMPLEMENTAR);
		this.finalidadeEmissao.addItem(FINALIDADE_EMISSAO.AJUSTE);
	}

	public enum TIPO_OPERACAO {

		ENTRADA("Entrada", "0"), SAIDA("Saida", "1");

		private TIPO_OPERACAO(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static TIPO_OPERACAO getTipoOperacao(String codigo) {
			if (codigo.equals("0")) {
				return ENTRADA;
			}

			if (codigo.equals("1")) {
				return SAIDA;
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}

	}

	public void carregarTipoOperacao() {
		this.tipoOperacao.removeAllItems();
		this.tipoOperacao.addItem(TIPO_OPERACAO.ENTRADA);
		this.tipoOperacao.addItem(TIPO_OPERACAO.SAIDA);
	}

	public void carregarView(NotaFiscal currentBean) {
		tipoOperacao.setValue(TIPO_OPERACAO.getTipoOperacao(currentBean
				.getTipoOperacao()));
		formaPagamento.setValue(FORMA_PAGAMENTO.getFormaPagamento(currentBean
				.getFormaPagamento()));
		formaEmissao.setValue(FORMA_EMISSAO.getFormaEmissao(currentBean
				.getFormaEmissao()));
		finalidadeEmissao.setValue(FINALIDADE_EMISSAO
				.getFinalidadeEmissao(currentBean.getFinalidadeEmissao()));
		tipoDanfe.setValue(TIPO_DANFE.getTipoDanfe(currentBean
				.getTipoImpressaoDanfe()));
	}

	public void carregarViewCRT(NotaFiscalEmitente emitente) {
		crt.setValue(CRT.getCRT(emitente.getCrt()));
	}

	public Date converteData(String dataStr) {
		Date data = null;
		String novaData = null;
		SimpleDateFormat sdf = null;

		try {
			final String FORMATO_XML = "yyyy-MM-dd";
			final String FORMATO_APLICACAO = "dd-MM-yy";

			sdf = new SimpleDateFormat(FORMATO_XML);
			Date d = sdf.parse(dataStr);
			sdf.applyPattern(FORMATO_APLICACAO);
			novaData = sdf.format(d);
			data = sdf.parse(novaData);
		} catch (ParseException e) {
			e.printStackTrace();
		}

		return data;
	}

	public TabSheet getSubForms() {
		return subForms;
	}

	public void setSubForms(TabSheet subForms) {
		this.subForms = subForms;
	}

	public TabSheet getDadosNfe() {
		return dadosNfe;
	}

	public void setDadosNfe(TabSheet dadosNfe) {
		this.dadosNfe = dadosNfe;
	}

	public SubFormComponent<NfeDuplicata, Integer> getDuplicataSubForm() {
		return duplicataSubForm;
	}

	public void setDuplicataSubForm(
			SubFormComponent<NfeDuplicata, Integer> duplicataSubForm) {
		this.duplicataSubForm = duplicataSubForm;
	}

	public SubFormComponent<ProdutoEntity, Integer> getProdutoSubForm() {
		return produtoSubForm;
	}

	public void setProdutoSubForm(
			SubFormComponent<ProdutoEntity, Integer> produtoSubForm) {
		this.produtoSubForm = produtoSubForm;
	}

	public SubFormComponent<LoteProdutoEntity, Integer> getLoteProdutoSubForm() {
		return loteProdutoSubForm;
	}

	public void setLoteProdutoSubForm(
			SubFormComponent<LoteProdutoEntity, Integer> loteProdutoSubForm) {
		this.loteProdutoSubForm = loteProdutoSubForm;
	}

	public SubFormComponent<CupomFiscalReferenciadoEntity, Integer> getCuponsSubForm() {
		return cuponsSubForm;
	}

	public void setCuponsSubForm(
			SubFormComponent<CupomFiscalReferenciadoEntity, Integer> cuponsSubForm) {
		this.cuponsSubForm = cuponsSubForm;
	}

	public SubFormComponent<NotaReferenciada, Integer> getNotasSubForm() {
		return notasSubForm;
	}

	public void setNotasSubForm(
			SubFormComponent<NotaReferenciada, Integer> notasSubForm) {
		this.notasSubForm = notasSubForm;
	}
	
}