package dc.visao.suprimento.estoque;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.estoque.FormacaoPrecoFormController;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.entidade.suprimentos.estoque.FormacaoPrecoEntity;
import dc.servicos.dao.geral.produto.ProdutoDAO;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class FormacaoPrecoFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	private SubFormComponent<FormacaoPrecoEntity, Integer> subForm;
	
	@AutoGenerated
	private TabSheet tsGeral;
	@AutoGenerated
	private VerticalLayout vlProduto;
	@AutoGenerated
	private Panel plProduto;

	@Autowired
	ProdutoDAO produtoDAO;
	
	FormacaoPrecoFormController controller;

	public FormacaoPrecoFormView(FormacaoPrecoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		tsGeral = new TabSheet();
		tsGeral.setImmediate(true);
		tsGeral.setSizeFull();

		tsGeral.addTab(bvlProduto(), 0);

		mainLayout.addComponent(tsGeral);
		mainLayout.setExpandRatio(tsGeral, 1);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout bvlProduto() {
		// common part: create layout
		vlProduto = new VerticalLayout();
		vlProduto.setImmediate(false);
		vlProduto.setWidth("100.0%");
		vlProduto.setHeight("100.0%");
		vlProduto.setMargin(true);
		vlProduto.setSpacing(true);
		vlProduto.setCaption("Formacao Pre√ßo");

		//
		vlProduto.addComponent(bplProduto());

		return vlProduto;
	}

	@AutoGenerated
	private Panel bplProduto() {
		// common part: create layout
		plProduto = new Panel();
		plProduto.setImmediate(false);
		plProduto.setSizeFull();

		plProduto.setContent(buildProdutoSubForm());

		return plProduto;
	}

	@AutoGenerated
	private SubFormComponent<FormacaoPrecoEntity, Integer> buildProdutoSubForm() {
		subForm = new SubFormComponent<FormacaoPrecoEntity, Integer>(
				FormacaoPrecoEntity.class, 
				new String[] { "produto","valorCompra", "encargoVenda","markup","valorVenda"  }, 
				new String[] {"Produto", "Valor Compra", "Encargo sobre a Venda","Markup","Valor Venda" }) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {


						if ("produto".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> PRODUTO = new BeanItemContainer<>(ProdutoEntity.class,
									controller.buscarProdutos());
							PRODUTO.addNestedContainerProperty("nome");
							comboBox.setContainerDataSource(PRODUTO);
							comboBox.setItemCaptionPropertyId("nome");
							//comboBox.addValueChangeListener(new ValueChangeListener() {

						/**
						 * 
						 */
						/*private static final long serialVersionUID = 1L;

						private ProdutoEntity oldValue;
						TextField tfValorCompra = ComponentUtil.buildCurrencyField(null);

						@Override
						public void valueChange(ValueChangeEvent event) {
							ProdutoEntity fornCotacao = (ProdutoEntity) comboBox
									.getValue();

							if (oldValue != null) {
								oldValue.setValorCompra((BigDecimal) tfValorCompra.getConvertedValue());
							}

							if (fornCotacao != null) {
								preencherDetalhesSubForm(fornCotacao.getFormacao());
								tfValorCompra.setConvertedValue(fornCotacao.getValorCompra());
							} else {
								tfValorCompra.setValue(null);
							}

							oldValue = fornCotacao;
						}
					});*/
							
							return comboBox;
							
						
						} 
						if ("valorCompra".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							//textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}

						if ("encargoVenda".equals(propertyId)) {
							TextField textField = ComponentUtil.buildPercentageField(null);
							return textField;
						}
						
						if ("markup".equals(propertyId)) {
							TextField textField = ComponentUtil.buildPercentageField(null);
							return textField;
						}
						
						if ("valorVenda".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							//controller.calculaPrecoVenda();
							//textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}
						return null;
					}

					/*private BlurListener getBlurListener(
							final Container container, final Object itemId,
							final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<ProdutoEntity> produtoProperty = get("produto");
								ProdutoEntity produto = produtoProperty.getValue();
								
								FormacaoPrecoEntity formacaoPreco = null;
						        
								Property<BigDecimal> valorCompra = getBigDecimal("valorCompra");
								Property<BigDecimal> encargo = getBigDecimal("encargoVenda");
								Property<BigDecimal> markup = getBigDecimal("markup");
								
								Property<BigDecimal> valorVenda = getBigDecimal("valorVenda");
								
								if (valorCompra != null&& encargo != null&& markup != null) {
									
									//valorCompra.setValue(formacaoPreco.getProduto().getValorCompra());
						            //markup.setValue(formacaoPreco.getMarkup().divide(BigDecimal.valueOf(100), RoundingMode.DOWN));
						            //encargo.setValue(formacaoPreco.getEncargoVenda().divide(BigDecimal.valueOf(100), RoundingMode.DOWN));

						            valorVenda.setValue(formacaoPreco.getProduto().getValorCompra()
						            		.multiply(BigDecimal.ONE.add(formacaoPreco.getMarkup().divide(BigDecimal.valueOf(100), RoundingMode.DOWN)))
						            		.divide(BigDecimal.ONE.subtract(formacaoPreco.getEncargoVenda().divide(BigDecimal.valueOf(100), RoundingMode.DOWN)), RoundingMode.DOWN));
						            		//valorCompra.multiply(BigDecimal.ZERO.add(markup).divide(BigDecimal.ZERO.subtract(encargo), RoundingMode.DOWN));

								}

							}

							@SuppressWarnings("unchecked")
							private Property<ProdutoEntity> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> getBigDecimal(
									String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}*/
				};

			}

			protected FormacaoPrecoEntity getNovo() {
				FormacaoPrecoEntity detalhe = controller.novoDetalhe();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<FormacaoPrecoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}
		};

		return subForm;
	}

	public void preencherDetalhesSubForm(List<FormacaoPrecoEntity> detalhes) {
		subForm.fillWith(detalhes);
	}

	public SubFormComponent<FormacaoPrecoEntity, Integer> getSubForm() {
		return subForm;
	}

	public void setSubForm(SubFormComponent<FormacaoPrecoEntity, Integer> subForm) {
		this.subForm = subForm;
	}
	
}
