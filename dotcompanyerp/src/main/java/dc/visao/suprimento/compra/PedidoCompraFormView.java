package dc.visao.suprimento.compra;

import java.math.BigDecimal;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.compra.PedidoCompraFormController;
import dc.entidade.geral.pessoal.FornecedorEntity;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.entidade.suprimentos.compra.PedidoDetalheEntity;
import dc.entidade.suprimentos.compra.PedidoEntity;
import dc.entidade.suprimentos.compra.TipoPedidoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.geral.MainController;
import dc.visao.framework.util.ComponentUtil;

public class PedidoCompraFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Autowired
	private MainController mainController;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet subForms;
	@AutoGenerated
	private TabSheet produtos;
	@AutoGenerated
	private TabSheet fornecedores;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private GridLayout topFields;
	@AutoGenerated
	private OptionGroup optFormaPagto;
	@AutoGenerated
	private OptionGroup optTipoFrete;
	@AutoGenerated
	private Label lblId;
	@AutoGenerated
	private TextField txtTotalPedido;
	@AutoGenerated
	private TextField txtValorDesconto;
	@AutoGenerated
	private TextField txtTaxaDesconto;
	@AutoGenerated
	private TextField txtValorSubTotal;
	@AutoGenerated
	private TextField txtLocalCobranca;
	@AutoGenerated
	private TextField txtLocalEntrega;
	@AutoGenerated
	private TextField txtContato;
	@AutoGenerated
	private PopupDateField calDataPagamento;
	@AutoGenerated
	private PopupDateField calDataEntrega;
	@AutoGenerated
	private PopupDateField calDataPedido;
	
	@AutoGenerated
	private ComboBox cmbFornecedor;
	@AutoGenerated
	private ManyToOneComboField<TipoPedidoEntity> cmbTipoPedido;
	
	@AutoGenerated
	private TextField txtBaseCalculoIcms, txtValorIcms, txtBaseCalculoIcmsSt, txtValorIcmsSt, txtTotalProdutos, txtFrete, txtOutrasDespesas, txtSeguro, txtValorIpi,
	               txtValorTotalNf, txtQuantidadeParcelas;
	
	@AutoGenerated
	private TextField pdPrimeiroVencimento;

	private PedidoCompraFormController controller;

	private SubFormComponent<PedidoDetalheEntity, Integer> pedidoDetalheSubForm;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * @param controller
	 */
	public PedidoCompraFormView(PedidoCompraFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		topFields = new GridLayout(6, 1);
		topFields.setImmediate(false);
		topFields.setWidth("100.0%");
		topFields.setSpacing(true);

		// cmbTipoPedido
		cmbTipoPedido = new ManyToOneComboField<>(TipoPedidoEntity.class);
		cmbTipoPedido.setCaption("Tipo Pedido de Compra");
		topFields.addComponent(cmbTipoPedido, 0, 0);

		// cmbFornecedor
		cmbFornecedor = ComponentUtil.buildComboBox("Fornecedor");
		topFields.addComponent(cmbFornecedor, 1, 0, 4, 0);

		// calDataPedido
		calDataPedido = new PopupDateField();
		calDataPedido.setCaption("Data Pedido Compra");
		calDataPedido.setImmediate(false);
		calDataPedido.setWidth("-1px");
		calDataPedido.setHeight("-1px");
		topFields.addComponent(calDataPedido, 5, 0);

		mainLayout.addComponent(topFields);
		mainLayout.setExpandRatio(topFields, 1);

		// fields
		buildFields();

		// subForms
		subForms = buildSubForms();
		mainLayout.addComponent(subForms);

		subForms.setHeight("100%");
		mainLayout.setExpandRatio(subForms, 10);

		return mainLayout;
	}

	@AutoGenerated
	private void buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 6);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		// fields.setHeight("100.0%");
		fields.setMargin(true);
		fields.setSpacing(true);

		// calDataEntrega
		calDataEntrega = new PopupDateField();
		calDataEntrega.setCaption("Data Entrega");
		calDataEntrega.setImmediate(false);
		calDataEntrega.setWidth("-1px");
		calDataEntrega.setHeight("-1px");
		fields.addComponent(calDataEntrega, 0, 0);

		// calDataPagamento
		calDataPagamento = new PopupDateField();
		calDataPagamento.setCaption("Data Pagamento");
		calDataPagamento.setImmediate(false);
		calDataPagamento.setWidth("-1px");
		calDataPagamento.setHeight("-1px");
		fields.addComponent(calDataPagamento, 1, 0);

		// txtContato
		txtContato = ComponentUtil.buildTextField("Contato");
		fields.addComponent(txtContato, 2, 0, 5, 0);

		// txtLocalEntrega
		txtLocalEntrega = ComponentUtil.buildTextField("Local Entrega");
		fields.addComponent(txtLocalEntrega, 0, 1, 2, 1);

		// txtLocalCobranca
		txtLocalCobranca = ComponentUtil.buildTextField("Local Cobrança");
		fields.addComponent(txtLocalCobranca, 3, 1, 5, 1);

		// txtValorSubTotal
		txtValorSubTotal = ComponentUtil.buildCurrencysField("Valor SubTotal");
		fields.addComponent(txtValorSubTotal, 0, 2);

		// txtTaxaDesconto
		txtTaxaDesconto = ComponentUtil.buildPercentageField("Taxa Desconto");
		fields.addComponent(txtTaxaDesconto, 1, 2);

		// txtValorDesconto
		txtValorDesconto = ComponentUtil.buildCurrencysField("Valor Desconto");
		fields.addComponent(txtValorDesconto, 2, 2);

		// txtTotalPedido
		txtTotalPedido = ComponentUtil.buildCurrencysField("Valor Total Pedido");
		fields.addComponent(txtTotalPedido, 3, 2);

		// optTipoFrete
		optTipoFrete = new OptionGroup();
		optTipoFrete.setStyleName("horizontal");
		optTipoFrete.setCaption("Tipo Frete");
		optTipoFrete.setImmediate(false);
		optTipoFrete.setWidth("-1px");
		optTipoFrete.setHeight("-1px");
		optTipoFrete.addItem("C");
		optTipoFrete.setItemCaption("C", "CIF");
		optTipoFrete.addItem("F");
		optTipoFrete.setItemCaption("F", "FOB");

		fields.addComponent(optTipoFrete, 0, 3, 2, 3);

		// optFormaPagto
		optFormaPagto = new OptionGroup();
		optFormaPagto.setStyleName("horizontal");
		optFormaPagto.setCaption("Forma Pagto");
		optFormaPagto.setImmediate(false);
		optFormaPagto.setWidth("-1px");
		optFormaPagto.setHeight("-1px");
		optFormaPagto.addItem("0");
		optFormaPagto.setItemCaption("0", "À Vista");
		optFormaPagto.addItem("1");
		optFormaPagto.setItemCaption("1", "À Prazo");
		optFormaPagto.addItem("2");
		optFormaPagto.setItemCaption("2", "Outros");

		fields.addComponent(optFormaPagto, 3, 3, 5, 3);
		
		txtBaseCalculoIcms = ComponentUtil.buildCurrencysField("Base Cálculo ICMS");
		fields.addComponent(txtBaseCalculoIcms, 0,4);
		
		txtValorIcms = ComponentUtil.buildCurrencysField("Valor ICMS");
		fields.addComponent(txtValorIcms, 1,4);
		
		txtBaseCalculoIcmsSt = ComponentUtil.buildCurrencysField("Base Cálculo ICMS St");
		fields.addComponent(txtBaseCalculoIcmsSt, 2,4);
		
		txtValorIcmsSt = ComponentUtil.buildCurrencysField("Valor ICMS St");
		fields.addComponent(txtValorIcmsSt, 3,4);
		
		txtTotalProdutos = ComponentUtil.buildCurrencysField("Total Produtos");
		fields.addComponent(txtTotalProdutos, 4,4);
		
		txtFrete = ComponentUtil.buildCurrencysField("Valor Frete");
		fields.addComponent(txtFrete, 5,4);
		
		txtOutrasDespesas = ComponentUtil.buildCurrencysField("Outras Despesas");
		fields.addComponent(txtOutrasDespesas,0,5);
		
		txtSeguro = ComponentUtil.buildCurrencysField("Seguro");
		fields.addComponent(txtSeguro, 1,5);
		
		txtValorIpi = ComponentUtil.buildCurrencysField("Valor IPI");
		fields.addComponent(txtValorIpi, 2,5);
		
		txtValorTotalNf = ComponentUtil.buildCurrencysField("Valor Total NF");
		fields.addComponent(txtValorTotalNf, 3,5);
		
		txtQuantidadeParcelas = ComponentUtil.buildTextField("Quatidade Parcelas");
		fields.addComponent(txtQuantidadeParcelas, 4,5);
		
		pdPrimeiroVencimento = ComponentUtil.buildTextField("Primeiro Vencimento");
		fields.addComponent(pdPrimeiroVencimento, 5,5);
		
	}

	@AutoGenerated
	private TabSheet buildSubForms() {
		// common part: create layout
		subForms = new TabSheet();
		subForms.setImmediate(true);

		subForms.addTab(fields, "Detalhes", null);
		subForms.addTab(buildSubFormProdutos(),"Produtos", null);
		
		return subForms;
		
	}
		
		private SubFormComponent<PedidoDetalheEntity, Integer> buildSubFormProdutos() {
				
				String[] atributos = new String[] { "produto","quantidade", "valorUnitario", "valorSubtotal", "valorDesconto", "valorTotal" };
				String [] headers = new String[] {"Produto", "Quantidade", "Valor Unitário","Valor SubTotal", "Valor Desconto", "Valor Total" };
				String [] headers1 = new String[] { "valorSubtotal", "valorDesconto", "valorTotal" };

				this.pedidoDetalheSubForm = new SubFormComponent<PedidoDetalheEntity, Integer>(
						PedidoDetalheEntity.class, atributos, headers,headers1) {

					private static final long serialVersionUID = 1L;

					@Override
					protected TableFieldFactory getFieldFactory() {
						return new TableFieldFactory() {

							/**
							 * 
							 */
							private static final long serialVersionUID = 1L;

							@Override
							public Field<?> createField(Container container,
									Object itemId, Object propertyId,
									Component uiContext) {

		/*pedidoDetalheSubForm = new SubFormComponent<PedidoDetalheEntity, Integer>(
				PedidoDetalheEntity.class, new String[] { "produto",
						"quantidade", "valorUnitario", "valorSubtotal",
						"valorDesconto", "valorTotal" }, new String[] {
						"Produto", "Quantidade", "Valor Unitário",
						"Valor SubTotal", "Valor Desconto", "Valor Total" },
				new String[] { "valorSubtotal", "valorDesconto", "valorTotal" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {*/
						if ("produto".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil
									.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(
									ProdutoEntity.class,
									controller.buscarProdutos());
							produtoContainer.addNestedContainerProperty("nome");
							comboBox.setContainerDataSource(produtoContainer);
							comboBox.setItemCaptionPropertyId("nome");
							return comboBox;
						} else if ("quantidade".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);
							textField.addBlurListener(getBlurListener(
									container, itemId, propertyId));
							return textField;
						} else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencysField(null);
							textField.addBlurListener(getBlurListener(
									container, itemId, propertyId));
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencysField(null);
							textField.addBlurListener(getBlurListener(
									container, itemId, propertyId));
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}
						return null;
					}

					private BlurListener getBlurListener(
							final Container container, final Object itemId,
							final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidade");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<BigDecimal> valorSubtotal = get("valorSubtotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");

								if (quantidade.getValue() != null
										&& valorUnitario.getValue() != null) {
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitario.getValue();
									valorSubtotal.setValue(q.multiply(vu));
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}
									valorTotal.setValue(vs.subtract(vd));
								}

							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
				};
			}

			@Override
			protected PedidoDetalheEntity getNovo() {
				PedidoDetalheEntity pedidoDetalhe = controller
						.novoPedidoDetalhe();
				return pedidoDetalhe;
			}

			@Override
			protected void getRemoverSelecionados(
					List<PedidoDetalheEntity> values) {
				controller.removerPedidoDetalhe(values);
			}

			@Override
			public boolean validateItems(List<PedidoDetalheEntity> items) {
				for (PedidoDetalheEntity pedidoDetalhe : items) {
					if (pedidoDetalhe.getProduto() == null
							|| pedidoDetalhe.getQuantidade() == null) {
						return false;
					}
				}
				return true;
			}
		};

		//subForms.addTab(pedidoDetalheSubForm, "Produtos", null);

		return this.pedidoDetalheSubForm;
	}

	public TabSheet getProdutos() {
		return produtos;
	}

	public OptionGroup getOptFormaPagto() {
		return optFormaPagto;
	}

	public OptionGroup getOptTipoFrete() {
		return optTipoFrete;
	}

	public TextField getTxtTotalPedido() {
		return txtTotalPedido;
	}

	public TextField getTxtValorDesconto() {
		return txtValorDesconto;
	}

	public TextField getTxtTaxaDesconto() {
		return txtTaxaDesconto;
	}

	public TextField getTxtValorSubTotal() {
		return txtValorSubTotal;
	}

	public TextField getTxtLocalCobranca() {
		return txtLocalCobranca;
	}

	public TextField getTxtLocalEntrega() {
		return txtLocalEntrega;
	}

	public TextField getTxtContato() {
		return txtContato;
	}

	public PopupDateField getCalDataPagamento() {
		return calDataPagamento;
	}

	public PopupDateField getCalDataEntrega() {
		return calDataEntrega;
	}

	public PopupDateField getCalDataPedido() {
		return calDataPedido;
	}

	public ComboBox getCmbFornecedor() {
		return cmbFornecedor;
	}

	public ManyToOneComboField<TipoPedidoEntity> getCmbTipoPedido() {
		return cmbTipoPedido;
	}
	
	public void preencheSubForm(List<PedidoDetalheEntity> detalhes) {
		pedidoDetalheSubForm.fillWith(detalhes);
	}
	
	public void preencheForm(PedidoEntity currentBean) {
		cmbFornecedor.setValue(currentBean.getFornecedor());
		calDataPedido.setValue(currentBean.getDataPedido());
		cmbTipoPedido.setValue(currentBean.getTipoPedido());
		calDataEntrega.setValue(currentBean.getDataPrevistaEntrega());
		calDataPagamento.setValue(currentBean.getDataPrevisaoPagamento());
		//pdPrimeiroVencimento.setConvertedValue(currentBean.getDiasPrimeiroVencimento());
		//txtQuantidadeParcelas.setConvertedValue(currentBean.getQuantidadeParcela());
		
		txtContato.setValue(currentBean.getContato());
		txtLocalCobranca.setValue(currentBean.getLocalCobranca());
		txtLocalEntrega.setValue(currentBean.getLocalEntrega());
		optTipoFrete.setValue(currentBean.getTipoFrete());
		optFormaPagto.setValue(currentBean.getFormaPagamento());
		
	    txtTotalPedido.setConvertedValue(currentBean.getValorTotalPedido());
		txtValorSubTotal.setConvertedValue(currentBean.getValorSubtotal());
		txtValorDesconto.setConvertedValue(currentBean.getValorDesconto());
		txtTaxaDesconto.setConvertedValue(currentBean.getTaxaDesconto());
		txtBaseCalculoIcms.setConvertedValue(currentBean.getBaseCalculoIcms());
		txtBaseCalculoIcmsSt.setConvertedValue(currentBean.getBaseCalculoIcmsSt());
		txtValorIcms.setConvertedValue(currentBean.getValorIcms());
		txtValorIcmsSt.setConvertedValue(currentBean.getValorIcmsSt());
		txtTotalProdutos.setConvertedValue(currentBean.getValorTotalProduto());
		txtFrete.setConvertedValue(currentBean.getValorFrete());
		txtOutrasDespesas.setConvertedValue(currentBean.getValorOutraDespesa());
		txtSeguro.setConvertedValue(currentBean.getValorSeguro());
		txtValorIpi.setConvertedValue(currentBean.getValorIpi());
		txtValorTotalNf.setConvertedValue(currentBean.getValorTotalNf());

		pedidoDetalheSubForm.fillWith(currentBean.getPedidoDetalhe());
	}
	
	public void preencheBean(PedidoEntity currentBean) {
		currentBean.setFornecedor((FornecedorEntity) cmbFornecedor.getValue());
		currentBean.setDataPedido(calDataPedido.getValue());
		currentBean.setTipoPedido((TipoPedidoEntity) cmbTipoPedido.getValue());
		currentBean.setDataPrevistaEntrega(calDataEntrega.getValue());
		currentBean.setDataPrevisaoPagamento(calDataPagamento.getValue());
		//currentBean.setDiasPrimeiroVencimento((Integer) pdPrimeiroVencimento.getConvertedValue());
		//currentBean.setQuantidadeParcela((Integer) txtQuantidadeParcelas.getConvertedValue());
		
		currentBean.setContato(txtContato.getValue());
		currentBean.setLocalCobranca(txtLocalCobranca.getValue());
		currentBean.setLocalEntrega(txtLocalEntrega.getValue());
		
		currentBean.setValorTotalPedido((BigDecimal) txtTotalPedido.getConvertedValue());
		currentBean.setValorSubtotal((BigDecimal) txtValorSubTotal.getConvertedValue());
		currentBean.setValorDesconto((BigDecimal) txtValorDesconto.getConvertedValue());
		currentBean.setTaxaDesconto((BigDecimal) txtTaxaDesconto.getConvertedValue());
		currentBean.setBaseCalculoIcms((BigDecimal) txtBaseCalculoIcms.getConvertedValue());
		currentBean.setBaseCalculoIcmsSt((BigDecimal) txtBaseCalculoIcmsSt.getConvertedValue());
		currentBean.setValorIcms((BigDecimal) txtValorIcms.getConvertedValue());
		currentBean.setValorIcmsSt((BigDecimal) txtValorIcmsSt.getConvertedValue());
		currentBean.setValorTotalProduto((BigDecimal) txtTotalProdutos.getConvertedValue());
		currentBean.setValorFrete((BigDecimal) txtFrete.getConvertedValue());
		currentBean.setValorOutraDespesa((BigDecimal) txtOutrasDespesas.getConvertedValue());
		currentBean.setValorSeguro((BigDecimal) txtSeguro.getConvertedValue());
		currentBean.setValorIpi((BigDecimal) txtValorIpi.getConvertedValue());
		currentBean.setValorTotalNf((BigDecimal) txtValorTotalNf.getConvertedValue());
		
	}

	public void fillCmbFornecedor(List<FornecedorEntity> lista) {
		BeanItemContainer<FornecedorEntity> tipoRequisicaoContainer = new BeanItemContainer<>(
				FornecedorEntity.class, lista);
		tipoRequisicaoContainer.addNestedContainerProperty("pessoa.nome");
		cmbFornecedor.setContainerDataSource(tipoRequisicaoContainer);
		cmbFornecedor.setItemCaptionPropertyId("pessoa.nome");
	}

	public void fillPedidoDetalhesSubForm(
			List<PedidoDetalheEntity> pedidoDetalhes) {
		pedidoDetalheSubForm.fillWith(pedidoDetalhes);
	}

	public TabSheet getFornecedores() {
		return fornecedores;
	}

	public void setFornecedores(TabSheet fornecedores) {
		this.fornecedores = fornecedores;
	}

	public TextField getTxtBaseCalculoIcms() {
		return txtBaseCalculoIcms;
	}

	public void setTxtBaseCalculoIcms(TextField txtBaseCalculoIcms) {
		this.txtBaseCalculoIcms = txtBaseCalculoIcms;
	}

	public TextField getTxtValorIcms() {
		return txtValorIcms;
	}

	public void setTxtValorIcms(TextField txtValorIcms) {
		this.txtValorIcms = txtValorIcms;
	}

	public TextField getTxtBaseCalculoIcmsSt() {
		return txtBaseCalculoIcmsSt;
	}

	public void setTxtBaseCalculoIcmsSt(TextField txtBaseCalculoIcmsSt) {
		this.txtBaseCalculoIcmsSt = txtBaseCalculoIcmsSt;
	}

	public TextField getTxtValorIcmsSt() {
		return txtValorIcmsSt;
	}

	public void setTxtValorIcmsSt(TextField txtValorIcmsSt) {
		this.txtValorIcmsSt = txtValorIcmsSt;
	}

	public TextField getTxtTotalProdutos() {
		return txtTotalProdutos;
	}

	public void setTxtTotalProdutos(TextField txtTotalProdutos) {
		this.txtTotalProdutos = txtTotalProdutos;
	}

	public TextField getTxtFrete() {
		return txtFrete;
	}

	public void setTxtFrete(TextField txtFrete) {
		this.txtFrete = txtFrete;
	}

	public TextField getTxtOutrasDespesas() {
		return txtOutrasDespesas;
	}

	public void setTxtOutrasDespesas(TextField txtOutrasDespesas) {
		this.txtOutrasDespesas = txtOutrasDespesas;
	}

	public TextField getTxtSeguro() {
		return txtSeguro;
	}

	public void setTxtSeguro(TextField txtSeguro) {
		this.txtSeguro = txtSeguro;
	}

	public TextField getTxtValorIpi() {
		return txtValorIpi;
	}

	public void setTxtValorIpi(TextField txtValorIpi) {
		this.txtValorIpi = txtValorIpi;
	}

	public TextField getTxtValorTotalNf() {
		return txtValorTotalNf;
	}

	public void setTxtValorTotalNf(TextField txtValorTotalNf) {
		this.txtValorTotalNf = txtValorTotalNf;
	}

	public TextField getTxtQuantidadeParcelas() {
		return txtQuantidadeParcelas;
	}

	public void setTxtQuantidadeParcelas(TextField txtQuantidadeParcelas) {
		this.txtQuantidadeParcelas = txtQuantidadeParcelas;
	}

	public TextField getPdPrimeiroVencimento() {
		return pdPrimeiroVencimento;
	}

	public void setPdPrimeiroVencimento(TextField pdPrimeiroVencimento) {
		this.pdPrimeiroVencimento = pdPrimeiroVencimento;
	}

	public SubFormComponent<PedidoDetalheEntity, Integer> getPedidoDetalheSubForm() {
		return pedidoDetalheSubForm;
	}

	public void setPedidoDetalheSubForm(
			SubFormComponent<PedidoDetalheEntity, Integer> pedidoDetalheSubForm) {
		this.pedidoDetalheSubForm = pedidoDetalheSubForm;
	}

	public void setProdutos(TabSheet produtos) {
		this.produtos = produtos;
	}

	public void setOptFormaPagto(OptionGroup optFormaPagto) {
		this.optFormaPagto = optFormaPagto;
	}

	public void setOptTipoFrete(OptionGroup optTipoFrete) {
		this.optTipoFrete = optTipoFrete;
	}

	public void setTxtTotalPedido(TextField txtTotalPedido) {
		this.txtTotalPedido = txtTotalPedido;
	}

	public void setTxtValorDesconto(TextField txtValorDesconto) {
		this.txtValorDesconto = txtValorDesconto;
	}

	public void setTxtTaxaDesconto(TextField txtTaxaDesconto) {
		this.txtTaxaDesconto = txtTaxaDesconto;
	}

	public void setTxtValorSubTotal(TextField txtValorSubTotal) {
		this.txtValorSubTotal = txtValorSubTotal;
	}

	public void setTxtLocalCobranca(TextField txtLocalCobranca) {
		this.txtLocalCobranca = txtLocalCobranca;
	}

	public void setTxtLocalEntrega(TextField txtLocalEntrega) {
		this.txtLocalEntrega = txtLocalEntrega;
	}

	public void setTxtContato(TextField txtContato) {
		this.txtContato = txtContato;
	}

	public void setCalDataPagamento(PopupDateField calDataPagamento) {
		this.calDataPagamento = calDataPagamento;
	}

	public void setCalDataEntrega(PopupDateField calDataEntrega) {
		this.calDataEntrega = calDataEntrega;
	}

	public void setCalDataPedido(PopupDateField calDataPedido) {
		this.calDataPedido = calDataPedido;
	}

	public void setCmbFornecedor(ComboBox cmbFornecedor) {
		this.cmbFornecedor = cmbFornecedor;
	}

	public void setCmbTipoPedido(ManyToOneComboField<TipoPedidoEntity> cmbTipoPedido) {
		this.cmbTipoPedido = cmbTipoPedido;
	}
	
}