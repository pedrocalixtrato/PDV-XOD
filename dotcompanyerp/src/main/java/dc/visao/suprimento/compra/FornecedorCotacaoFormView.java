package dc.visao.suprimento.compra;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.compra.FornecedorCotacaoFormController;
import dc.entidade.suprimentos.compra.CotacaoCompraEntity;
import dc.entidade.suprimentos.compra.ReqCotacaoDetalheEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class FornecedorCotacaoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TabSheet subForms;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private Label lblId;
	@AutoGenerated
	private TextField txtDescricao;
	@AutoGenerated
	private ManyToOneComboField<CotacaoCompraEntity> cmbCotacaoCompra;
	@AutoGenerated
	private PopupDateField calDataCotacao;

	private FornecedorCotacaoFormController controller;
	private SubFormComponent<ReqCotacaoDetalheEntity, Integer> requisicaoDetalheSubForm;

	public FornecedorCotacaoFormView(FornecedorCotacaoFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// fields
		fields = buildFields();
		mainLayout.addComponent(fields);
		mainLayout.setExpandRatio(fields, 1);
		
		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(6, 5);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("100.0%");
		fields.setMargin(false);
		fields.setSpacing(true);

		// txtDescricao
		txtDescricao = ComponentUtil.buildTextField("Descrição");
		fields.addComponent(txtDescricao, 0, 0, 3, 0);

		// calDataCotacao
		calDataCotacao = new PopupDateField();
		calDataCotacao.setCaption("Data da cotação");
		calDataCotacao.setImmediate(false);
		fields.addComponent(calDataCotacao, 4, 0);
		
		cmbCotacaoCompra = new ManyToOneComboField<>(CotacaoCompraEntity.class);
		cmbCotacaoCompra.setCaption("Situação");
		fields.addComponent(cmbCotacaoCompra, 5,0 );

		buildSubForms();
		fields.addComponent(subForms, 0, 4, 5, 4);

		fields.setRowExpandRatio(4, 4);

		return fields;
	}

	public TextField getTxtDescricao() {
		return txtDescricao;
	}

	public PopupDateField getCalDataCotacao() {
		return calDataCotacao;
	}

	@AutoGenerated
	private void buildSubForms() {
		// common part: create layout
		subForms = new TabSheet();
		subForms.setSizeFull();
		subForms.setImmediate(true);

		requisicaoDetalheSubForm = new SubFormComponent<ReqCotacaoDetalheEntity, Integer>(
				ReqCotacaoDetalheEntity.class,
				new String[] { "requisicaoDetalhe", "quantidadeCotada" },
				new String[] { "Produto requisitado", "Quantidade a ser cotada" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("requisicaoDetalhe".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil
									.buildComboBox(null);
							comboBox.setItemCaptionPropertyId("produto.nome");
							return comboBox;
						} else if ("quantidadeCotada".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);
							return textField;
						}
						return null;
					}
				};
			}

			@Override
			public boolean validateItems(List<ReqCotacaoDetalheEntity> items) {
				for (ReqCotacaoDetalheEntity requisicaoCotacaoDetalhe : items) {
					if (requisicaoCotacaoDetalhe.getRequisicaoDetalhe() == null
							|| requisicaoCotacaoDetalhe.getQuantidadeCotada() == null) {
						return false;
					}
				}

				return true;
			}
		};

		subForms.addTab(requisicaoDetalheSubForm, "Produtos", null);
	}

	public void fillReqCotacaoDetalhesSubForm(
			List<ReqCotacaoDetalheEntity> requisicaoDetalhes) {
		requisicaoDetalheSubForm.fillWith(requisicaoDetalhes);
	}

	public Label getLblId() {
		return lblId;
	}
	
	public ManyToOneComboField<CotacaoCompraEntity> getCmbCotacaoCompra() {
		return cmbCotacaoCompra;
	}

	public void setCmbCotacaoCompra(
			ManyToOneComboField<CotacaoCompraEntity> cmbCotacaoCompra) {
		this.cmbCotacaoCompra = cmbCotacaoCompra;
	}

	public void setTxtDescricao(TextField txtDescricao) {
		this.txtDescricao = txtDescricao;
	}

	public void setCalDataCotacao(PopupDateField calDataCotacao) {
		this.calDataCotacao = calDataCotacao;
	}
	
}