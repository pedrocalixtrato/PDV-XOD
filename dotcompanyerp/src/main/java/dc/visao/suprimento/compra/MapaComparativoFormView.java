package dc.visao.suprimento.compra;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.compra.MapaComparativoFormController;
import dc.entidade.suprimentos.compra.CotacaoDetalheEntity;
import dc.entidade.suprimentos.compra.FornecedorCotacaoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class MapaComparativoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private TextField txtDescricao;
	@AutoGenerated
	private PopupDateField calDataCotacao;
	//@AutoGenerated
	//private ComboBox cmbFornecedor;
	
	@AutoGenerated
	private ManyToOneComboField<FornecedorCotacaoEntity> cmbFornecedor;
	@AutoGenerated
	private TextField txtPrazoEntrega;
	@AutoGenerated
	private TextField txtCondicaoPagamento;
	@AutoGenerated
	private TextField txtSubtotal;
	@AutoGenerated
	private TextField txtTaxaDesconto;
	@AutoGenerated
	private TextField txtValorDesconto;
	@AutoGenerated
	private TextField txtTotal;

	private SubFormComponent<CotacaoDetalheEntity, Integer> cotacaoDetalheSubForm;
	
	private MapaComparativoFormController controller;

	public MapaComparativoFormView(MapaComparativoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		setSizeFull();
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		// fields
		fields = buildFields();
		fields.setRowExpandRatio(1, .15f);
		fields.setRowExpandRatio(2, .15f);
		fields.setRowExpandRatio(3, .15f);
		fields.setRowExpandRatio(4, 1);
		mainLayout.addComponent(fields);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout();
		fields.setImmediate(false);
		fields.setSizeFull();
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setColumns(6);
		fields.setRows(5);

		// calDataCotacao
		calDataCotacao = new PopupDateField();
		calDataCotacao.setCaption("Data da cotação");
		calDataCotacao.setImmediate(false);
		fields.addComponent(calDataCotacao, 0, 0);

		// txtDescricao
		txtDescricao = ComponentUtil.buildTextField("Descrição");
		fields.addComponent(txtDescricao, 1, 0, 5, 0);

		cmbFornecedor = new ManyToOneComboField<>(FornecedorCotacaoEntity.class);
		cmbFornecedor.setCaption("Fornecedores");
		//cmbFornecedor.setInputPrompt("Selecione um fornecedor para ver os dados abaixo...");
		cmbFornecedor.addValueChangeListener(new ValueChangeListener() {

			private FornecedorCotacaoEntity oldValue;

			@Override
			public void valueChange(ValueChangeEvent event) {
				FornecedorCotacaoEntity fornCotacao = (FornecedorCotacaoEntity) cmbFornecedor
						.getValue();
				if (oldValue != null) {
					oldValue.setPrazoEntrega(txtPrazoEntrega.getValue());
					oldValue.setVendaCondicaoPagamento(txtCondicaoPagamento
							.getValue());
					oldValue.setValorSubtotal((BigDecimal) txtSubtotal
							.getConvertedValue());
					oldValue.setTaxaDesconto((BigDecimal) txtTaxaDesconto
							.getConvertedValue());
					oldValue.setValorDesconto((BigDecimal) txtValorDesconto
							.getConvertedValue());
					oldValue.setTotal((BigDecimal) txtTotal.getConvertedValue());
				}

				if (fornCotacao != null) {
					fillReqCotacaoDetalhesSubForm(fornCotacao
							.getCotacaoDetalheList());
					txtPrazoEntrega.setValue(fornCotacao.getPrazoEntrega());
					txtCondicaoPagamento.setValue(fornCotacao
							.getVendaCondicaoPagamento());
					txtSubtotal.setConvertedValue(fornCotacao
							.getValorSubtotal());
					txtTaxaDesconto.setConvertedValue(fornCotacao
							.getTaxaDesconto());
					txtValorDesconto.setConvertedValue(fornCotacao
							.getValorDesconto());
					txtTotal.setConvertedValue(fornCotacao.getTotal());
				} else {
					fillReqCotacaoDetalhesSubForm(new ArrayList<CotacaoDetalheEntity>(
							0));
					txtPrazoEntrega.setValue(null);
					txtCondicaoPagamento.setValue(null);
					txtSubtotal.setValue(null);
					txtTaxaDesconto.setValue(null);
					txtValorDesconto.setValue(null);
					txtTotal.setValue(null);
				}
				oldValue = fornCotacao;
			}
		});
		fields.addComponent(cmbFornecedor, 0, 1, 5, 1);

		txtPrazoEntrega = ComponentUtil.buildTextField("Prazo de Entrega");
		fields.addComponent(txtPrazoEntrega, 0, 2, 1, 2);

		txtCondicaoPagamento = ComponentUtil
				.buildTextField("condição de Pagamento");
		fields.addComponent(txtCondicaoPagamento, 2, 2, 3, 2);

		txtSubtotal = ComponentUtil.buildCurrencysField("Subtotal");
		fields.addComponent(txtSubtotal, 4, 2, 5, 2);

		txtTaxaDesconto = ComponentUtil
				.buildPercentageField("Taxa de Desconto");
		fields.addComponent(txtTaxaDesconto, 0, 3, 1, 3);

		txtValorDesconto = ComponentUtil
				.buildCurrencysField("Valor de Desconto");
		fields.addComponent(txtValorDesconto, 2, 3, 3, 3);

		txtTotal = ComponentUtil.buildCurrencysField("Total");
		fields.addComponent(txtTotal, 4, 3, 5, 3);

		cotacaoDetalheSubForm = new SubFormComponent<CotacaoDetalheEntity, Integer>(
				CotacaoDetalheEntity.class, new String[] { "produto.nome",
						"quantidade", "quantidadePedida", "valorUnitario",
						"valorSubtotal", "taxaDesconto", "valorDesconto",
						"valorTotal" }, new String[] { "Produto requisitado",
						"Quantidade", "Quantidade a ser pedida",
						"Valor Unitário", "Valor SubTotal", "Taxa Desconto",
						"Valor Desconto", "Valor Total" }, new String[] {
						"valorSubtotal", "valorDesconto", "valorTotal" }) {
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("quantidadePedida".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildNumberField(null);
							return textField;
						} else if ("quantidade".equals(propertyId)
								|| "produto.nome".equals(propertyId)
								|| "valorUnitario".equals(propertyId)
								|| "valorSubtotal".equals(propertyId)
								|| "valorDesconto".equals(propertyId)
								|| "valorTotal".equals(propertyId)
								|| "taxaDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							textField.setReadOnly(true);
							return textField;
						}
						return null;
					}
				};
			}

			@Override
			protected CotacaoDetalheEntity getNovo() {
				throw new UnsupportedOperationException(
						"Não é possível criar novo!");
			}

			@Override
			protected void getRemoverSelecionados(
					List<CotacaoDetalheEntity> values) {
				throw new UnsupportedOperationException(
						"Não é possível remover!");
			}

			@Override
			public boolean validateItems(List<CotacaoDetalheEntity> items) {
				return false;
			}
		};
		cotacaoDetalheSubForm.setReadOnly(true);
		fields.addComponent(cotacaoDetalheSubForm, 0, 4, 5, 4);

		return fields;
	}

	public TextField getTxtDescricao() {
		return txtDescricao;
	}

	public PopupDateField getCalDataCotacao() {
		return calDataCotacao;
	}

	public void fillReqCotacaoDetalhesSubForm(
			List<CotacaoDetalheEntity> requisicaoDetalhes) {
		cotacaoDetalheSubForm.fillWith(requisicaoDetalhes);
	}
	
	public void fillCompraFornecedorCotacoesSubForm(
						List<FornecedorCotacaoEntity> lista) {
					BeanItemContainer<FornecedorCotacaoEntity> tipoRequisicaoContainer = new BeanItemContainer<>(
							FornecedorCotacaoEntity.class, lista);
					tipoRequisicaoContainer
							.addNestedContainerProperty("fornecedor.pessoa.nome");
				//	cmbFornecedor.setContainerDataSource(tipoRequisicaoContainer);
				//cmbFornecedor.setItemCaptionPropertyId("fornecedor.pessoa.nome");
	}

	public ManyToOneComboField<FornecedorCotacaoEntity> getCmbFornecedor() {
		return cmbFornecedor;
	}

	public void setCmbFornecedor(
			ManyToOneComboField<FornecedorCotacaoEntity> cmbFornecedor) {
		this.cmbFornecedor = cmbFornecedor;
	}
	
}