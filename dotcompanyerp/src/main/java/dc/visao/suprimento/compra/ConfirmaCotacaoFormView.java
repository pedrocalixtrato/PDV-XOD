package dc.visao.suprimento.compra;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.suprimento.compra.ConfirmaCotacaoFormController;
import dc.entidade.suprimentos.compra.CotacaoDetalheEntity;
import dc.entidade.suprimentos.compra.FornecedorCotacaoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class ConfirmaCotacaoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private GridLayout fields;

	@AutoGenerated
	private TextField tfDescricao;

	@AutoGenerated
	private PopupDateField pdfDataCotacao;

	@AutoGenerated
	private ManyToOneComboField<FornecedorCotacaoEntity> cbFornecedor;

	@AutoGenerated
	private TextField tfPrazoEntrega;

	@AutoGenerated
	private TextField tfCondicaoPagamento;

	@AutoGenerated
	private TextField tfSubtotal;

	@AutoGenerated
	private TextField tfTaxaDesconto;

	@AutoGenerated
	private TextField tfValorDesconto;

	@AutoGenerated
	private TextField tfTotal;

	private SubFormComponent<CotacaoDetalheEntity, Integer> sbCotacaoDetalhe;
	
	private ConfirmaCotacaoFormController controller;

	public ConfirmaCotacaoFormView(ConfirmaCotacaoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.controller = controller;
	}

	public TextField getTfDescricao() {
		return tfDescricao;
	}

	public void setTfDescricao(TextField tfDescricao) {
		this.tfDescricao = tfDescricao;
	}

	public PopupDateField getPdfDataCotacao() {
		return pdfDataCotacao;
	}

	public void setPdfDataCotacao(PopupDateField pdfDataCotacao) {
		this.pdfDataCotacao = pdfDataCotacao;
	}

	public ManyToOneComboField<FornecedorCotacaoEntity> getCbFornecedor() {
		return cbFornecedor;
	}

	public void setCbFornecedor(ManyToOneComboField<FornecedorCotacaoEntity> cbFornecedor) {
		this.cbFornecedor = cbFornecedor;
	}

	public TextField getTfPrazoEntrega() {
		return tfPrazoEntrega;
	}

	public void setTfPrazoEntrega(TextField tfPrazoEntrega) {
		this.tfPrazoEntrega = tfPrazoEntrega;
	}

	public TextField getTfCondicaoPagamento() {
		return tfCondicaoPagamento;
	}

	public void setTfCondicaoPagamento(TextField tfCondicaoPagamento) {
		this.tfCondicaoPagamento = tfCondicaoPagamento;
	}

	public TextField getTfSubtotal() {
		return tfSubtotal;
	}

	public void setTfSubtotal(TextField tfSubtotal) {
		this.tfSubtotal = tfSubtotal;
	}

	public TextField getTfTaxaDesconto() {
		return tfTaxaDesconto;
	}

	public void setTfTaxaDesconto(TextField tfTaxaDesconto) {
		this.tfTaxaDesconto = tfTaxaDesconto;
	}

	public TextField getTfValorDesconto() {
		return tfValorDesconto;
	}

	public void setTfValorDesconto(TextField tfValorDesconto) {
		this.tfValorDesconto = tfValorDesconto;
	}

	public TextField getTfTotal() {
		return tfTotal;
	}

	public void setTfTotal(TextField tfTotal) {
		this.tfTotal = tfTotal;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		setWidth("100.0%");

		// fields
		fields = buildFields();
		fields.setRowExpandRatio(1, .15f);
		fields.setRowExpandRatio(2, .15f);
		fields.setRowExpandRatio(3, .15f);
		fields.setRowExpandRatio(4, 1);
		mainLayout.addComponent(fields);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout();
		fields.setImmediate(false);
		fields.setSizeFull();
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setColumns(6);
		fields.setRows(5);

		// pdfDataCotacao
		pdfDataCotacao = new PopupDateField();
		pdfDataCotacao.setCaption("Data da cotação");
		pdfDataCotacao.setImmediate(false);
		fields.addComponent(pdfDataCotacao, 0, 0);

		// tfDescricao
		tfDescricao = ComponentUtil.buildTextField("Descrição");
		fields.addComponent(tfDescricao, 1, 0, 5, 0);

		cbFornecedor = new ManyToOneComboField<>(FornecedorCotacaoEntity.class);
		cbFornecedor.setCaption("Fornecedores");
		//cbFornecedor.setInputPrompt("Selecione um fornecedor para ver os dados abaixo...");
		cbFornecedor.addValueChangeListener(new ValueChangeListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			private FornecedorCotacaoEntity oldValue;

			@Override
			public void valueChange(ValueChangeEvent event) {
				FornecedorCotacaoEntity fornCotacao = (FornecedorCotacaoEntity) cbFornecedor
						.getValue();

				if (oldValue != null) {
					oldValue.setPrazoEntrega(tfPrazoEntrega.getValue());
					oldValue.setVendaCondicaoPagamento(tfCondicaoPagamento
							.getValue());
					oldValue.setValorSubtotal((BigDecimal) tfSubtotal
							.getConvertedValue());
					oldValue.setTaxaDesconto((BigDecimal) tfTaxaDesconto
							.getConvertedValue());
					oldValue.setValorDesconto((BigDecimal) tfValorDesconto
							.getConvertedValue());
					oldValue.setTotal((BigDecimal) tfTotal.getConvertedValue());
				}

				if (fornCotacao != null) {
					fillReqCotacaoDetalhesSubForm(fornCotacao
							.getCotacaoDetalheList());
					tfPrazoEntrega.setValue(fornCotacao.getPrazoEntrega());
					tfCondicaoPagamento.setValue(fornCotacao
							.getVendaCondicaoPagamento());
					tfSubtotal.setConvertedValue(fornCotacao.getValorSubtotal());
					tfTaxaDesconto.setConvertedValue(fornCotacao
							.getTaxaDesconto());
					tfValorDesconto.setConvertedValue(fornCotacao
							.getValorDesconto());
					tfTotal.setConvertedValue(fornCotacao.getTotal());
				} else {
					fillReqCotacaoDetalhesSubForm(new ArrayList<CotacaoDetalheEntity>(
							0));
					tfPrazoEntrega.setValue(null);
					tfCondicaoPagamento.setValue(null);
					tfSubtotal.setValue(null);
					tfTaxaDesconto.setValue(null);
					tfValorDesconto.setValue(null);
					tfTotal.setValue(null);
				}

				oldValue = fornCotacao;
			}
		});

		fields.addComponent(cbFornecedor, 0, 1, 5, 1);

		tfPrazoEntrega = ComponentUtil.buildTextField("Prazo de entrega");
		fields.addComponent(tfPrazoEntrega, 0, 2, 1, 2);

		tfCondicaoPagamento = ComponentUtil
				.buildTextField("Condição de pagamento");
		fields.addComponent(tfCondicaoPagamento, 2, 2, 3, 2);

		tfSubtotal = ComponentUtil.buildCurrencysField("Subtotal");
		fields.addComponent(tfSubtotal, 4, 2, 5, 2);

		tfTaxaDesconto = ComponentUtil.buildPercentageField("Taxa de desconto");
		fields.addComponent(tfTaxaDesconto, 0, 3, 1, 3);

		tfValorDesconto = ComponentUtil.buildCurrencysField("Valor de desconto");
		fields.addComponent(tfValorDesconto, 2, 3, 3, 3);

		tfTotal = ComponentUtil.buildCurrencysField("Total");
		fields.addComponent(tfTotal, 4, 3, 5, 3);

		sbCotacaoDetalhe = new SubFormComponent<CotacaoDetalheEntity, Integer>(
				CotacaoDetalheEntity.class, new String[] { "produto.nome",
						"quantidade", "valorUnitario", "valorSubtotal",
						"taxaDesconto", "valorDesconto", "valorTotal" },
				new String[] { "Produto requisitado", "Quantidade",
						"Valor unitário", "Valor subtotal", "Taxa desconto",
						"Valor desconto", "Valor total" }, new String[] {
						"valorSubtotal", "valorDesconto", "valorTotal" }) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("quantidade".equals(propertyId)
								|| "produto.nome".equals(propertyId)) {
							TextField textField = ComponentUtil
									.buildTextField(null);
							textField.setReadOnly(true);

							return textField;
						} else if ("valorUnitario".equals(propertyId)
								|| "valorDesconto".equals(propertyId)) {
							TextField buildCurrencyField = ComponentUtil
									.buildCurrencyField(null);
							buildCurrencyField.addBlurListener(getBlurListener(
									container, itemId, propertyId));

							return buildCurrencyField;
						} else if ("valorSubtotal".equals(propertyId)
								|| "valorTotal".equals(propertyId)) {
							TextField buildCurrencyField = ComponentUtil
									.buildCurrencyField(null);
							buildCurrencyField.setReadOnly(true);
							buildCurrencyField.addBlurListener(getBlurListener(
									container, itemId, propertyId));

							return buildCurrencyField;
						}

						return ComponentUtil.buildNumberField(null);
					}

					private BlurListener getBlurListener(
							final Container container, final Object itemId,
							final Object propertyId) {
						return new BlurListener() {

							/**
							 * 
							 */
							private static final long serialVersionUID = 1L;

							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidade");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<BigDecimal> valorSubtotal = get("valorSubtotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");

								if (quantidade.getValue() != null
										&& valorUnitario.getValue() != null) {
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitario.getValue();
									valorSubtotal.setValue(q.multiply(vu));
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;

									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}

									valorTotal.setValue(vs.subtract(vd));
								}
							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);

								return item.getItemProperty(property);
							}

						};
					}

				};
			}

			@Override
			protected CotacaoDetalheEntity getNovo() {
				throw new UnsupportedOperationException(
						"Não é possível criar novo!");
			}

			@Override
			protected void getRemoverSelecionados(
					List<CotacaoDetalheEntity> values) {
				throw new UnsupportedOperationException(
						"Não é possível remover!");
			}

			@Override
			public boolean validateItems(List<CotacaoDetalheEntity> items) {
				return false;
			}

		};

		sbCotacaoDetalhe.setReadOnly(true);
		fields.addComponent(sbCotacaoDetalhe, 0, 4, 5, 4);

		return fields;
	}

	public void fillReqCotacaoDetalhesSubForm(
			List<CotacaoDetalheEntity> requisicaoDetalhes) {
		sbCotacaoDetalhe.fillWith(requisicaoDetalhes);
	}

	public void fillCompraFornecedorCotacoesSubForm(
			List<FornecedorCotacaoEntity> lista) {
		BeanItemContainer<FornecedorCotacaoEntity> tipoRequisicaoContainer = new BeanItemContainer<>(
				FornecedorCotacaoEntity.class, lista);
		tipoRequisicaoContainer
				.addNestedContainerProperty("fornecedor.pessoa.nome");
		//cbFornecedor.setContainerDataSource(tipoRequisicaoContainer);
		//cbFornecedor.setItemCaptionPropertyId("fornecedor.pessoa.nome");
	}

}