package dc.visao.financeiro;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.TextField;

import dc.controller.financeiro.NaturezaFinanceiraFormController;
import dc.entidade.contabilidade.ContabilContaEntity;
import dc.entidade.financeiro.NaturezaFinanceira;
import dc.entidade.financeiro.PlanoNaturezaFinanceira;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class NaturezaFinanceiraFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private GridLayout mainLayout;
	@AutoGenerated
	private TextField txtAplicacao;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_3;
	@AutoGenerated
	private TextField txtClassficacao;
	@AutoGenerated
	private TextField txtDescricao;
	@AutoGenerated
	private CheckBox ckContasPagar;
	@AutoGenerated
	private CheckBox ckContasReceber;
	@AutoGenerated
	private ComboBox cbTipo;
	@AutoGenerated
	private ManyToOneComboField<PlanoNaturezaFinanceira> cbPlanoNaturezaFinanceira;
	@AutoGenerated
	private ManyToOneComboField<ContabilContaEntity> cbContabilConta;
	
	NaturezaFinanceiraFormController controller;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public NaturezaFinanceiraFormView(NaturezaFinanceiraFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.controller = controller;
	}

	@AutoGenerated
	private GridLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		mainLayout.setRows(5);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		// comboBox_2
		cbTipo = ComponentUtil.buildComboBox("Tipo");
		cbTipo.setWidth("-1px");
		cbTipo.setHeight("-1px");
		cbTipo.setInvalidAllowed(false);
		cbTipo.setNullSelectionAllowed(false);
		cbTipo.addItem("Crédito");
		cbTipo.addItem("Débito");
		mainLayout.addComponent(cbTipo, 0, 0);

		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		mainLayout.addComponent(horizontalLayout_2, 0, 1);

		// horizontalLayout_1
		horizontalLayout_3 = buildHorizontalLayout_3();
		mainLayout.addComponent(horizontalLayout_3, 0, 2);

		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		mainLayout.addComponent(horizontalLayout_1, 0, 3);

		// txtDescricao
		txtClassficacao = ComponentUtil.buildTextField("Classificação");
		txtClassficacao.setWidth("-1px");
		txtClassficacao.setHeight("-1px");
		mainLayout.addComponent(txtClassficacao, 0, 4);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("100.0%");
		horizontalLayout_1.setMargin(false);
		horizontalLayout_1.setSpacing(true);

		// txtDescricao
		txtDescricao = ComponentUtil.buildTextField("Descrição");
		txtDescricao.setWidth("-1px");
		txtDescricao.setHeight("-1px");
		horizontalLayout_1.addComponent(txtDescricao);

		// txtAplicacao
		txtAplicacao = ComponentUtil.buildTextField("Aplicação");
		txtAplicacao.setWidth("-1px");
		txtAplicacao.setHeight("-1px");
		horizontalLayout_1.addComponent(txtAplicacao);

		return horizontalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("-1px");
		horizontalLayout_2.setHeight("100.0%");
		horizontalLayout_2.setMargin(false);
		horizontalLayout_2.setSpacing(true);
		// ckContasPagar
		ckContasPagar = new CheckBox();
		ckContasPagar.setCaption("Contas a Pagar");
		ckContasPagar.setImmediate(false);
		ckContasPagar.setWidth("-1px");
		ckContasPagar.setHeight("-1px");
		horizontalLayout_2.addComponent(ckContasPagar);
		// ckContasPagar
		ckContasReceber = new CheckBox();
		ckContasReceber.setCaption("Contas a Receber");
		ckContasReceber.setImmediate(false);
		ckContasReceber.setWidth("-1px");
		ckContasReceber.setHeight("-1px");
		horizontalLayout_2.addComponent(ckContasReceber);

		return horizontalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_3() {
		// common part: create layout
		horizontalLayout_3 = new HorizontalLayout();
		horizontalLayout_3.setImmediate(false);
		horizontalLayout_3.setWidth("-1px");
		horizontalLayout_3.setHeight("100.0%");
		horizontalLayout_3.setMargin(false);
		horizontalLayout_3.setSpacing(true);

		// cbPlanoNaturezaFinanceira
		cbPlanoNaturezaFinanceira = new ManyToOneComboField<>(PlanoNaturezaFinanceira.class);
		cbPlanoNaturezaFinanceira.setCaption("Plano Natureza Financeira");
		horizontalLayout_3.addComponent(cbPlanoNaturezaFinanceira);

		// cbContabilConta
		cbContabilConta = new ManyToOneComboField<>(ContabilContaEntity.class);
		cbContabilConta.setCaption("Contabil Conta");
		cbContabilConta.setWidth("-1px");
		cbContabilConta.setHeight("-1px");

		horizontalLayout_3.addComponent(cbContabilConta);

		return horizontalLayout_3;
	}

	public GridLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(GridLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public void setHorizontalLayout_1(HorizontalLayout horizontalLayout_1) {
		this.horizontalLayout_1 = horizontalLayout_1;
	}

	public TextField getTxtClassficacao() {
		return txtClassficacao;
	}

	public void setTxtClassficacao(TextField txtClassficacao) {
		this.txtClassficacao = txtClassficacao;
	}

	public TextField getTxtDescricao() {
		return txtDescricao;
	}

	public void setTxtDescricao(TextField txtDescricao) {
		this.txtDescricao = txtDescricao;
	}

	public TextField getTxtAplicacao() {
		return txtAplicacao;
	}

	public void setTxtAplicacao(TextField txtAplicacao) {
		this.txtAplicacao = txtAplicacao;
	}

	public HorizontalLayout getHorizontalLayout_2() {
		return horizontalLayout_2;
	}

	public void setHorizontalLayout_2(HorizontalLayout horizontalLayout_2) {
		this.horizontalLayout_2 = horizontalLayout_2;
	}

	public CheckBox getCkContasPagar() {
		return ckContasPagar;
	}

	public void setCkContasPagar(CheckBox ContasPagar) {
		this.ckContasPagar = ContasPagar;
	}

	public CheckBox getCkContasReceber() {
		return ckContasReceber;
	}

	public void setCkContasReceber(CheckBox ckContasReceber) {
		this.ckContasReceber = ckContasReceber;
	}

	public String getCbTipoAsString() {
		String cbvalue = new String();
		if ("Débito".equals(cbTipo.getValue())) {
			cbvalue = "D";
		} else if ("Crédito".equals(cbTipo.getValue())) {
			cbvalue = "C";
		}
		return cbvalue;
	}

	public void setCbTipoAsString(String cbTipo) {
		if ("D".equals(cbTipo)) {
			this.cbTipo.setValue("Débito");
		} else if ("C".equals(cbTipo)) {
			this.cbTipo.setValue("Crédito");
		}
	}

	public HorizontalLayout getHorizontalLayout_1() {
		return horizontalLayout_1;
	}

	public void preencheBean(NaturezaFinanceira currentBean) {
		currentBean.setClassificacao(getTxtClassficacao().getValue());
		currentBean.setDescricao(getTxtDescricao().getValue());
		currentBean.setTipo(getCbTipoAsString());
		currentBean.setAplicacao(getTxtAplicacao().getValue());

		currentBean.setPlanoNaturezaFinanceira(getCbPlanoNaturezaFinanceira()
				.getValue());
		currentBean.setContabilconta(getCbContabilConta().getValue());
		currentBean.setAparecePagar(getCksValue(getCkContasPagar()));
		currentBean.setApareceReceber(getCksValue(getCkContasReceber()));
	}

	private String getCksValue(CheckBox ck) {
		if (ck.getValue().booleanValue())
			return "S";
		else
			return "N";
	}

	public void preencheForm(NaturezaFinanceira currentBean) {
		getTxtDescricao().setValue(currentBean.getDescricao());
		setCbTipoAsString(currentBean.getTipo().toString());
		getTxtAplicacao().setValue(currentBean.getAplicacao());
		getTxtClassficacao().setValue(currentBean.getClassificacao());
		getCbPlanoNaturezaFinanceira().setValue(
				currentBean.getPlanoNaturezaFinanceira());
		getCbContabilConta().setValue(currentBean.getContabilconta());
		getCkContasPagar().setValue(
				setCksValue(currentBean.getAparecePagar(), "S", "N"));
		getCkContasReceber().setValue(
				setCksValue(currentBean.getApareceReceber(), "S", "N"));

	}

	private Boolean setCksValue(String value, String valueChecked,
			String valueNotChecked) {
		if (value.equalsIgnoreCase(valueChecked)) {
			return true;
		} else if (value.equalsIgnoreCase(valueNotChecked)) {
			return false;
		} else {
			return false;
		}
	}

	public void setCbTipo(ComboBox cbTipo) {
		this.cbTipo = cbTipo;
	}

	public ComboBox getCbTipo() {
		return cbTipo;
	}

	public ManyToOneComboField<PlanoNaturezaFinanceira> getCbPlanoNaturezaFinanceira() {
		return cbPlanoNaturezaFinanceira;
	}

	public void setCbPlanoNaturezaFinanceira(
			ManyToOneComboField<PlanoNaturezaFinanceira> cbPlanoNaturezaFinanceira) {
		this.cbPlanoNaturezaFinanceira = cbPlanoNaturezaFinanceira;
	}

	public ManyToOneComboField<ContabilContaEntity> getCbContabilConta() {
		return cbContabilConta;
	}

	public void setCbContabilConta(ManyToOneComboField<ContabilContaEntity> cbContabilConta) {
		this.cbContabilConta = cbContabilConta;
	}
}