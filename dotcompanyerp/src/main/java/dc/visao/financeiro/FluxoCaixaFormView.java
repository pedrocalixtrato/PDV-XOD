package dc.visao.financeiro;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.financeiro.FluxoCaixaFormController;
import dc.entidade.financeiro.FluxoCaixaDetalheEntity;
import dc.entidade.financeiro.FluxoCaixaEntity;
import dc.entidade.financeiro.FluxoCaixaPeriodoEntity;
import dc.entidade.financeiro.NaturezaFinanceira;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class FluxoCaixaFormView extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private TabSheet tabSheet;
	
	@AutoGenerated
	private TextField txNomeFluxo, txNrPeriodo;
	
	@AutoGenerated
	private TextArea txDescricao;
	
	@AutoGenerated
	private PopupDateField dtInicial, dtInicialBase;
	
	private Button btnCalculaVariacao;
	
	@AutoGenerated
	private ManyToOneComboField<FluxoCaixaPeriodoEntity> cbPeriodo;
	
	private SubFormComponent<FluxoCaixaDetalheEntity, Integer> fluxoCaixaDetalheSubForm;
	
	FluxoCaixaFormController controller;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public FluxoCaixaFormView(FluxoCaixaFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {

		// common part: create layout
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		fields = buildFields();

		mainLayout.addComponent(fields);

		tabSheet = BuildTabs();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1);

		return mainLayout;
	}

	private GridLayout buildFields() {
		fields = new GridLayout();
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);
		fields.setRows(7);
		fields.setColumns(7);
		
		cbPeriodo = new ManyToOneComboField<>(FluxoCaixaPeriodoEntity.class);
		cbPeriodo.setCaption("Fluxo Caixa Período");
		fields.addComponent(cbPeriodo, 0, 0, 1, 0);
		
		txNomeFluxo = ComponentUtil.buildTextField("Nome Fluxo Caixa");
		fields.addComponent(txNomeFluxo, 2, 0, 3,0);
		
		dtInicial = ComponentUtil.buildPopupDateField("Data Inicial");
		fields.addComponent(dtInicial, 0, 1, 1,1);
		
		dtInicialBase = ComponentUtil.buildPopupDateField("Data Inicial Base");
		fields.addComponent(dtInicialBase, 2, 1, 3,1);
		
		txNrPeriodo = ComponentUtil.buildTextField("Nr. Períodos");
		fields.addComponent(txNrPeriodo, 0, 2);
		
		txDescricao = ComponentUtil.buildTextArea("Descrição");
		fields.addComponent(txDescricao, 0, 3, 4,3);
		
		btnCalculaVariacao = new Button("Calcular Variação");
		fields.addComponent(btnCalculaVariacao, 0,4);

		
		return fields;
		
	}
	
	private TabSheet BuildTabs() {
		tabSheet = new TabSheet();
		tabSheet.setImmediate(true);
		tabSheet.setSizeFull();

		tabSheet.addTab(buildSubFormFluxoCaixaDetalhe(),"Fluxo Caixa Detalhe", null);

		return tabSheet;
	}
	
	private SubFormComponent<FluxoCaixaDetalheEntity, Integer> buildSubFormFluxoCaixaDetalhe() {
		//private Component buildSubFormNaturezaFinanceira() {
			
			String[] atributos = new String[] { "naturezaFinanceira", "periodo","valorOrcado","valorRealizado","taxaVariacao","valorVariacao" };

			String[] headers = new String[] { "Natureza Financeira","Período","Valor Orçado","Valor Realizado","Taxa Variação","Valor Variação" };

			this.fluxoCaixaDetalheSubForm = new SubFormComponent<FluxoCaixaDetalheEntity, Integer>(
					FluxoCaixaDetalheEntity.class, atributos, headers) {

				private static final long serialVersionUID = 1L;

				@Override
				protected TableFieldFactory getFieldFactory() {
					return new TableFieldFactory() {

						/**
						 * 
						 */
						private static final long serialVersionUID = 1L;

						@Override
						public Field<?> createField(Container container,
								Object itemId, Object propertyId,
								Component uiContext) {

							/*if ("tipo".equals(propertyId)) {
								TextField f = new TextField();
								return f;
							} */
						    if ("valorOrcado".equals(propertyId)) {
								return ComponentUtil.buildCurrencysField(null);
							} else if ("valorRealizado".equals(propertyId)) {
								return ComponentUtil.buildCurrencysField(null);
							} else if ("valorVariacao".equals(propertyId)) {
								TextField tx = ComponentUtil.buildCurrencyField(null);
								tx.setEnabled(false);
								return tx;
							} else if ("taxaVariacao".equals(propertyId)) {
								TextField tx = ComponentUtil.buildPercentageField(null);
								tx.setEnabled(false);
								return tx;
							} else if ("naturezaFinanceira".equals(propertyId)) {
								ComboBox comboBox = ComponentUtil.buildComboBox(null);
								BeanItemContainer<NaturezaFinanceira> naturezaContainer = new BeanItemContainer<>(NaturezaFinanceira.class,
										controller.buscarNaturezas());
								naturezaContainer.addNestedContainerProperty("descricao");
								comboBox.setContainerDataSource(naturezaContainer);
								comboBox.setItemCaptionPropertyId("descricao");
								return comboBox;
								
							}

							else {
								return ComponentUtil.buildTextField(null);
							}
						}

					};
				}

				@Override
				public boolean validateItems(List<FluxoCaixaDetalheEntity> items) {

					return true;
				}

				protected FluxoCaixaDetalheEntity getNovo() {
					FluxoCaixaDetalheEntity LlctoPagarNtFinanceira = controller
							.novoFluxo();
					return LlctoPagarNtFinanceira;
				}

				@Override
				protected void getRemoverSelecionados(
						List<FluxoCaixaDetalheEntity> values) {
					controller.removerFluxo(values);
				}
			};

			return this.fluxoCaixaDetalheSubForm;
		}
	
	public void preencheBean(FluxoCaixaEntity currentBean) {
		currentBean.setFluxoCaixaPeriodo((FluxoCaixaPeriodoEntity) cbPeriodo.getValue());
		/*currentBean.setDataLancamento(dtLancamento.getValue());
		currentBean.setPrimeiroVencimento(dtPrimeiroVencimento.getValue());
		currentBean.setDocumentoOrigem((DocumentoOrigem) cbDocumentoOrigem
				.getValue());
		//currentBean.setPagamentoCompartilhado(((SimNaoEn) cbPagamentoCompartilhado.getValue()).getCodigo());
		currentBean.setValorAPagar((BigDecimal) txValorPagar
				.getConvertedValue());
		currentBean
				.setValorTotal((BigDecimal) txValorTotal.getConvertedValue());
		currentBean.setIntervaloEntreParcelas(txIntervaloParcela
				.getConvertedValue() != null ? (Integer) txIntervaloParcela
				.getConvertedValue() : 0);
		currentBean.setNumeroDocumento(txNumeroDocumento.getValue());
		currentBean.setQuantidadeParcela((Integer) txQuantidadeParcela
				.getConvertedValue());*/
	}

	public void preencheForm(FluxoCaixaEntity currentBean) {
		/*cbFornecedor.setValue(currentBean.getFornecedor());
		dtLancamento.setValue(currentBean.getDataLancamento());
		dtPrimeiroVencimento.setValue(currentBean.getPrimeiroVencimento());
		cbDocumentoOrigem.setValue(currentBean.getDocumentoOrigem());
		//cbPagamentoCompartilhado.setValue(SimNaoEn.getEn(currentBean.getPagamentoCompartilhado()));
		txValorPagar.setConvertedValue(currentBean.getValorAPagar());
		txValorTotal.setConvertedValue(currentBean.getValorTotal());
		txIntervaloParcela.setConvertedValue(currentBean
				.getIntervaloEntreParcelas());
		txNumeroDocumento.setValue(currentBean.getNumeroDocumento());
		txQuantidadeParcela.setConvertedValue(currentBean
				.getQuantidadeParcela());

		if ((Integer) txIntervaloParcela.getConvertedValue() == 30) {
			cbTipoVencimento.setValue(TipoVencimentoEn.M);
		} else {
			txIntervaloParcela.setEnabled(false);
			cbTipoVencimento.setValue(TipoVencimentoEn.D);
		}

		parcelasSubForm.fillWith(currentBean.getParcelasPagar());
		naturezaFinanceiraSubForm.fillWith(currentBean
				.getLctoPagarNtFinanceiras());*/
	}
	
	public void preencheSubForm(List<FluxoCaixaDetalheEntity> detalhes) {
		fluxoCaixaDetalheSubForm.fillWith(detalhes);
	}

	public TextField getTxNomeFluxo() {
		return txNomeFluxo;
	}

	public void setTxNomeFluxo(TextField txNomeFluxo) {
		this.txNomeFluxo = txNomeFluxo;
	}

	public TextField getTxNrPeriodo() {
		return txNrPeriodo;
	}

	public void setTxNrPeriodo(TextField txNrPeriodo) {
		this.txNrPeriodo = txNrPeriodo;
	}

	public TextArea getTxDescricao() {
		return txDescricao;
	}

	public void setTxDescricao(TextArea txDescricao) {
		this.txDescricao = txDescricao;
	}

	public PopupDateField getDtInicial() {
		return dtInicial;
	}

	public void setDtInicial(PopupDateField dtInicial) {
		this.dtInicial = dtInicial;
	}

	public PopupDateField getDtInicialBase() {
		return dtInicialBase;
	}

	public void setDtInicialBase(PopupDateField dtInicialBase) {
		this.dtInicialBase = dtInicialBase;
	}

	public ManyToOneComboField<FluxoCaixaPeriodoEntity> getCbPeriodo() {
		return cbPeriodo;
	}

	public void setCbPeriodo(ManyToOneComboField<FluxoCaixaPeriodoEntity> cbPeriodo) {
		this.cbPeriodo = cbPeriodo;
	}

	public SubFormComponent<FluxoCaixaDetalheEntity, Integer> getFluxoCaixaDetalheSubForm() {
		return fluxoCaixaDetalheSubForm;
	}

	public void setFluxoCaixaDetalheSubForm(
			SubFormComponent<FluxoCaixaDetalheEntity, Integer> fluxoCaixaDetalheSubForm) {
		this.fluxoCaixaDetalheSubForm = fluxoCaixaDetalheSubForm;
	}

	public Button getBtnCalculaVariacao() {
		return btnCalculaVariacao;
	}

	public void setBtnCalculaVariacao(Button btnCalculaVariacao) {
		this.btnCalculaVariacao = btnCalculaVariacao;
	}
	
}
