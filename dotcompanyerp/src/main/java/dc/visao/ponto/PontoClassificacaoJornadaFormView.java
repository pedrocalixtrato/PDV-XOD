package dc.visao.ponto;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.ponto.PontoClassificacaoJornada;
import dc.visao.framework.util.ComponentUtil;

public class PontoClassificacaoJornadaFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout_1;
	@AutoGenerated
	private TextField txCodigo;
	@AutoGenerated
	private TextField txNome;
	@AutoGenerated
	private ComboBox cmbPadrao;
	@AutoGenerated
	private ComboBox cmbDescontarHoras;
	@AutoGenerated
	private TextArea txaDescricao;

	public PontoClassificacaoJornadaFormView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		this.cmbDescontarHoras.addItem(SimNao.SIM);
		this.cmbDescontarHoras.addItem(SimNao.NAO);
		
		this.cmbPadrao.addItem(SimNao.SIM);
		this.cmbPadrao.addItem(SimNao.NAO);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// gridLayout_1
		gridLayout_1 = buildGridLayout_1();
		mainLayout.addComponent(gridLayout_1);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildGridLayout_1() {
		// common part: create layout
		gridLayout_1 = new GridLayout(5, 3);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setWidth("100%");

		txCodigo = ComponentUtil.buildMaskedTextField ("Código", "???");
		gridLayout_1.addComponent(txCodigo, 0, 0);

		txNome = ComponentUtil.buildTextField("Nome");
		gridLayout_1.addComponent(txNome, 0, 1, 1, 1);

		cmbPadrao = ComponentUtil.buildComboBox("Padrão");
		gridLayout_1.addComponent(cmbPadrao, 2, 1);

		cmbDescontarHoras = ComponentUtil.buildComboBox("Descontar Horas");
		gridLayout_1.addComponent(cmbDescontarHoras, 3, 1);


		txaDescricao = ComponentUtil.buildTextArea("Descrição");
		gridLayout_1.addComponent(txaDescricao, 0, 2, 4, 2);

		return gridLayout_1;
	}

	public void preencheForm(PontoClassificacaoJornada currentBean) {
		this.txCodigo.setValue(currentBean.getCodigo());
		this.txNome.setValue(currentBean.getNome());
		this.txaDescricao.setValue(currentBean.getDescricao());
		this.cmbPadrao.setValue(SimNao.getSimNao(currentBean.getPadrao()));
		this.cmbDescontarHoras.setValue(SimNao.getSimNao(currentBean.getDescontarHoras()));
	}

	public void preencheBean(PontoClassificacaoJornada currentBean) {
		currentBean.setCodigo(this.txCodigo.getValue());
		currentBean.setNome(this.txNome.getValue());
		currentBean.setPadrao(((SimNao) this.cmbPadrao.getValue()).getCodigo());
		currentBean.setDescontarHoras(((SimNao) this.cmbDescontarHoras.getValue()).getCodigo());
		currentBean.setDescricao(this.txaDescricao.getValue());
	}

	public TextField getTxCodigo() {
		return txCodigo;
	}

	public void setTxCodigo(TextField txCodigo) {
		this.txCodigo = txCodigo;
	}

	public TextField getTxNome() {
		return txNome;
	}

	public void setTxNome(TextField txNome) {
		this.txNome = txNome;
	}

	public ComboBox getCmbPadrao() {
		return cmbPadrao;
	}

	public void setCmbPadrao(ComboBox cmbPadrao) {
		this.cmbPadrao = cmbPadrao;
	}

	public ComboBox getCmbDescontarHoras() {
		return cmbDescontarHoras;
	}

	public void setCmbDescontarHoras(ComboBox cmbDescontarHoras) {
		this.cmbDescontarHoras = cmbDescontarHoras;
	}

	public TextArea getTxaDescricao() {
		return txaDescricao;
	}

	public void setTxaDescricao(TextArea txaDescricao) {
		this.txaDescricao = txaDescricao;
	}

	public enum SimNao {
		SIM("Sim", "S"), NAO("Não", "N");

		private SimNao(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static SimNao getSimNao(String codigo) {
			for (SimNao e : SimNao.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}

		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

}
