package dc.visao.ordemservico;

import java.util.List;

import org.vaadin.addons.maskedtextfield.MaskedTextField;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.ordemservico.OrdemServicoFormController;
import dc.entidade.ordemservico.EntradaServicoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class EntradaServicoFormView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;

	@AutoGenerated
	private GridLayout entradaServicoButtons;

	@AutoGenerated
	private HorizontalLayout entradaServicoButtonsContainer;

	@AutoGenerated
	private ComboBox cbTecnico;

	@AutoGenerated
	private ComboBox cbVendedor;

	@AutoGenerated
	private ComboBox cbServico;

	@AutoGenerated
	private PopupDateField dtFinalGarantia;
	
	@AutoGenerated
	private TextField txHrTrabalhada, txQtd,  txDesconto, txValorTotal;

	@AutoGenerated
	private TextField txVlrUnitario;

	@AutoGenerated
	private MaskedTextField mtxVlrUnitario;

	@AutoGenerated
	private TabSheet tabSheet;
	
	private OrdemServicoFormController controller;

	private SubFormComponent<EntradaServicoEntity, Integer> entradaServicoSubForm;

	public EntradaServicoFormView(OrdemServicoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

//		fields = buildFields();
//		mainLayout.addComponent(fields);

		// subForm
		tabSheet = BuildTabs();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1);

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(4, 4);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(false);
		fields.setSpacing(true);

//		entradaServicoButtons = buildEntradaServicoButtons();
//		fields.addComponent(entradaServicoButtons, 0, 0, 1, 0);

		cbTecnico = ComponentUtil.buildComboBox("Técnico");
		fields.addComponent(cbTecnico, 0, 1);

		cbVendedor = ComponentUtil.buildComboBox("Vendedor");
		fields.addComponent(cbVendedor, 1, 1);

		cbServico = ComponentUtil.buildComboBox("Serviço");
		fields.addComponent(cbServico, 2, 1);
		

		dtFinalGarantia = ComponentUtil.buildPopupDateField("Final da garantia");
		fields.addComponent(dtFinalGarantia, 0, 2);
		
		txHrTrabalhada = ComponentUtil.buildTextField("Hs. Trab.");
		fields.addComponent(txHrTrabalhada, 1, 2);

		txQtd = ComponentUtil.buildTextField("Qtd.");
		fields.addComponent(txQtd, 2, 2);

//		txVlrUnitario = ComponentUtil.buildCurrencyField("Valor unit.");
//		fields.addComponent(txVlrUnitario, 0, 3);
//
//		txDesconto = ComponentUtil.buildPercentageField("Desconto %");
//		fields.addComponent(txDesconto, 1, 3);
//
//		txValorTotal = ComponentUtil.buildCurrencyField("Valor total");
//		fields.addComponent(txValorTotal, 2, 3);
		
//		mtxVlrUnitario = ComponentUtil.buildMaskedTextField("Placa","");
//		fields.addComponent(mtxVlrUnitario, 3, 2);
		
		return fields;
	}

	private TabSheet BuildTabs() {
		tabSheet = new TabSheet();
		tabSheet.setImmediate(true);
		tabSheet.setSizeFull();

		tabSheet.addTab(buildSubFormEntradaServico(), "Entrada de Serviço", null);

		return tabSheet;
	}

	
	private Component buildSubFormEntradaServico() {
//		String[] atributos = new String[] { "vendedor.pessoa.nome", "tecnico.pessoa.nome","servico.descricao","horaTrabalhada","quantidadeServico","valorUnitario","valorCobrado","percentualDesconto","valorDesconto","valorTotal","dataGarantia","revisao","percentualTecnico","comissaoTecnico" };
//		String[] headers = new String[] { "Nome vendedor", "Técnico", "Descrição serviço", "Hr.", "Qtd", "Valor unitário", "Valor cobrado", "Desconto %", "Valor desconto", "Valor Total" , "Garantia", "Revisão", "Técnico %", "Comissão técnico"};
		String[] atributos = new String[] { "horaTrabalhada","valorTotal"};
		String[] headers = new String[] { "Hr.", "Valor total"};
		 
		this.entradaServicoSubForm = new SubFormComponent<EntradaServicoEntity, Integer>(EntradaServicoEntity.class, atributos, headers) {

			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {
						return ComponentUtil.buildTextField(null);

//						if ("servico.descricao".equals(propertyId)) {
//							TextField textField = ComponentUtil.buildNumberField(null);
//							return textField;
//						} else if ("valorUnitario".equals(propertyId)) {
//							return ComponentUtil.buildCurrencyField(null);
//						}else {
//							return ComponentUtil.buildTextField(null);
//						}
					}

				};
			}

			@Override
			public boolean validateItems(List<EntradaServicoEntity> items) {

				return true;
			}

			protected EntradaServicoEntity getNovo() {
//				EntradaServico entradaServico = controller.novoEntradaServicoItem();
//				return entradaServico;
				return null;
			}
	
			
			protected void getRemoverSelecionados(List<EntradaServicoEntity> values) {
//				controller.removerEntradaServicoItem(values);
			}
		};

		return this.entradaServicoSubForm;
	}
	
}
