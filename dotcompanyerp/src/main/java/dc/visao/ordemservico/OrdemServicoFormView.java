package dc.visao.ordemservico;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.vaadin.easyuploads.MultiFileUpload;
import org.vaadin.tepi.imageviewer.ImageViewer;
import org.vaadin.tepi.imageviewer.ImageViewer.ImageSelectedEvent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.MouseEvents.ClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.server.FileResource;
import com.vaadin.server.Page;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbstractComponent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.DragAndDropWrapper.DragStartMode;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Layout;
import com.vaadin.ui.Link;
import com.vaadin.ui.Notification;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Slider;
import com.vaadin.ui.Slider.ValueOutOfBoundsException;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import dc.controller.ordemservico.OrdemServicoFormController;
import dc.entidade.financeiro.TipoPagamento;
import dc.entidade.geral.ged.DocumentoArquivo;
import dc.entidade.geral.pessoal.ClienteEntity;
import dc.entidade.geral.pessoal.ColaboradorEntity;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.entidade.ordemservico.AcessorioEntity;
import dc.entidade.ordemservico.AcessorioOsEntity;
import dc.entidade.ordemservico.CarroEntity;
import dc.entidade.ordemservico.CorEntity;
import dc.entidade.ordemservico.EntradaServicoEntity;
import dc.entidade.ordemservico.EquipamentoEntity;
import dc.entidade.ordemservico.MarcaOsEntity;
import dc.entidade.ordemservico.MaterialServicoEntity;
import dc.entidade.ordemservico.ModeloOsEntity;
import dc.entidade.ordemservico.OrdemServicoEfetivacaoEntity;
import dc.entidade.ordemservico.OrdemServicoEntity;
import dc.entidade.ordemservico.ParametroOsEntity;
import dc.entidade.ordemservico.RevendaEntity;
import dc.entidade.ordemservico.ServicoOsEntity;
import dc.entidade.ordemservico.SituacaoServicoEntity;
import dc.entidade.ordemservico.StatusOsEntity;
import dc.entidade.ordemservico.TipoServicoOsEntity;
import dc.entidade.ordemservico.VendaPecaEntity;
import dc.model.business.ordemservico.ParametroOsBusiness;
import dc.servicos.util.Util;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class OrdemServicoFormView extends CustomComponent {

	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout fields;
	@AutoGenerated
	private GridLayout gridLayoutFoto;
	@AutoGenerated
	private Link linkDonwload;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1;
	@AutoGenerated
	private GridLayout gridLayout_2;
	
	@AutoGenerated
	private HorizontalLayout horizontalLayout_1_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_3_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_4_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_5_info;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_6_info;
	@AutoGenerated
	private TabSheet subForms, subFormEfetivacao,subFormEfetivacaoFinanceiro;
	@AutoGenerated
	private TabSheet grInformacaoGeral;
	@AutoGenerated
	private GridLayout grLaudoTecnico;
	@AutoGenerated
	private GridLayout grEntradaServico;
	@AutoGenerated
	private GridLayout grVendaPeca;
	@AutoGenerated
	private GridLayout grMaterialServico;
	@AutoGenerated
	private GridLayout grGarantia;
	@AutoGenerated
	private GridLayout grAcessorios;
	@AutoGenerated
	private GridLayout grObservacao;
	@AutoGenerated
	private GridLayout grFotos;
	@AutoGenerated
	private GridLayout grListaAgrupado;
	@AutoGenerated
	private GridLayout grInformacaoFinanceira;
	@AutoGenerated
	private OptionGroup optTipoDinheiro;
	@AutoGenerated
	private SlowMultiFileUpload upArquivo;
	
	@AutoGenerated
	private OrdemServicoFormController controller;

	/**
	 * BUSINESS
	 */
	@Autowired
	private ParametroOsBusiness<ParametroOsEntity> businessParametroOs;

	private GridLayout sources;
	private Window subwindow;
	private Panel nPanel;
	private Button btnFinalizar, btnCancelar;
	private String nomeArquivoVisualizacao;
	private String idEmpresa = "";
	private String idDocumento = "";
	private String homePath = System.getProperty("user.home");
	private String customCompanyBaseFolder = "dc-erp";
	private ImageViewer imageViewer = new ImageViewer();
	private final TextField selectedImage = new TextField();
	private List<String> listArquivos = new ArrayList<String>();
	private SubFormComponent<EntradaServicoEntity, Integer> entradaServicoSubForm;
	private SubFormComponent<EntradaServicoEntity, Integer> entradaServicoFinanceiraSubForm;
	private SubFormComponent<VendaPecaEntity, Integer> vendaPecaSubForm = null;
	private SubFormComponent<VendaPecaEntity, Integer> vendaPecaFinanceiraSubForm;
	private SubFormComponent<MaterialServicoEntity, Integer> materialServicoSubForm;
	private SubFormComponent<AcessorioOsEntity, Integer> acessorioOsSubForm;
	private SubFormComponent<OrdemServicoEntity, Integer> osAgrupadaSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoDinheiroSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoChequeSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCartaoSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCarneSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoBoletoSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoDuplicataSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoValeSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCobrancaBancariaSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCobrancaCarteiraSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoGeralFinanceiroSubForm;
	private SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoTituloFinanceiroSubForm;
	private PopupDateField pdfDataEntrada,pdfDataEfetiv, pdfProximaRevisao, pdfEntrega, pdfDataNotaFiscal;
	private TextField tfNumeroOS,tfNumeroComanda, tfRazao, tfEndereco, tfCidade, tfBairro, tfUf, tfFone, tfkm, tfData;
	private TextField tfCliente, tfNumOsFabricante, tfNumNotaFiscal, tfApelido, tfSerial, tfMarca, tfModelo, tfAno, tfMotorizacao, tfCombustivel, tfChassi;
	private TextArea taObservacaoLaudoTecnico,taObservacaoLaudoFerramentas, taTermoGarantia,taObservacaoLocal, taObservacaoOS, taObservacaoDefeito,taObservacaoFoto;
	private TextField tfTotalServicoGeral,tfTotalProdutoGeral,tfTotalFreteGeral,tfTotalOutrosGeral,tfDescontoGeral,tfTotalGeral;
	private TextField tfTotalPeca, tfLucroPeca, tfTotalServico, tfLucroServico, tfComissaoTecnico, tfComissaoVendedor, tfComissaoAtendente,
	                  tfDesconto, tfLucroParcialServico;
	private Label lblTotalPeca, lblLucroPeca,lblTotalServico, lblLucroServico, lblComissaoTecnico, lblComissaoVendedor,
	              lblComissaoAtendente, lblDesconto, lblLucroParcialServico;
	private Label lblDinheiro, lblCheque, lblCartao,lblBoleto, lblDuplicata, lblCarne, lblVale, lblCobrancaBancaria, 
	              lblCobrancaCarteira, lblTotais, lblTroco;
	private TextField tfDinheiro,tfCheque, tfCartao,tfBoleto, tfDuplicata, tfCarne, tfVale, tfCobrancaBancaria, 
					  tfCobrancaCarteira, tfTotais, tfQtParcelaDinheiro, tfQtParcelaCheque, tfQtParcelaCartao,tfQtParcelaBoleto, 
					  tfQtParcelaDuplicata, tfQtParcelaCarne, tfQtParcelaVale, tfQtParcelaCobrancaBancaria, 
					  tfQtParcelaCobrancaCarteira, tfTroco, tfTotalRestante;
	private CheckBox chbPgtoUnico;
	private ManyToOneComboField<ClienteEntity> cbCliente;
	private ManyToOneComboField<CarroEntity> cbPlaca;
	private ManyToOneComboField<RevendaEntity> cbRevenda;
	private ManyToOneComboField<EquipamentoEntity> cbEquipamento;
	private ManyToOneComboField<EquipamentoEntity> cbEquipamentoGarantia;
	private ManyToOneComboField<MarcaOsEntity> cbMarca;
	private ManyToOneComboField<MarcaOsEntity> cbMarcaGarantia;
	private ManyToOneComboField<ModeloOsEntity> cbModelo;
	private ManyToOneComboField<CorEntity> cbCor;
	private ManyToOneComboField<ModeloOsEntity> cbModeloGarantia;
	private ManyToOneComboField<CorEntity> cbCorGarantia;
	private ManyToOneComboField<StatusOsEntity> cbStatus;
	private ManyToOneComboField<SituacaoServicoEntity> cbSituacaoServico;
	private ManyToOneComboField<ColaboradorEntity> cbAtendente;
	private ManyToOneComboField<TipoServicoOsEntity> cbTipoServico;
	private ManyToOneComboField<TipoPagamento> cbFormaPagamento;
	private BigDecimal troco = BigDecimal.ZERO;
	private BigDecimal totalGeral = BigDecimal.ZERO;
	private BigDecimal totalRestante = BigDecimal.ZERO;
	private BigDecimal dinheiro = BigDecimal.ZERO;
	private BigDecimal cheque = BigDecimal.ZERO;
	private BigDecimal cartao = BigDecimal.ZERO;
	private BigDecimal boleto =BigDecimal.ZERO;
	private BigDecimal duplicata =BigDecimal.ZERO;
	private BigDecimal carne =BigDecimal.ZERO;
	private BigDecimal vale =BigDecimal.ZERO;
	private BigDecimal cobrancaBancaria =BigDecimal.ZERO;
	private BigDecimal cobrancaCarteira =BigDecimal.ZERO;
	private BigDecimal valorTotalChequeOs = BigDecimal.ZERO;
	private BigDecimal valorTotalCarneOs = BigDecimal.ZERO;
	private BigDecimal valorTotalCartaoOs = BigDecimal.ZERO;
	private BigDecimal valorTotalBoletoOs = BigDecimal.ZERO;
	private Double valorTotalEntradaServico = 0D;
	private Double valorTotalMaterialServico = 0D;
	private Double valorTotalLucroMaterial = 0D;
	private Double valorTotalCompraMaterial = 0D;
	private Double valorVendaPeca = 0D;
	private Double valorTotalGeral = 0D;
	private Double valorDescontoServico = 0D;
	private Double valorDescontoPeca = 0D;
	private Double valorTotalDesconto = 0D;
	private Button btnEfetivacao;
	private ParametroOsEntity parametroOs;
	
	public OrdemServicoFormView(OrdemServicoFormController controller) {
		this.controller = controller;
		/*if(SecuritySessionProvider.getUsuario().getConta().getEmpresa()!=null){
			this.parametroOs = this.businessParametroOs.buscaParametroOs(SecuritySessionProvider.getUsuario().getConta().getEmpresa());
		}*/

		//this.parametroOs = this.businessParametroOs.buscaParametroOs(SecuritySessionProvider.getUsuario().getConta().getEmpresa());
	    this.parametroOs = this.controller.getParametroOs();
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		setWidth("100.0%");
	
		// common part: create layout
		subForms = new TabSheet();
		subForms.setWidth("100.0%");
		subForms.setHeight("100.0%");
		subForms.setSizeFull();
		subForms.setImmediate(true);
		mainLayout.addComponent(subForms);

		buildAbaInformacaoGeral();
		buildAbaLaudoTecnico();
		buildAbaEntradaServico();
		buildAbaVendaPeca();
		buildAbaMaterialServico();
		buildAbaGarantia();
		buildAbaAcessorio();
		buildAbaObservacao();
		buildAbaFoto();
//		buildAbaOsAgrupada();
		buildAbaInformacaoFinanceira();
		buildAbaEfetivacaoOs();
		
		return mainLayout;
	}

	public void buildAbaInformacaoGeral() {

		GridLayout gridLayout_1 = new GridLayout(7, 7);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setRows(7);
		gridLayout_1.setColumns(7);


		cbCliente = new ManyToOneComboField<>(ClienteEntity.class);
		cbCliente.setCaption("Cliente");
		cbCliente.addValueChangeListener(new ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				ClienteEntity cli = new ClienteEntity();
				cli = controller.findById(cbCliente.getValue());
				
				if(cli!=null){
					tfRazao.setValue(cli.getPessoa().getNome());
					//controller.getCarro("cliente", cbCliente.getValue().getId());
					
					if(cli.getPessoa()!=null){
					    if(cli.getPessoa().getPessoaEnderecoList().size()>0){
					    	tfEndereco.setValue(cli.getPessoa().getPessoaEnderecoList().get(0).getLogradouro());
							tfCidade.setValue(cli.getPessoa().getPessoaEnderecoList().get(0).getCidade());
							tfBairro.setValue(cli.getPessoa().getPessoaEnderecoList().get(0).getBairro());
							tfUf.setValue(cli.getPessoa().getPessoaEnderecoList().get(0).getSiglaUf().toString());
					    }
					}
				}
			}
		});
		gridLayout_1.addComponent(cbCliente,0,1,1,1);

		tfRazao = ComponentUtil.buildTextField("Razão");
		gridLayout_1.addComponent(tfRazao,2,1);
		
		tfEndereco = ComponentUtil.buildTextField("Endereço");
		gridLayout_1.addComponent(tfEndereco,3,1);

		tfCidade = ComponentUtil.buildTextField("Cidade");
		gridLayout_1.addComponent(tfCidade,4,1,4,1);
 
		tfBairro = ComponentUtil.buildTextField("Bairro");
		gridLayout_1.addComponent(tfBairro,5,1,5,1);

		tfUf = ComponentUtil.buildTextField("Uf");
		gridLayout_1.addComponent(tfUf,6,1,6,1);

		cbAtendente = new ManyToOneComboField<>(ColaboradorEntity.class);
		cbAtendente.setCaption("Atendente");

		// Data de entrada
		pdfDataEntrada = ComponentUtil.buildPopupDateField("Data de entrada");

		// Data de entrada
		pdfDataEfetiv = ComponentUtil.buildPopupDateField("Data efetivação");

		tfNumeroComanda = ComponentUtil.buildTextField("Nr. comanda");
		
		if(this.parametroOs.getVendedorAtendente() != null){
			gridLayout_1.addComponent(cbAtendente,0,2,1,2);
			gridLayout_1.addComponent(pdfDataEntrada,2,2);
			gridLayout_1.addComponent(pdfDataEfetiv,3,2);
			gridLayout_1.addComponent(tfNumeroComanda,4,2);
		}else{
			gridLayout_1.addComponent(pdfDataEntrada,0,2);
			gridLayout_1.addComponent(pdfDataEfetiv,1,2);
			gridLayout_1.addComponent(tfNumeroComanda,2,2);
		}

		
		// status
		cbStatus = new ManyToOneComboField<>(StatusOsEntity.class);
		cbStatus.setCaption("Status");
		gridLayout_1.addComponent(cbStatus,0,3,1,3);

		// Situação do serviço
		cbSituacaoServico = new ManyToOneComboField<>(SituacaoServicoEntity.class);
		cbSituacaoServico.setCaption("Situação do serviço");
		gridLayout_1.addComponent(cbSituacaoServico,2,3,3,3);
		
		tfFone = ComponentUtil.buildPhoneField("Telefone");
		gridLayout_1.addComponent(tfFone,5,3,5,3);

		 
		// Placa do veículo
		cbPlaca = new ManyToOneComboField<>(CarroEntity.class);
		cbPlaca.setCaption("Placa");
		cbPlaca.addValueChangeListener(new ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				CarroEntity carro = new CarroEntity();
				carro = cbPlaca.getValue();
				if(carro.getMarca()!=null){
					tfMarca.setValue(carro.getMarca().getNome());
				}
				if(carro.getModelo()!=null){
					tfModelo.setValue(carro.getModelo().getNome());
				}
				tfAno.setValue(carro.getAno().toString());
				tfMotorizacao.setValue(carro.getMotorizacao());
				if(carro.getCombustivel()!=null){
					tfCombustivel.setValue(carro.getCombustivel().getNome());

				}
				tfChassi.setValue(carro.getChassi());
			}
			
		});
		gridLayout_1.addComponent(cbPlaca,0,4,1,4);
		

		//Km rodado\horímetro
		tfkm = ComponentUtil.buildTextField("Km rodado/horímetro");
		gridLayout_1.addComponent(tfkm,2,4);

		// Data próxima revisão
		pdfProximaRevisao = ComponentUtil.buildPopupDateField("Próx. revisão");

		cbTipoServico = new ManyToOneComboField<>(TipoServicoOsEntity.class);
		cbTipoServico.setCaption("Tipo de Serviço");

		if(this.parametroOs.getQtdDiasRevisao()){
			gridLayout_1.addComponent(pdfProximaRevisao,3,4);
			gridLayout_1.addComponent(cbTipoServico,4,4,5,4);
		}else{
			gridLayout_1.addComponent(cbTipoServico,4,4,5,4);
		}


		//Marca do veículo
		tfMarca = ComponentUtil.buildTextField("Marca");
		gridLayout_1.addComponent(tfMarca,0,5);

		tfModelo = ComponentUtil.buildTextField("Modelo");
		gridLayout_1.addComponent(tfModelo,1,5);

		tfAno = ComponentUtil.buildTextField("Ano");
		gridLayout_1.addComponent(tfAno,2,5);

		tfMotorizacao = ComponentUtil.buildTextField("Motorização");
		gridLayout_1.addComponent(tfMotorizacao,3,5);

		// Combustível do veículo
		tfCombustivel = ComponentUtil.buildTextField("Combustível");
		gridLayout_1.addComponent(tfCombustivel,4,5);

		// Chassi do veículo
		tfChassi = ComponentUtil.buildTextField("Chassi");
		gridLayout_1.addComponent(tfChassi,5,5);

		taObservacaoDefeito = ComponentUtil.buildTextArea("Observação do defeito apresentado");
		gridLayout_1.addComponent(taObservacaoDefeito, 0, 6, 2, 6);

		cbFormaPagamento = new ManyToOneComboField<>(TipoPagamento.class);
		cbFormaPagamento.setCaption("Forma Pagamento");
		gridLayout_1.addComponent(cbFormaPagamento,3,6,4,6);
		
		// Data próxima revisão
		pdfEntrega = ComponentUtil.buildPopupDateField("Data Entrega");
		gridLayout_1.addComponent(pdfEntrega,5,6);

		subForms.addTab(gridLayout_1, "Informação geral", null);
	}

	public void adicionarComponentes(VerticalLayout grid,
			List<? extends AbstractComponent> componentes) {
		for (Component c : componentes) {
			grid.addComponent(c);
		}
	}

	public GridLayout montaGridLayout(Integer colunas, Integer linhas) {
		GridLayout grid = new GridLayout(colunas, linhas);
		grid.setImmediate(false);
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(true);

		return grid;
	}

	public HorizontalLayout montaHorizontal(List<? extends Component> components) {
		HorizontalLayout grid = new HorizontalLayout();
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(true);

		for (Component c : components) {
			grid.addComponent(c);
		}

		return grid;
	}

	public VerticalLayout montaVertical(List<? extends Component> components) {
		VerticalLayout grid = new VerticalLayout();
		grid.setWidth("100.0%");
		grid.setMargin(true);
		grid.setSpacing(false);

		for (Component c : components) {
			grid.addComponent(c);
		}

		return grid;

	}

	public void buildAbaLaudoTecnico() {
		GridLayout layout = new GridLayout(8, 7);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		// fields.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);

		// tfObservacaoLaudoTecnico
		taObservacaoLaudoTecnico = new TextArea();
		taObservacaoLaudoTecnico = ComponentUtil.buildTextArea("Observação laudo técnico");
		taObservacaoLaudoTecnico.setNullRepresentation("");
		taObservacaoLaudoTecnico.setImmediate(false);
		taObservacaoLaudoTecnico.setWidth("600px");
		taObservacaoLaudoTecnico.setHeight("200px");
//		tfObservacaoLaudoTecnico.setRequired(true);
		layout.addComponent(taObservacaoLaudoTecnico, 0, 1);
		
		// tfObservacaoLaudoFerramentas
		taObservacaoLaudoFerramentas = new TextArea();
		taObservacaoLaudoFerramentas.setCaption("Observação laudo ferramentas:");
		taObservacaoLaudoFerramentas.setNullRepresentation("");
		taObservacaoLaudoFerramentas.setImmediate(false);
		taObservacaoLaudoFerramentas.setWidth("600px");
		taObservacaoLaudoFerramentas.setHeight("200px");
		layout.addComponent(taObservacaoLaudoFerramentas, 0, 2);

		subForms.addTab(layout, "Laudo técnico", null);
	}

	public void buildAbaEntradaServico() {
		TabSheet abaEntradaServico = buildEntradaServicoSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaEntradaServico);
		subForms.addTab(layout, "Entrada de serviço", null);
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildEntradaServicoSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);
		
		String[] campos = new String[] {"vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico","quantidadeDiasRetorno"};
		String[] titulos = new String[] {"Vendedor","Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico","Qtd Dias Retorno"};
		if(!this.parametroOs.getVendedorServico()){
			if(this.parametroOs.getQtdDiasRevisao()){
				campos = new String[] {"tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico","quantidadeDiasRetorno"};
				titulos = new String[] {"Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico","Qtd Dias Retorno"};
			}else{
				campos = new String[] {"tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico"};
				titulos = new String[] {"Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico"};
			}
		}else{
			if(!this.parametroOs.getQtdDiasRevisao()){
				campos = new String[] {"vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico"};
				titulos = new String[] {"Vendedor","Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico"};
			}else{
				campos = new String[] {"vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico","quantidadeDiasRetorno"};
				titulos = new String[] {"Vendedor","Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico","Qtd Dias Retorno"};
			}
		}
		 
			entradaServicoSubForm = new SubFormComponent<EntradaServicoEntity, Integer>(
					EntradaServicoEntity.class, campos, titulos
					, new String[] {"horaTrabalhada","quantidadeServico","valorSubtotal","valorDesconto","valorTotal","comissaoTecnico"}) {
				
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("vendedor".equals(propertyId)) {
							
							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ColaboradorEntity> naturezaContainer = new BeanItemContainer<>(ColaboradorEntity.class,
									controller.getVendedores());
							naturezaContainer.addNestedContainerProperty("pessoa.nome");
							comboBox.setContainerDataSource(naturezaContainer);
							comboBox.setItemCaptionPropertyId("pessoa.nome");
							return comboBox;
							
						}else if ("tecnico".equals(propertyId)) {

							
							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ColaboradorEntity> naturezaContainer = new BeanItemContainer<>(ColaboradorEntity.class,
									controller.getTecnicos());
							naturezaContainer.addNestedContainerProperty("pessoa.nome");
							comboBox.setContainerDataSource(naturezaContainer);
							comboBox.setItemCaptionPropertyId("pessoa.nome");
							return comboBox;
							
						}else if ("servico".equals(propertyId)) {
							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ServicoOsEntity> naturezaContainer = new BeanItemContainer<>(ServicoOsEntity.class,
									controller.buscarServicoOs());
							naturezaContainer.addNestedContainerProperty("nome");
							comboBox.setContainerDataSource(naturezaContainer);
							comboBox.setItemCaptionPropertyId("nome");
							return comboBox;
							 
						} else if ("horaTrabalhada".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("quantidadeServico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						} else if ("valorCobrado".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						} else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						} else if ("dataGarantia".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						} else if ("percentualTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setEnabled(false);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("comissaoTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						} else if ("quantidadeDiasRetorno".equals(propertyId)){
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}
						
						return null;
					}
					
					private BlurListener getBlurListener(final Container container, final Object itemId, final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeServico");
								Property<BigDecimal> valorCobrado = get("valorCobrado");
								Property<BigDecimal> valorSubtotal = get("valorSubtotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> percentualDesconto = get("percentualDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");
								Property<BigDecimal> valorOriginal = get("valorOriginal");
								Property<BigDecimal> horaTrabalhada = get("horaTrabalhada");
								Property<BigDecimal> percentualTecnico = get("percentualTecnico");
								Property<BigDecimal> comissaoTecnico = get("comissaoTecnico");
								Property<ServicoOsEntity> servicoProperty = getServicoOs("servico");
								ServicoOsEntity servicoOs = servicoProperty.getValue();
								Property<ColaboradorEntity> tecnicoProperty = getColaborador("tecnico");
								ColaboradorEntity colaborador = tecnicoProperty.getValue();
								
								if(servicoOs!=null){
									valorOriginal.setValue(servicoOs.getValorServico());
								}
								
								if (quantidade.getValue() != null && valorCobrado.getValue() != null) {
									BigDecimal q = BigDecimal.ZERO;
									BigDecimal hr = BigDecimal.ZERO;
									BigDecimal qt = BigDecimal.ZERO;

									if(quantidade.getValue()!=null){
										q = quantidade.getValue();
									}
									if(horaTrabalhada.getValue()!=null){
										hr = horaTrabalhada.getValue();
									}
									
									qt = q.add(hr);
									
									BigDecimal vu = valorCobrado.getValue();
									if(servicoOs.getValorMinimoServico().compareTo(vu) == 1){
										controller.mensagemErro("Valor de serviço menor que o valor mínimo permitido");
										return;
									}else{
										valorSubtotal.setValue(qt.multiply(vu));
									}
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									BigDecimal pd = BigDecimal.ZERO;
									BigDecimal vt = BigDecimal.ZERO;
									
									if(percentualDesconto.getValue()!=null){
										pd = percentualDesconto.getValue().divide(new BigDecimal(100));
									}else{
										percentualDesconto.setValue(BigDecimal.ZERO);
									}
									vt = vs.subtract(pd.multiply(vs));
									valorTotal.setValue(vt);
									
									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}
									valorTotal.setValue(vt.subtract(vd));
								}
								
								if(valorTotal.getValue()!=null){
							
									if(colaborador!=null){
										if(servicoOs.getTipoComissaoTecnico().equals("P")){
											BigDecimal pt = BigDecimal.ZERO;
											if(quantidade.getValue() != null){
												percentualTecnico.setValue(servicoOs.getValorComissaoTecnico());
												pt = percentualTecnico.getValue().divide(new BigDecimal(100));
												comissaoTecnico.setValue(pt.multiply(valorTotal.getValue()));
											}
										}else{
											if(quantidade.getValue() != null){
												BigDecimal vcs = BigDecimal.ZERO;
												vcs = servicoOs.getValorComissaoTecnico().multiply(quantidade.getValue());
												comissaoTecnico.setValue(vcs);
											}
										}
									}
									preencheTotalEntradaServicoSubForm(entradaServicoSubForm.getDados());
								}
							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<ServicoOsEntity> getServicoOs(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<ColaboradorEntity> getColaborador(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
				};
			}
			
			protected EntradaServicoEntity getNovo() {
				EntradaServicoEntity detalhe = controller.novoEntradaServico();
				return detalhe;  
			}

			@Override 
			public boolean validateItems(List<EntradaServicoEntity> items) {
				
				return true;
			}
			
			@Override
			protected void getRemoverSelecionados(List<EntradaServicoEntity> values) {
				controller.removerEntradaServico(values);
			}

		};
		sub.addTab(entradaServicoSubForm, "Entrada servico", null);

		return sub;
	}
	
	public void buildAbaVendaPeca() {
		TabSheet abaVendaPeca = buildVendaPecaSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaVendaPeca);
		subForms.addTab(layout, "Venda de peça", null);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildVendaPecaSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);

		String[] campos = new String[] {"vendedor", "tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
		String[] titulos = new String[] {"Vendedor", "Técnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		if(this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"vendedor","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Vendedor", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}else if(!this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto()){
			campos = new String[] {"produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}

		
		if(this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"vendedor","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Vendedor", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"vendedor","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Vendedor", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}

		
		vendaPecaSubForm = new SubFormComponent<VendaPecaEntity, Integer>(
				VendaPecaEntity.class, campos, titulos
				, new String[] { "valorSubtotal", "valorDesconto","valorTotal" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<ColaboradorEntity> vendedores = controller.getVendedores();
							for (ColaboradorEntity vd : vendedores) {
								combobox.addItem(vd);
							}
							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<ColaboradorEntity> tecnicos = controller.getTecnicos();
							for (ColaboradorEntity tc : tecnicos) {
								combobox.addItem(tc);
							}
							return combobox;
						}else if ("produto".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(ProdutoEntity.class,controller.buscarProdutos());

							combobox.setContainerDataSource(produtoContainer);
							combobox.setItemCaptionPropertyId("descricao");
							combobox.addBlurListener(getBlurListener(container, itemId, propertyId));
							return combobox;
						}else if("tipoPeca".equals(propertyId)){
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							combobox.addItem("GENUÍNA");
							combobox.addItem("NAO GENUÍNA");

							return combobox;
						}else if ("quantidadeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorUnitarioPago".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						}else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildPercentageField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
                        }else if ("valorCompra".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField; 
                        }

						return null;
					}
					private BlurListener getBlurListener(final Container container, final Object itemId, final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeProduto");
								Property<BigDecimal> valorUnitarioPago = get("valorUnitarioPago");
								Property<BigDecimal> valorSubtotal = get("valorSubtotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> percentualDesconto = get("percentualDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<BigDecimal> valorCompra = get("valorCompra");
								Property<ProdutoEntity> produtoProperty = getProduto("produto");
								ProdutoEntity produto = produtoProperty.getValue();

								if(produto!=null){
									valorUnitario.setValue(produto.getValorVenda());
									valorCompra.setValue(produto.getValorCompra());
								}
								
								if(quantidade.getValue() != null){
									BigDecimal q = quantidade.getValue();
									if(produto!=null){
										if(q.compareTo(produto.getQuantidadeEstoque()) == 1){
											controller.mensagemErro("Quantidade informada é maior que a estocada");
											return;
										}
									}
								}
								
								if (quantidade.getValue() != null && valorUnitarioPago.getValue() != null) {
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitarioPago.getValue();
									if(produto.getPrecoVendaMinimo().compareTo(vu) == 1){
										controller.mensagemErro("Valor de venda menor que o valor mínimo permitido");
										return;
									}else{
										valorSubtotal.setValue(q.multiply(vu));
									}
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									BigDecimal pd = BigDecimal.ZERO;
									BigDecimal vt = BigDecimal.ZERO;
									
									if(percentualDesconto.getValue()!=null){
										pd = percentualDesconto.getValue().divide(new BigDecimal(100));
									}else{
										percentualDesconto.setValue(BigDecimal.ZERO);
									}
									vt = vs.subtract(pd.multiply(vs));
									valorTotal.setValue(vt);
									
									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}
									valorTotal.setValue(vt.subtract(vd));
								}
								if(valorTotal.getValue()!=null){
									preencheTotalVendaPecaSubForm(vendaPecaSubForm.getDados());
								}
							}
							
							
							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<ProdutoEntity> getProduto(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
					
				};
			}

			protected VendaPecaEntity getNovo() {
				VendaPecaEntity detalhe = controller.novoVendaPeca();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<VendaPecaEntity> items) {
				return true;
			}

			@Override
			protected void getRemoverSelecionados(List<VendaPecaEntity> values) {
				controller.removerVendaPeca(values);
			}

		};

		this.preencheTotalVendaPecaSubForm(vendaPecaSubForm.getDados());
		sub.addTab(vendaPecaSubForm, "Venda Peça", null);

		return sub;
	}

	public void buildAbaMaterialServico() {
		TabSheet abaMaterialServico = buildMaterialServicoSubForm();
		VerticalLayout layout = montaVertical(Arrays.asList(abaMaterialServico));
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		subForms.addTab(layout, "Material de serviço", null);
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildMaterialServicoSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setSizeFull();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setImmediate(true);

		materialServicoSubForm = new SubFormComponent<MaterialServicoEntity, Integer>(
				MaterialServicoEntity.class, new String[] { "tecnico","produto","quantidadeProduto","valorUnitario","valorTotal","valorCompra"}, 
				new String[] {"Técnico", "Descrição do produto","Qtd","Valor unitário","Valor total","Valor Compra"}, 
				new String[] { "valorTotal" }) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
					 
						if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();
	
							List<ColaboradorEntity> tecnicos = controller.getTecnicos();
							for (ColaboradorEntity tc : tecnicos) {
								combobox.addItem(tc);
							}
							combobox.addBlurListener(getBlurListener(container, itemId, propertyId));
							return combobox;
						}else if ("produto".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(ProdutoEntity.class,controller.buscarProdutos());

							combobox.setContainerDataSource(produtoContainer);
							combobox.setItemCaptionPropertyId("descricao");
							return combobox;
						}else if ("quantidadeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
						} else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							return textField;
                        }else if ("valorCompra".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setEnabled(false);
							textField.addBlurListener(getBlurListener(container, itemId, propertyId));
							return textField;
                        }

						return null;
					}
					
					private BlurListener getBlurListener(final Container container, final Object itemId, final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidadeProduto");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<BigDecimal> valorTotal = get("valorTotal");
								Property<BigDecimal> valorCompra = get("valorCompra");
								Property<ProdutoEntity> produtoProperty = getProduto("produto");
								ProdutoEntity produto = produtoProperty.getValue();
 
								if(produto!=null){
									valorUnitario.setValue(produto.getValorVenda());
									valorCompra.setValue(produto.getValorCompra());
								}
								
								if(quantidade.getValue() != null){
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitario.getValue();
									if(produto!=null){
										if(q.compareTo(produto.getQuantidadeEstoque()) == 1){
											controller.mensagemErro("Quantidade informada é maior que a estocada");
											return;
										}else{
											valorTotal.setValue(q.multiply(vu));
										}
										if(valorTotal.getValue()!=null){
											preencheTotalMaterialServicoSubForm(materialServicoSubForm.getDados());
										}
									}
								}
							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
							@SuppressWarnings("unchecked")
							private Property<ProdutoEntity> getProduto(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};
					}
				};
			}

			protected MaterialServicoEntity getNovo() {
				MaterialServicoEntity detalhe = controller.novoMaterialServico();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<MaterialServicoEntity> items) {
				return true;
			}
			
			@Override
			protected void getRemoverSelecionados(List<MaterialServicoEntity> values) {
				controller.removerMaterialServico(values);
			}

		};

		sub.addTab(materialServicoSubForm, "Material Serviço", null);

		return sub;
	}

	public void buildAbaGarantia() {

		GridLayout gridLayout_1 = new GridLayout(8, 8);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);

		tfNumOsFabricante = ComponentUtil.buildTextField("Nr. OS Fabricante");
		gridLayout_1.addComponent(tfNumOsFabricante,0,1);

		tfNumNotaFiscal = ComponentUtil.buildTextField("Nr. da Nota Fiscal");
		gridLayout_1.addComponent(tfNumNotaFiscal,1,1);

		// Data próxima revisão
		pdfDataNotaFiscal = ComponentUtil.buildPopupDateField("Data nota fiscal");
		gridLayout_1.addComponent(pdfDataNotaFiscal,2,1);

		cbEquipamentoGarantia = new ManyToOneComboField<>(EquipamentoEntity.class);
		cbEquipamentoGarantia.setCaption("Equipamento");
		gridLayout_1.addComponent(cbEquipamentoGarantia, 0, 2, 1, 2);

		cbMarcaGarantia = new ManyToOneComboField<>(MarcaOsEntity.class);
		cbMarcaGarantia.setCaption("Marca");
		gridLayout_1.addComponent(cbMarcaGarantia, 2, 2, 3, 2);

		cbModeloGarantia = new ManyToOneComboField<>(ModeloOsEntity.class);
		cbModeloGarantia.setCaption("Modelo");
		gridLayout_1.addComponent(cbModeloGarantia, 4, 2, 5, 2);

		cbCorGarantia = new ManyToOneComboField<>(CorEntity.class);
		cbCorGarantia.setCaption("Cor");
		gridLayout_1.addComponent(cbCorGarantia, 6, 2, 7, 2);

		tfApelido = ComponentUtil.buildTextField("Apelido");
		gridLayout_1.addComponent(tfApelido,0,3);

		tfSerial = ComponentUtil.buildTextField("Nr. Serial");
		gridLayout_1.addComponent(tfSerial,1,3);

		
		subForms.addTab(gridLayout_1, "Garantia", null);
	}

	public void buildAbaAcessorio() {
		TabSheet abaAcessorio = buildAcessorioSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaAcessorio);
		subForms.addTab(layout, "Acessório", null);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildAcessorioSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setSizeFull();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setImmediate(true);

		acessorioOsSubForm = new SubFormComponent<AcessorioOsEntity, Integer>(
				AcessorioOsEntity.class, new String[] { "quantidadeAcessorio","acessorio","observacao"}, 
				new String[] {"Quantidade","Nome do acessório", "Observação"}) {

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						

						if ("quantidadeAcessorio".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);

							return textField;
						}else if ("acessorio".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<AcessorioEntity> acessorioContainer = new BeanItemContainer<>(AcessorioEntity.class,controller.buscarAcessorio());

							combobox.setContainerDataSource(acessorioContainer);
							combobox.setItemCaptionPropertyId("nome");
							return combobox;
						}else if ("observacao".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}
						return null;

					}
				};
			}

			protected AcessorioOsEntity getNovo() {
				AcessorioOsEntity detalhe = controller.novoAcessorioOs();
				return detalhe;
			}

			@Override
			public boolean validateItems(List<AcessorioOsEntity> items) {
				return true;
			}
			@Override
			protected void getRemoverSelecionados(List<AcessorioOsEntity> values) {
				controller.removerAcessorioOs(values);
			}

		};

		sub.addTab(acessorioOsSubForm, "Acessorio", null);

		return sub;
	}

	public void buildAbaObservacao() {

		GridLayout gridLayout_1 = new GridLayout(8, 5);
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);

		// Observação da OS
		taObservacaoOS = new TextArea();
		taObservacaoOS = ComponentUtil.buildTextArea("Observação da OS");
		taObservacaoOS.setNullRepresentation("");
		taObservacaoOS.setImmediate(false);
		taObservacaoOS.setWidth("100%");
		taObservacaoOS.setHeight("200px");
		gridLayout_1.addComponent(taObservacaoOS, 0, 1, 5,1);
		
		// Observação do que está ficando no local
		taObservacaoLocal = new TextArea();
		taObservacaoLocal.setCaption("Esta ficando no local");
		taObservacaoLocal.setNullRepresentation("");
		taObservacaoLocal.setImmediate(false);
		taObservacaoLocal.setWidth("100%");
		taObservacaoLocal.setHeight("200px");
		gridLayout_1.addComponent(taObservacaoLocal, 0, 2,5,2);
		
		subForms.addTab(gridLayout_1, "Obs", null);
	}
	
	public void buildAbaFoto() {

		gridLayoutFoto = new GridLayout(8, 8);
		gridLayoutFoto.setImmediate(false);
		gridLayoutFoto.setWidth("100.0%");
		gridLayoutFoto.setMargin(true);
		gridLayoutFoto.setSpacing(true);

		taObservacaoFoto = ComponentUtil.buildTextArea("Informação geral da foto");
		gridLayoutFoto.addComponent(taObservacaoFoto,0,1,3,1);
		
		// upArquivo 
		upArquivo = new SlowMultiFileUpload() {
					
			@Override
			protected void handleFile(File file, String fileName, String mimeType,	long length) {
						
				atualizaMiniatura(file, fileName.toLowerCase().trim(), "", 0);
						
				new Notification("Arquivo", "Arquivo enviado com sucesso",
						Notification.TYPE_HUMANIZED_MESSAGE, true).show(Page
						.getCurrent());
			}
		};
		upArquivo.setCaption("Documento");
		upArquivo.setUploadButtonCaption("Selecione o(s) arquivo(s)");
		gridLayoutFoto.addComponent(upArquivo, 0, 2);

		subForms.addTab(gridLayoutFoto, "Foto", null);
	}
	
	public void atualizaMiniatura(List<DocumentoArquivo> documentos) {
		for (DocumentoArquivo documento : documentos) {
			atualizaMiniatura(documento.getFile(), documento.getFile()
					.getName(), "", 0);
		}

	}

	public void buildAbaOsAgrupada() {
		TabSheet abaOsAgrupada = buildOsAgrupadaSubForm();
		GridLayout layout = new GridLayout(1, 1);
		layout.setImmediate(false);
		layout.setWidth("100.0%");
		layout.setHeight("100.0%");
		layout.setMargin(true);
		layout.setSpacing(true);
		layout.setSizeFull();
		layout.addComponent(abaOsAgrupada);
		subForms.addTab(layout, "OS agrupada", null);
	}
		
	@AutoGenerated
	@SuppressWarnings("serial")
	private TabSheet buildOsAgrupadaSubForm() {
		// common part: create layout
		TabSheet sub = new TabSheet();
		sub.setWidth("100.0%");
		sub.setHeight("100.0%");
		sub.setSizeFull();
		sub.setImmediate(true);
//		osAgrupadaSubForm = new SubFormComponent<OrdemServico, Integer>(OrdemServico.class, new String[] { "id", "informacaoGeral.dataEntrada","informacaoGeral.dataEfetivacao", 
 //           "produto", "servico","valorDesconto", "valorTotalOs", "garantia.equipamento","garantia.marca", "garantia.modelo", "garantia.modelo" },
//	new String[] { "Nr. OS", "Data", "Efetivação","Produto", "Serviço", "Desconto", "Total","Equipamento", "Marca", "Modelo",
//			"Serial" }, new String[] {"valorTotal" }) {

		osAgrupadaSubForm = new SubFormComponent<OrdemServicoEntity, Integer>(OrdemServicoEntity.class, new String[] { "id"},
				new String[] {"Nr. OS"}, new String[] {"valorTotal" }) {

			@Override
			protected void adicionarBotoes(Table table) {

			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
					
						if ("id".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						}else if("ordemServico".equals(propertyId)){
							ComboBox combobox = ComponentUtil.buildComboBox(null);
//							BeanItemContainer<InformacaoGeral> infoContainer = new BeanItemContainer<>(InformacaoGeral.class,controller.buscarInformacaoGeral());

//							combobox.setContainerDataSource(infoContainer);
							combobox.setItemCaptionPropertyId("dataEntrada");

							combobox.setReadOnly(true);
							return combobox;
							
//						}else if ("informacaoGeral".equals(propertyId)) {
//								TextField infoGeralText = ComponentUtil.buildTextField(null);
//
//								infoGeralText.setConverter(new Converter<String, InformacaoGeral>() {
//
//									/**
//									 * 
//									 */
//									private static final long serialVersionUID = 1L;
//
//									@Override
//									public InformacaoGeral convertToModel(String value, Class<? extends InformacaoGeral> targetType, Locale locale)
//											throws com.vaadin.data.util.converter.Converter.ConversionException {
//										return null;
//									}
//
//									@Override
//									public Class<InformacaoGeral> getModelType() {
//										return InformacaoGeral.class;
//									}
//
//									@Override
//									public Class<String> getPresentationType() {
//										return String.class;
//									}
//
//									@Override
//									public String convertToPresentation(
//											InformacaoGeral value,
//											Class<? extends String> targetType,
//											Locale locale)
//											throws com.vaadin.data.util.converter.Converter.ConversionException {
//										return null;
//									}
//								});
//
//								infoGeralText.setReadOnly(true);
//								return infoGeralText;
//
						}						
						return null;
					}
				};
			}

			@Override
			public boolean validateItems(List<OrdemServicoEntity> items) {
				return false;
			}

		};

		sub.addTab(osAgrupadaSubForm, "O.S agrupada", null);

		return sub;
	}
		
	public void buildAbaInformacaoFinanceira() {

		TabSheet finForms = new TabSheet();
		finForms.setWidth("100.0%");
		finForms.setHeight("100.0%");
		finForms.setSizeFull();
		finForms.setImmediate(true);

		GridLayout gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setRows(12);
		gridLayout_1.setColumns(5);
		
		lblTotalPeca = new Label();
		lblTotalPeca.setCaption("Total de peças:");
		lblTotalPeca.setHeight("-1px");
		gridLayout_1.addComponent(lblTotalPeca, 0, 1,0,1);
		
		// Total de peças
		tfTotalPeca = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfTotalPeca, 1, 1,1,1);

		lblLucroPeca = new Label();
		lblLucroPeca.setCaption("Total lucro de peças:");
		lblLucroPeca.setHeight("-1px");
		gridLayout_1.addComponent(lblLucroPeca, 0, 2,0,2);

		// Total lucro de peças
		tfLucroPeca = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfLucroPeca, 1, 2,1,2);

		lblTotalServico = new Label();
		lblTotalServico.setCaption("Total de serviços:");
		lblTotalServico.setHeight("-1px");
		gridLayout_1.addComponent(lblTotalServico, 0, 3,0,3);
		
		// Total de serviço
		tfTotalServico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfTotalServico, 1, 3,1,3);


		// Total lucro serviço
		lblLucroServico = new Label();
		lblLucroServico.setCaption("Total lucro de serviços:");
		lblLucroServico.setHeight("-1px");
		gridLayout_1.addComponent(lblLucroServico, 0, 4,0,4);
		
		tfLucroServico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfLucroServico, 1, 4,1,4);


		// comissão paga ao técnico
		lblComissaoTecnico = new Label();
		lblComissaoTecnico.setCaption("Comissão paga ao Técnico:");
		lblComissaoTecnico.setHeight("-1px");
		gridLayout_1.addComponent(lblComissaoTecnico, 0, 5,0,5);
		
		tfComissaoTecnico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfComissaoTecnico, 1, 5,1,5);
		
		// Comissão paga ao vendedor
		lblComissaoVendedor = new Label();
		lblComissaoVendedor.setCaption("Comissão paga ao vendedor:");
		lblComissaoVendedor.setHeight("-1px");
		gridLayout_1.addComponent(lblComissaoVendedor, 0,6,0,6);
		
		tfComissaoVendedor = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfComissaoVendedor, 1, 6,1,6);

		// Comissão paga ao atendente
		lblComissaoAtendente = new Label();
		lblComissaoAtendente.setCaption("Comissão paga ao atendente:");
		lblComissaoAtendente.setHeight("-1px");
		gridLayout_1.addComponent(lblComissaoAtendente, 0, 7,0,7);
		
		tfComissaoAtendente = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfComissaoAtendente, 1, 7,1,7);

		// Desconto
        lblDesconto = new Label();
        lblDesconto.setCaption("Desconto:");
        lblDesconto.setHeight("-1px");
		gridLayout_1.addComponent(lblDesconto, 0, 8,0,8);

		tfDesconto = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfDesconto, 1, 8,1,8);

		// Lucro parcial de serviço
		lblLucroParcialServico = new Label();
		lblLucroParcialServico.setCaption("Lucro parcial do serviço:");
		lblLucroParcialServico.setHeight("-1px");
		gridLayout_1.addComponent(lblLucroParcialServico, 0, 9,0,9);
		
		tfLucroParcialServico = ComponentUtil.buildCurrencyField(null);
		gridLayout_1.addComponent(tfLucroParcialServico, 1, 9,1,9);

		btnEfetivacao = new Button();
		btnEfetivacao.setCaption("Efetivar OS");
		gridLayout_1.addComponent(btnEfetivacao, 0, 11,0,11);

		finForms.addTab(gridLayout_1, "Informação geral", null);
		finForms.addTab(buildEntradaServicoFinanceiraSubForm(), "Detalhe do serviço", null);
		finForms.addTab(buildVendaPecaFinanceiraSubForm(), "Detalhe do produto", null);
		subForms.addTab(finForms, "Informação financeira", null);
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEntradaServicoFinanceiraSubForm() {
		VerticalLayout entradaSevicoLayout = new VerticalLayout();
		entradaSevicoLayout.setImmediate(false);
		entradaSevicoLayout.setSizeFull();
		entradaSevicoLayout.setMargin(false);
		entradaSevicoLayout.setSpacing(true);

		String[] campos = new String[] {"vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico","quantidadeDiasRetorno"};
		String[] titulos = new String[] {"Vendedor","Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico","Qtd Dias Retorno"};
		if(!this.parametroOs.getVendedorServico()){
			if(this.parametroOs.getQtdDiasRevisao()){
				campos = new String[] {"tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico","quantidadeDiasRetorno"};
				titulos = new String[] {"Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico","Qtd Dias Retorno"};
			}else{
				campos = new String[] {"tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico"};
				titulos = new String[] {"Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico"};
			}
		}else{
			if(!this.parametroOs.getQtdDiasRevisao()){
				campos = new String[] {"vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico"};
				titulos = new String[] {"Vendedor","Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico"};
			}else{
				campos = new String[] {"vendedor","tecnico","servico","horaTrabalhada","quantidadeServico","valorOriginal","valorCobrado","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","dataGarantia","percentualTecnico","comissaoTecnico","quantidadeDiasRetorno"};
				titulos = new String[] {"Vendedor","Técnico","Serviço","Hr.","Qtd","Valor Original","Valor Feito","Sub total","Desconto %","Desconto R$", "Valor Total","Garantia","Técnico %","Comissão Técnico","Qtd Dias Retorno"};
			}
		}
		
		entradaServicoFinanceiraSubForm = new SubFormComponent<EntradaServicoEntity, Integer>(
				EntradaServicoEntity.class, campos, titulos
				) {

			@Override
			protected void adicionarBotoes(Table table) {
			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<ColaboradorEntity> vendedores = controller.getVendedores();
							for (ColaboradorEntity vd : vendedores) {
								combobox.addItem(vd);
							}
							combobox.setReadOnly(true);
							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<ColaboradorEntity> tecnicos = controller.getTecnicos();
							for (ColaboradorEntity tc : tecnicos) {
								combobox.addItem(tc);
							}

							combobox.setReadOnly(true);
							return combobox;
						}else if ("servico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ServicoOsEntity> servicoContainer = new BeanItemContainer<>(ServicoOsEntity.class,controller.buscarServicoOs());

							combobox.setContainerDataSource(servicoContainer);
							combobox.setItemCaptionPropertyId("nome");

							combobox.setReadOnly(true);
							return combobox;
							 
						} else if ("horaTrabalhada".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("quantidadeServico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorCobrado".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("dataGarantia".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							popupDateField.setReadOnly(true);
							return popupDateField;
						} else if ("percentualTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("comissaoTecnico".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencyField(null);
							textField.setReadOnly(true);
							return textField;
						}
						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<EntradaServicoEntity> items) {
				return true;
			}
		};
		entradaSevicoLayout.addComponent(this.entradaServicoFinanceiraSubForm);
		entradaSevicoLayout.setExpandRatio(entradaServicoFinanceiraSubForm, 1);
		return entradaSevicoLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildVendaPecaFinanceiraSubForm() {

		VerticalLayout vendaPecaLayout = new VerticalLayout();
		vendaPecaLayout.setImmediate(false);
		vendaPecaLayout.setSizeFull();
		vendaPecaLayout.setMargin(false);
		vendaPecaLayout.setSpacing(true);
		
		String[] campos = new String[] {"vendedor", "tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
		String[] titulos = new String[] {"Vendedor", "Técnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		if(this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"vendedor","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Vendedor", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}else if(!this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto()){
			campos = new String[] {"produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}

		
		if(this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"vendedor","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Vendedor", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"vendedor","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Vendedor", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}else if(!this.parametroOs.getVendedorProduto() && this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"tecnico","produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Tecnico", "Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && !this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal"};
			titulos = new String[] {"Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total"};
		}else if(!this.parametroOs.getVendedorProduto() && !this.parametroOs.getTecnicoProduto() && this.parametroOs.getValorPagoPeca()){
			campos = new String[] {"produto","tipoPeca","quantidadeProduto","valorUnitario","valorUnitarioPago","valorSubtotal","percentualDesconto","valorDesconto","valorTotal","valorCompra"};
			titulos = new String[] {"Descrição produto","Tipo","Qtd", "Valor venda", "Valor vendido","Sub total", "Desconto %", "Valor desconto", "Valor Total","Valor Compra"};
		}
		
		vendaPecaFinanceiraSubForm = new SubFormComponent<VendaPecaEntity, Integer>(
				VendaPecaEntity.class, campos, titulos
				) {
			@Override
			protected void adicionarBotoes(Table table) {
			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("vendedor".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();
							
							List<ColaboradorEntity> vendedores = controller.getVendedores();
							for (ColaboradorEntity vd : vendedores) {
								combobox.addItem(vd);
							}
							combobox.setReadOnly(true);
							return combobox;
						}else if ("tecnico".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							List<ColaboradorEntity> tecnicos = controller.getTecnicos();
							for (ColaboradorEntity tc : tecnicos) {
								combobox.addItem(tc);
							}
							combobox.setReadOnly(true);

							return combobox;
						}else if ("produto".equals(propertyId)) {
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(ProdutoEntity.class,controller.buscarProdutos());

							combobox.setContainerDataSource(produtoContainer);
							combobox.setItemCaptionPropertyId("descricao");
							combobox.setReadOnly(true);
							return combobox;
						}else if("tipoPeca".equals(propertyId)){
							ComboBox combobox = ComponentUtil.buildComboBox(null);
							combobox.removeAllItems();

							combobox.addItem("GENUÍNA");
							combobox.addItem("NAO GENUÍNA");
							combobox.setReadOnly(true);

							return combobox;
						}else if ("quantidadeProduto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorUnitario".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorUnitarioPago".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.setReadOnly(true);
							return textField;
						} else if ("valorSubtotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("percentualDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildPercentageField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorDesconto".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.setReadOnly(true);
							return textField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							textField.setReadOnly(true);
							return textField;
						}
						return null;
					}
				};
			}

			@Override
			public boolean validateItems(List<VendaPecaEntity> items) {
				return true;
			}
		};

		vendaPecaLayout.addComponent(this.vendaPecaFinanceiraSubForm);
		vendaPecaLayout.setExpandRatio(vendaPecaFinanceiraSubForm, 1);

		return vendaPecaLayout;
	}
	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		horizontalLayout_1 = new HorizontalLayout();
		horizontalLayout_1.setImmediate(false);
		horizontalLayout_1.setWidth("-1px");
		horizontalLayout_1.setHeight("100.0%");
		horizontalLayout_1.setMargin(false);
		horizontalLayout_1.setSpacing(true);

		chbPgtoUnico = new CheckBox("Pagamento Único");
		chbPgtoUnico.addValueChangeListener(new ValueChangeListener() {
		    public void valueChange(ValueChangeEvent event) {
                boolean value = (Boolean) event.getProperty().getValue();
                if(value == true){
                    optTipoDinheiro.setVisible(true);
                    subFormEfetivacao.setVisible(false);
                }else{
                    optTipoDinheiro.setVisible(false);
                    subFormEfetivacao.setVisible(true);
                }
		    }
		});
		horizontalLayout_1.addComponent(chbPgtoUnico);

		// tipo de comissão do técnico
		optTipoDinheiro= new OptionGroup();
		optTipoDinheiro.setStyleName("horizontal");
		optTipoDinheiro.setCaption("Forma de pagamento único");
		optTipoDinheiro.setImmediate(false);
		optTipoDinheiro.addItem("1");
		optTipoDinheiro.setItemCaption("1", "Dinheiro");
		optTipoDinheiro.addItem("2");
		optTipoDinheiro.setItemCaption("2", "Cheque");
		optTipoDinheiro.addItem("3");
		optTipoDinheiro.setItemCaption("3", "Cartão");
		optTipoDinheiro.addItem("4");
		optTipoDinheiro.setItemCaption("4", "Boleto");
		optTipoDinheiro.addItem("5");
		optTipoDinheiro.setItemCaption("5", "Duplicata");
		optTipoDinheiro.addItem("6");
		optTipoDinheiro.setItemCaption("6", "Carnê");
		optTipoDinheiro.addItem("7");
		optTipoDinheiro.setItemCaption("7", "Vale");
		optTipoDinheiro.addItem("8");
		optTipoDinheiro.setItemCaption("8", "Cobrança bancária");
		optTipoDinheiro.addItem("9");
		optTipoDinheiro.setItemCaption("9", "Carteira");
		optTipoDinheiro.setVisible(false);
		horizontalLayout_1.addComponent(optTipoDinheiro);
		
		return horizontalLayout_1;
	}
	
	public GridLayout buildAbaEfetivacaoOs() {
		TabSheet finForms = new TabSheet();
		finForms.setWidth("100.0%");
		finForms.setHeight("100.0%");
		finForms.setSizeFull();
		finForms.setImmediate(false);

		GridLayout gridLayout_1 = new GridLayout();
		gridLayout_1.setImmediate(false);
		gridLayout_1.setWidth("100.0%");
		gridLayout_1.setMargin(true);
		gridLayout_1.setSpacing(true);
		gridLayout_1.setRows(14);
		gridLayout_1.setColumns(7);
		
		// horizontalLayout_1
		horizontalLayout_1 = buildHorizontalLayout_1();
		gridLayout_1.addComponent(horizontalLayout_1, 0, 0,6,0);

		lblDinheiro = new Label();
		lblDinheiro.setCaption("Dinheiro:");
		lblDinheiro.setHeight("-1px");
		gridLayout_1.addComponent(lblDinheiro, 0, 1,0,1);

		// Total em dinheiro
		tfDinheiro = ComponentUtil.buildNumberField(null);
		tfDinheiro.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 7193164095496582979L;

			public void blur(BlurEvent event) {
				if(totalRestante !=null){
				totalGeral = (BigDecimal) tfTotais.getConvertedValue();
				dinheiro = (BigDecimal) tfDinheiro.getConvertedValue();

				if(dinheiro == null) dinheiro = BigDecimal.ZERO;
				else if (cheque == null) cheque = BigDecimal.ZERO;
				else if (cartao == null) cartao = BigDecimal.ZERO;
				else if (boleto == null) boleto = BigDecimal.ZERO;
				else if (duplicata == null) duplicata = BigDecimal.ZERO;
				else if (carne == null) carne = BigDecimal.ZERO;
				else if (vale == null) vale = BigDecimal.ZERO;
				else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
				else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
				totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
				tfTotalRestante.setValue(totalRestante.toString());
			}
			if(totalRestante.doubleValue() >= 0){
				troco = totalRestante;
			}else{
				troco = BigDecimal.ZERO;
			}
			tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfDinheiro, 1, 1,1,1);

		lblCheque = new Label();
		lblCheque.setCaption("Cheque:");
		lblCheque.setHeight("-1px");
		gridLayout_1.addComponent(lblCheque, 0, 2,0,2);

		// Total em cheque
		tfCheque = ComponentUtil.buildNumberField(null);
		tfCheque.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 3940783102372378576L;

			public void blur(BlurEvent event) {
				if(totalRestante !=null){
				totalGeral = (BigDecimal) tfTotais.getConvertedValue();
				cheque = (BigDecimal) tfCheque.getConvertedValue();

				if(dinheiro == null) dinheiro = BigDecimal.ZERO;
				else if (cheque == null) cheque = BigDecimal.ZERO;
				else if (cartao == null) cartao = BigDecimal.ZERO;
				else if (boleto == null) boleto = BigDecimal.ZERO;
				else if (duplicata == null) duplicata = BigDecimal.ZERO;
				else if (carne == null) carne = BigDecimal.ZERO;
				else if (vale == null) vale = BigDecimal.ZERO;
				else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
				else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
				totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
				tfTotalRestante.setValue(totalRestante.toString());
			}
			if(totalRestante.doubleValue() >= 0){
				troco = totalRestante;
			}else{
				troco = BigDecimal.ZERO;
			}
			tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfCheque, 1, 2,1,2);

		// Parcela em cheque
		tfQtParcelaCheque = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaCheque, 2, 2,2,2);


		lblCartao = new Label();
		lblCartao.setCaption("Cartão:");
		lblCartao.setHeight("-1px");
		gridLayout_1.addComponent(lblCartao, 0, 3,0,3);

		// Total em cartão
		tfCartao = ComponentUtil.buildNumberField(null);
		tfCartao.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 1L;
			public void blur(BlurEvent event) {
				if(totalRestante !=null){
					totalGeral = (BigDecimal) tfTotais.getConvertedValue();
					cartao = (BigDecimal) tfCartao.getConvertedValue();
	
					if(dinheiro == null) dinheiro = BigDecimal.ZERO;
					else if (cheque == null) cheque = BigDecimal.ZERO;
					else if (cartao == null) cartao = BigDecimal.ZERO;
					else if (boleto == null) boleto = BigDecimal.ZERO;
					else if (duplicata == null) duplicata = BigDecimal.ZERO;
					else if (carne == null) carne = BigDecimal.ZERO;
					else if (vale == null) vale = BigDecimal.ZERO;
					else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
					else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
					totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
					tfTotalRestante.setValue(totalRestante.toString());
				}
				if(totalRestante.doubleValue() >= 0){
					troco = totalRestante;
				}else{
					troco = BigDecimal.ZERO;
				}
				tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfCartao, 1, 3,1,3);

		// Parcela cartao
		tfQtParcelaCartao = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaCartao, 2, 3,2,3);

		lblCarne = new Label();
		lblCarne.setCaption("Carnê:");
		lblCarne.setHeight("-1px");
		gridLayout_1.addComponent(lblCarne, 0, 4,0,4);

		// Total em carne
		tfCarne = ComponentUtil.buildNumberField(null);
		tfCarne.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 1L;
			public void blur(BlurEvent event) {
				if(totalRestante !=null){
					totalGeral = (BigDecimal) tfTotais.getConvertedValue();
					carne = (BigDecimal) tfCarne.getConvertedValue();
	
					if(dinheiro == null) dinheiro = BigDecimal.ZERO;
					else if (cheque == null) cheque = BigDecimal.ZERO;
					else if (cartao == null) cartao = BigDecimal.ZERO;
					else if (boleto == null) boleto = BigDecimal.ZERO;
					else if (duplicata == null) duplicata = BigDecimal.ZERO;
					else if (carne == null) carne = BigDecimal.ZERO;
					else if (vale == null) vale = BigDecimal.ZERO;
					else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
					else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
					totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
					tfTotalRestante.setValue(totalRestante.toString());
				}
				if(totalRestante.doubleValue() >= 0){
					troco = totalRestante;
				}else{
					troco = BigDecimal.ZERO;
				}
				tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfCarne, 1, 4,1,4);

		// Parcela carnê
		tfQtParcelaCarne = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaCarne, 2, 4,2,4);

		lblBoleto = new Label();
		lblBoleto.setCaption("Boleto:");
		lblBoleto.setHeight("-1px");
		gridLayout_1.addComponent(lblBoleto, 0, 5,0,5);

		// Total boleto
		tfBoleto = ComponentUtil.buildNumberField(null);
		tfBoleto.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 1L;
			public void blur(BlurEvent event) {
				if(totalRestante !=null){
					totalGeral = (BigDecimal) tfTotais.getConvertedValue();
					boleto = (BigDecimal) tfBoleto.getConvertedValue();
	
					if(dinheiro == null) dinheiro = BigDecimal.ZERO;
					else if (cheque == null) cheque = BigDecimal.ZERO;
					else if (cartao == null) cartao = BigDecimal.ZERO;
					else if (boleto == null) boleto = BigDecimal.ZERO;
					else if (duplicata == null) duplicata = BigDecimal.ZERO;
					else if (carne == null) carne = BigDecimal.ZERO;
					else if (vale == null) vale = BigDecimal.ZERO;
					else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
					else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
					totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
					tfTotalRestante.setValue(totalRestante.toString());
				}
				if(totalRestante.doubleValue() >= 0){
					troco = totalRestante;
				}else{
					troco = BigDecimal.ZERO;
				}
				tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfBoleto, 1, 5,1,5);

		tfQtParcelaBoleto = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaBoleto, 2, 5,2,5);

		//Duplicata
		lblDuplicata = new Label();
		lblDuplicata.setCaption("Duplicata:");
		lblDuplicata.setHeight("-1px");
		gridLayout_1.addComponent(lblDuplicata, 4, 1,4,1);

		// Total em duplicata
		tfDuplicata = ComponentUtil.buildNumberField(null);
		tfDuplicata.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 3940783102372378576L;

			public void blur(BlurEvent event) {
				if(totalRestante !=null){
				totalGeral = (BigDecimal) tfTotais.getConvertedValue();
				duplicata = (BigDecimal) tfDuplicata.getConvertedValue();

				if(dinheiro == null) dinheiro = BigDecimal.ZERO;
				else if (cheque == null) cheque = BigDecimal.ZERO;
				else if (cartao == null) cartao = BigDecimal.ZERO;
				else if (boleto == null) boleto = BigDecimal.ZERO;
				else if (duplicata == null) duplicata = BigDecimal.ZERO;
				else if (carne == null) carne = BigDecimal.ZERO;
				else if (vale == null) vale = BigDecimal.ZERO;
				else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
				else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
				totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
				tfTotalRestante.setValue(totalRestante.toString());
			}
			if(totalRestante.doubleValue() >= 0){
				troco = totalRestante;
			}else{
				troco = BigDecimal.ZERO;
			}
			tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfDuplicata, 5, 1,5,1);

		tfQtParcelaDuplicata = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaDuplicata, 6, 1,6,1);
		
		//Vale
		lblVale = new Label();
		lblVale.setCaption("Vale:");
		lblVale.setHeight("-1px");
		gridLayout_1.addComponent(lblVale, 4, 2,4,2);

		// Total em duplicata
		tfVale = ComponentUtil.buildNumberField(null);
		tfVale.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 3940783102372378576L;

			public void blur(BlurEvent event) {
				if(totalRestante !=null){
				totalGeral = (BigDecimal) tfTotais.getConvertedValue();
				vale = (BigDecimal) tfVale.getConvertedValue();

				if(dinheiro == null) dinheiro = BigDecimal.ZERO;
				else if (cheque == null) cheque = BigDecimal.ZERO;
				else if (cartao == null) cartao = BigDecimal.ZERO;
				else if (boleto == null) boleto = BigDecimal.ZERO;
				else if (duplicata == null) duplicata = BigDecimal.ZERO;
				else if (carne == null) carne = BigDecimal.ZERO;
				else if (vale == null) vale = BigDecimal.ZERO;
				else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
				else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
				totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
				tfTotalRestante.setValue(totalRestante.toString());
			}
			if(totalRestante.doubleValue() >= 0){
				troco = totalRestante;
			}else{
				troco = BigDecimal.ZERO;
			}
			tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfVale, 5, 2,5,2);

		tfQtParcelaVale = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaVale, 6, 2,6,2);
		
		//Cobrança bancaria
		lblCobrancaBancaria = new Label();
		lblCobrancaBancaria.setCaption("Cobrança bancária");
		lblCobrancaBancaria.setHeight("-1px");
		gridLayout_1.addComponent(lblCobrancaBancaria, 4, 3,4,3);

		// Total em Cobrança bancaria
		tfCobrancaBancaria = ComponentUtil.buildNumberField(null);
		tfCobrancaBancaria.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 3940783102372378576L;

			public void blur(BlurEvent event) {
				if(totalRestante !=null){
				totalGeral = (BigDecimal) tfTotais.getConvertedValue();
				cobrancaBancaria = (BigDecimal) tfCobrancaBancaria.getConvertedValue();

				if(dinheiro == null) dinheiro = BigDecimal.ZERO;
				else if (cheque == null) cheque = BigDecimal.ZERO;
				else if (cartao == null) cartao = BigDecimal.ZERO;
				else if (boleto == null) boleto = BigDecimal.ZERO;
				else if (duplicata == null) duplicata = BigDecimal.ZERO;
				else if (carne == null) carne = BigDecimal.ZERO;
				else if (vale == null) vale = BigDecimal.ZERO;
				else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
				else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
				totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
				tfTotalRestante.setValue(totalRestante.toString());
			}
			if(totalRestante.doubleValue() >= 0){
				troco = totalRestante;
			}else{
				troco = BigDecimal.ZERO;
			}
			tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfCobrancaBancaria, 5, 3,5,3);

		tfQtParcelaCobrancaBancaria = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaCobrancaBancaria, 6, 3,6,3);
		
		//Cobrança carteira
		lblCobrancaCarteira = new Label();
		lblCobrancaCarteira.setCaption("Cobrança carteira:");
		lblCobrancaCarteira.setHeight("-1px");
		gridLayout_1.addComponent(lblCobrancaCarteira, 4, 4,4,4);

		// Total em Cobrança bancaria
		tfCobrancaCarteira = ComponentUtil.buildNumberField(null);
		tfCobrancaCarteira.addBlurListener(new BlurListener() {
			private static final long serialVersionUID = 3940783102372378576L;

			public void blur(BlurEvent event) {
				if(totalRestante !=null){
				totalGeral = (BigDecimal) tfTotais.getConvertedValue();
				cobrancaCarteira = (BigDecimal) tfCobrancaCarteira.getConvertedValue();

				if(dinheiro == null) dinheiro = BigDecimal.ZERO;
				else if (cheque == null) cheque = BigDecimal.ZERO;
				else if (cartao == null) cartao = BigDecimal.ZERO;
				else if (boleto == null) boleto = BigDecimal.ZERO;
				else if (duplicata == null) duplicata = BigDecimal.ZERO;
				else if (carne == null) carne = BigDecimal.ZERO;
				else if (vale == null) vale = BigDecimal.ZERO;
				else if (cobrancaBancaria == null) cobrancaBancaria = BigDecimal.ZERO;
				else if (cobrancaCarteira == null) cobrancaCarteira = BigDecimal.ZERO;
				totalRestante = totalGeral.subtract(dinheiro).subtract(cheque).subtract(boleto).subtract(cartao).subtract(duplicata).subtract(carne).subtract(vale).subtract(cobrancaBancaria).subtract(cobrancaCarteira).multiply(new BigDecimal(-1.0));
				tfTotalRestante.setValue(totalRestante.toString());
			}
			if(totalRestante.doubleValue() >= 0){
				troco = totalRestante;
			}else{
				troco = BigDecimal.ZERO;
			}
			tfTroco.setValue(troco.toString());
            }
		});
		gridLayout_1.addComponent(tfCobrancaCarteira, 5, 4,5,4);

		tfQtParcelaCobrancaCarteira = ComponentUtil.buildNumberField(null);
		gridLayout_1.addComponent(tfQtParcelaCobrancaCarteira, 6, 4,6,4);
		
		lblTotais = new Label();
		lblTotais.setCaption("Totais:");
		lblTotais.setHeight("-1px");
		gridLayout_1.addComponent(lblTotais, 0, 11,0,11);

		String tot="";
		if(this.tfTotais!=null){
			tot = this.tfTotais.getValue();
		}
		tfTotais = ComponentUtil.buildNumberField(null);
		//tfTotais.setEnabled(false);
		tfTotais.setValue(tot);
		gridLayout_1.addComponent(tfTotais, 1, 11,1,11);

		tfTotalRestante = ComponentUtil.buildNumberField(null);
		//tfTotais.setEnabled(false);
		tfTotalRestante.setValue(tot);
		gridLayout_1.addComponent(tfTotalRestante, 2, 11,2,11);

		lblTroco = new Label();
		lblTroco.setCaption("Troco:");
		lblTroco.setHeight("-1px");
		gridLayout_1.addComponent(lblTroco, 0, 12,0,12);

		tfTroco = ComponentUtil.buildNumberField(null);
//		tfTroco.setEnabled(false);btnEfe
		
		gridLayout_1.addComponent(tfTroco, 2, 12,2,12);

		
		
		btnFinalizar = new Button();
		btnFinalizar.setCaption("Finalizar");
		btnFinalizar.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;
			public void buttonClick(ClickEvent event) {
				try {
					controller.gerarParcelasOs();
				} catch (Exception e) {
					e.printStackTrace();
				}
			 }
		});
		gridLayout_1.addComponent(btnFinalizar, 4, 12,4,12);

		btnCancelar = new Button();
		btnCancelar.setCaption("Cancelar");
		btnCancelar.addClickListener(new Button.ClickListener() {
			private static final long serialVersionUID = 1L;
			public void buttonClick(ClickEvent event) {
				try {
//					controller.getCurrentBean().setItensOrdemServicoEfetivacao(new ArrayList<OrdemServicoEfetivacaoEntity>());
					controller.removeModal();
				} catch (Exception e) {
					e.printStackTrace();
				}
			 }
		});
		gridLayout_1.addComponent(btnCancelar, 5, 12,5,12);

		VerticalLayout verticalSubFormEfetivacao = new VerticalLayout();
		verticalSubFormEfetivacao.setImmediate(false);
		verticalSubFormEfetivacao.setSizeFull();
		verticalSubFormEfetivacao.setMargin(false);
		verticalSubFormEfetivacao.setSpacing(true);

		subFormEfetivacao = new TabSheet();
		subFormEfetivacao.setImmediate(true);
		subFormEfetivacao.setSizeFull();

		subFormEfetivacao.addTab(buildEfetivacaoChequeSubForm(), "Cheque", null);
		subFormEfetivacao.addTab(buildEfetivacaoCartaoSubForm(), "Cartão", null);
		subFormEfetivacao.addTab(buildEfetivacaoCarneSubForm(), "Carnê", null);
		subFormEfetivacao.addTab(buildEfetivacaoBoletoSubForm(), "Boleto", null);
		subFormEfetivacao.addTab(buildEfetivacaoDuplicataSubForm(), "Duplicata", null);
		subFormEfetivacao.addTab(buildEfetivacaoValeSubForm(), "Vale", null);
		subFormEfetivacao.addTab(buildEfetivacaoCobrancaBancariaSubForm(), "Cobrança bancária", null);
		subFormEfetivacao.addTab(buildEfetivacaoCobrancaCarteiraSubForm(), "Cobrança carteira", null);

		verticalSubFormEfetivacao.addComponent(subFormEfetivacao);
		gridLayout_1.addComponent(verticalSubFormEfetivacao,0,13,6,13);
		verticalSubFormEfetivacao.setExpandRatio(subFormEfetivacao,1);
		
		return gridLayout_1;
	}

	public GridLayout buildAbaEfetivacaoOsFinanceiro(OrdemServicoEntity currentBean) {
		TabSheet finForms = new TabSheet();
		finForms.setWidth("100.0%");
		finForms.setHeight("100.0%");
		finForms.setSizeFull();
		finForms.setImmediate(false);

		GridLayout gridLayout_2 = new GridLayout();
		gridLayout_2.setImmediate(false);
		gridLayout_2.setWidth("100.0%");
		gridLayout_2.setMargin(true);
		gridLayout_2.setSpacing(true);
		gridLayout_2.setRows(14);
		gridLayout_2.setColumns(7);
		
		lblTotais = new Label();
		lblTotais.setCaption("Total O.S:");
		lblTotais.setHeight("-1px");
		gridLayout_2.addComponent(lblTotais, 0, 2,0,2);

		tfTotais = ComponentUtil.buildNumberField(null);
		tfTotais.setConvertedValue(currentBean.getValorTotalOs());
		gridLayout_2.addComponent(tfTotais, 1, 2,1,2);

		
		VerticalLayout verticalSubFormEfetivacao = new VerticalLayout();
		verticalSubFormEfetivacao.setImmediate(false);
		verticalSubFormEfetivacao.setSizeFull();
		verticalSubFormEfetivacao.setMargin(false);
		verticalSubFormEfetivacao.setSpacing(true);

		subFormEfetivacaoFinanceiro = new TabSheet();
		subFormEfetivacaoFinanceiro.setImmediate(true);
		subFormEfetivacaoFinanceiro.setSizeFull();

		subFormEfetivacaoFinanceiro.addTab(buildEfetivacaoGeralFinanceiroSubForm(), "Geral", null);
		subFormEfetivacaoFinanceiro.addTab(buildEfetivacaoTituloFinanceiroSubForm(), "Titulo", null);
		subFormEfetivacaoFinanceiro.addTab(buildEfetivacaoChequeSubForm(), "Cheque", null);
		subFormEfetivacaoFinanceiro.addTab(buildEfetivacaoBoletoSubForm(), "Obs.", null);

		verticalSubFormEfetivacao.addComponent(subFormEfetivacaoFinanceiro);
		gridLayout_2.addComponent(verticalSubFormEfetivacao,0,4,6,4);
		verticalSubFormEfetivacao.setExpandRatio(subFormEfetivacaoFinanceiro,1);
		
		return gridLayout_2;
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	public Component buildEfetivacaoChequeSubForm() {
		VerticalLayout efetivacaoChequeLayout = new VerticalLayout();
		efetivacaoChequeLayout.setImmediate(false);
		efetivacaoChequeLayout.setSizeFull();
		efetivacaoChequeLayout.setMargin(false);
		efetivacaoChequeLayout.setSpacing(true);

		this.efetivacaoChequeSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "banco","agencia","contaCorrente","numeroCheque","correntista","dias","dataVencimento","valorTotal"}, 
				new String[] {"Banco","Agencia","Nr. conta","Nr. cheque","Correntista","Dias","Vencimento","Valor"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {

			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,Object itemId, Object propertyId,Component uiContext) {
						
						if ("banco".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("agencia".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("contaCorrente".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("numeroCheque".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("correntista".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};
		efetivacaoChequeLayout.addComponent(this.efetivacaoChequeSubForm);
		efetivacaoChequeLayout.setExpandRatio(efetivacaoChequeSubForm, 1);

		return efetivacaoChequeLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoCartaoSubForm() {
		VerticalLayout efetivacaoCartaoLayout = new VerticalLayout();
		efetivacaoCartaoLayout.setImmediate(false);
		efetivacaoCartaoLayout.setSizeFull();
		efetivacaoCartaoLayout.setMargin(false);
		efetivacaoCartaoLayout.setSpacing(true);
		efetivacaoCartaoSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "bandeira","titular","numeroCartao","codigoSeguranca","dataValidade","dias","dataVencimento","valorTotal","comprovanteVenda"}, 
				new String[] {"Bandeira","Titular","Nr. Cartão","Código Seg.","Validade","Dias","Vencimento","Valor","Comprovante Venda"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {
			}
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {

						if ("bandeira".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("titular".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("numeroCartao".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("codigoSeguranca".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataValidade".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}else if ("comprovanteVenda".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}
						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};
		efetivacaoCartaoLayout.addComponent(this.efetivacaoCartaoSubForm);
		efetivacaoCartaoLayout.setExpandRatio(efetivacaoCartaoSubForm, 1);

		return efetivacaoCartaoLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoCarneSubForm() {
		VerticalLayout efetivacaoCarneLayout = new VerticalLayout();
		setSizeFull();
		
		efetivacaoCarneSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","dias","dataVencimento"}, 
				new String[] { "Número","Original","Numero NF","Valor","Dias","Vencimento"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {
			}
			
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}

						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};
		efetivacaoCarneLayout.addComponent(this.efetivacaoCarneSubForm);
		efetivacaoCarneLayout.setExpandRatio(efetivacaoCarneSubForm, 1);

		return efetivacaoCarneLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoBoletoSubForm() {
		VerticalLayout efetivacaoBoletoLayout = new VerticalLayout();
		setSizeFull();

		efetivacaoBoletoSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","dias","dataVencimento"}, 
				new String[] { "Número","Original","Numero NF","Valor","Dias","Vencimento"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {

			}
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
			}

			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};
		efetivacaoBoletoLayout.addComponent(this.efetivacaoBoletoSubForm);
		efetivacaoBoletoLayout.setExpandRatio(this.efetivacaoBoletoSubForm, 1);

		return efetivacaoBoletoLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoDuplicataSubForm() {
		VerticalLayout efetivacaoDuplicataLayout = new VerticalLayout();
		efetivacaoDuplicataLayout.setSizeFull();
		
		efetivacaoDuplicataSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","dias","dataVencimento"}, 
				new String[] { "Número","Original","Numero NF","Valor","Dias","Vencimento"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {
			}
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};

		efetivacaoDuplicataLayout.addComponent(this.efetivacaoDuplicataSubForm);
		efetivacaoDuplicataLayout.setExpandRatio(this.efetivacaoDuplicataSubForm, 1);

		return efetivacaoDuplicataLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoValeSubForm() {

		VerticalLayout efetivacaoValeLayout = new VerticalLayout();
		efetivacaoValeLayout.setSizeFull();
		
		efetivacaoValeSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","dias","dataVencimento"}, 
				new String[] { "Número","Original","Numero NF","Valor","Dias","Vencimento"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {

			}
			

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
				
			}

			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};

		efetivacaoValeLayout.addComponent(this.efetivacaoValeSubForm);
		efetivacaoValeLayout.setExpandRatio(this.efetivacaoValeSubForm, 1);

		return efetivacaoValeLayout;
	}
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoCobrancaBancariaSubForm() {

		VerticalLayout efetivacaoCobrancaBancariaLayout = new VerticalLayout();
		setSizeFull();
		
		efetivacaoCobrancaBancariaSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","dias","dataVencimento"}, 
				new String[] { "Número","Original","Numero NF","Valor","Dias","Vencimento"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {

			}
			

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
				
			}

			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};

		efetivacaoCobrancaBancariaLayout.addComponent(this.efetivacaoCobrancaBancariaSubForm);
		efetivacaoCobrancaBancariaLayout.setExpandRatio(this.efetivacaoCobrancaBancariaSubForm, 1);

		return efetivacaoCobrancaBancariaLayout;
	}
	
	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoCobrancaCarteiraSubForm() {

		VerticalLayout efetivacaoCobrancaCarteiraLayout = new VerticalLayout();
		efetivacaoCobrancaCarteiraLayout.setSizeFull();
		
		efetivacaoCobrancaCarteiraSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","dias","dataVencimento"}, 
				new String[] { "Número","Original","Numero NF","Valor","Dias","Vencimento"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {
			}
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dias".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
				
			}

			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};

		efetivacaoCobrancaCarteiraLayout.addComponent(this.efetivacaoCobrancaCarteiraSubForm);
		efetivacaoCobrancaCarteiraLayout.setExpandRatio(this.efetivacaoCobrancaCarteiraSubForm, 1);

		return efetivacaoCobrancaCarteiraLayout;
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	public Component buildEfetivacaoGeralFinanceiroSubForm() {
		VerticalLayout efetivacaoFinanceiroLayout = new VerticalLayout();
		efetivacaoFinanceiroLayout.setImmediate(false);
		efetivacaoFinanceiroLayout.setSizeFull();
		efetivacaoFinanceiroLayout.setMargin(false);
		efetivacaoFinanceiroLayout.setSpacing(true);

		this.efetivacaoGeralFinanceiroSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "tipo","quantidade","valorTotal"}, 
				new String[] {"Tipo","Quantidade","Valor"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {

			}

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,Object itemId, Object propertyId,Component uiContext) {
						
						if ("tipo".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("quantidade".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}
						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};
		efetivacaoFinanceiroLayout.addComponent(efetivacaoGeralFinanceiroSubForm);
		efetivacaoFinanceiroLayout.setExpandRatio(efetivacaoGeralFinanceiroSubForm, 1);

		return efetivacaoFinanceiroLayout;
	}

	@AutoGenerated
	@SuppressWarnings("serial")
	private Component buildEfetivacaoTituloFinanceiroSubForm() {
		VerticalLayout efetivacaoTituloFinanceiroLayout = new VerticalLayout();
		setSizeFull();
		
		efetivacaoTituloFinanceiroSubForm = new SubFormComponent<OrdemServicoEfetivacaoEntity, Integer>(
				OrdemServicoEfetivacaoEntity.class, new String[] { "numeroDocumento","numeroOriginal","numeroNotaFiscal","valorTotal","tipo","dataVencimento","bandeira"}, 
				new String[] { "Número","Original","Numero NF","Valor","Tipo","Vencimento","Bandeira"}
				) {

			@Override
			protected void adicionarBotoes(Table table) {
			}
			
			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {
					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						
						if ("numeroDocumento".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroOriginal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("numeroNotaFiscal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						}else if ("tipo".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}else if ("dataVencimento".equals(propertyId)) {
							PopupDateField popupDateField = ComponentUtil.buildPopupDateField(null);
							return popupDateField;
						}else if ("valorTotal".equals(propertyId)) {
							TextField textField = ComponentUtil.buildCurrencysField(null);
							return textField;
						}else if ("bandeira".equals(propertyId)) {
							TextField textField = ComponentUtil.buildTextField(null);
							return textField;
						}

						return null;
					}
				};
			}
			@Override
			public boolean validateItems(List<OrdemServicoEfetivacaoEntity> items) {
				return true;
			}
		};
		efetivacaoTituloFinanceiroLayout.addComponent(efetivacaoTituloFinanceiroSubForm);
		efetivacaoTituloFinanceiroLayout.setExpandRatio(efetivacaoTituloFinanceiroSubForm, 1);

		return efetivacaoTituloFinanceiroLayout;
	}

	public void preencheBean(OrdemServicoEntity currentBean) {
		if(!cbCliente.getValue().equals("")){
			currentBean.setCliente(cbCliente.getValue());
		}else{
			
		}
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasChequeSubForm() {
		return efetivacaoChequeSubForm;
	}

	public void setParcelasChequeSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoChequeSubForm) {
		this.efetivacaoChequeSubForm = efetivacaoChequeSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasCartaoSubForm() {
		return efetivacaoCartaoSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasCarneSubForm() {
		return efetivacaoCarneSubForm;
	}
	
	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasBoletoSubForm() {
		return efetivacaoBoletoSubForm;
	}
	
	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasDinheiroSubForm() {
		return efetivacaoDinheiroSubForm;
	}

	public void setParcelasDinheiroSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoDinheiroSubForm) {
		this.efetivacaoDinheiroSubForm = efetivacaoDinheiroSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasDuplicataSubForm() {
		return efetivacaoDuplicataSubForm;
	}

	public void setParcelasDuplicataSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoDuplicataSubForm) {
		this.efetivacaoDuplicataSubForm = efetivacaoDuplicataSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasValeSubForm() {
		return efetivacaoValeSubForm;
	}

	public void setParcelasValeSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoValeSubForm) {
		this.efetivacaoValeSubForm = efetivacaoValeSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasCobrancaBancariaSubForm() {
		return efetivacaoCobrancaBancariaSubForm;
	}

	public void setParcelasCobrancaBancariaSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCobrancaBancariaSubForm) {
		this.efetivacaoCobrancaBancariaSubForm = efetivacaoCobrancaBancariaSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getParcelasCobrancaCarteiraSubForm() {
		return efetivacaoCobrancaCarteiraSubForm;
	}

	public void setParcelasCobrancaCarteiraSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCobrancaCarteiraSubForm) {
		this.efetivacaoCobrancaCarteiraSubForm = efetivacaoCobrancaCarteiraSubForm;
	}
	
	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getEfetivacaoGeralFinanceiroSubForm() {
		return efetivacaoGeralFinanceiroSubForm;
	}

	public void setEfetivacaoGeralFinanceiroSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoGeralFinanceiroSubForm) {
		this.efetivacaoGeralFinanceiroSubForm = efetivacaoGeralFinanceiroSubForm;
	}

	@SuppressWarnings("unchecked")
	public void preencheGeralFinanceiroSubForm(List<OrdemServicoEfetivacaoEntity> listOrdemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listGeral = new ArrayList<OrdemServicoEfetivacaoEntity>();
		listGeral = controller.montaFinanceiro(listOrdemServicoEfetivacao);
		
		efetivacaoGeralFinanceiroSubForm.fillWith(listGeral);
	}

	public void preencheTituloFinanceiroSubForm(List<OrdemServicoEfetivacaoEntity> listOrdemServicoEfetivacao) {
		for(OrdemServicoEfetivacaoEntity e:listOrdemServicoEfetivacao){
			e.setTipo(e.getTipoEfetivacao().getDescricao());
		}
		efetivacaoTituloFinanceiroSubForm.fillWith(listOrdemServicoEfetivacao);
	}

	public void preencheDinheiro(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
			if(os.getTipoEfetivacao().getCodigo() == 1){
				tfDinheiro.setConvertedValue(os.getValorTotal());
			}
		}
	}

	public void preencheParcelasChequeSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listCheque = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 2){
					listCheque.add(os);
				}
			}
			efetivacaoChequeSubForm.fillWith(listCheque);
		}
	}

	public void preencheParcelasCarneSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listCarne = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 6){
					listCarne.add(os);
				}
			}
			efetivacaoCarneSubForm.fillWith(listCarne);
		}
	}

	public void preencheParcelasCartaoSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listCartao = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 3){
					listCartao.add(os);
				}
			}
			efetivacaoCartaoSubForm.fillWith(listCartao);
		}
	}

	public void preencheParcelasBoletoSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listBoleto = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 4){
					listBoleto.add(os);
				}
			}
			efetivacaoBoletoSubForm.fillWith(listBoleto);
		}
	}

	public void preencheParcelasDuplicataSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listDuplicata = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 5){
					listDuplicata.add(os);
				}
			}
			efetivacaoDuplicataSubForm.fillWith(listDuplicata);
		}
	}

	public void preencheParcelasValeSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listVale = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 7){
					listVale.add(os);
				}
			}
			efetivacaoValeSubForm.fillWith(listVale);
		}
	}

	public void preencheParcelasCobrancaBancariaSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listCobrancaBancaria = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 8){
					listCobrancaBancaria.add(os);
				}
			}
			efetivacaoCobrancaBancariaSubForm.fillWith(listCobrancaBancaria);
		}
	}

	public void preencheParcelasCobrancaCarteiraSubForm(List<OrdemServicoEfetivacaoEntity> ordemServicoEfetivacao) {
		List<OrdemServicoEfetivacaoEntity> listCarteira = new ArrayList<OrdemServicoEfetivacaoEntity>();
		if(ordemServicoEfetivacao.size() > 0){
			for(OrdemServicoEfetivacaoEntity os : ordemServicoEfetivacao){
				if(os.getTipoEfetivacao().getCodigo() == 9){
					listCarteira.add(os);
				}
			}
			efetivacaoCobrancaCarteiraSubForm.fillWith(listCarteira);
		}
	}

	public enum Tipo {

		GENUINA("GENUINA", "G"), NAOGENUINA("NAO GENUINA", "N");

		private Tipo(String label, String codigo) {
			this.label = label;
			this.codigo = codigo;
		}

		private String label;
		private String codigo;

		public static Tipo getTipo(String codigo) {
			for (Tipo e : Tipo.values()) {
				if (e.getCodigo().equalsIgnoreCase(codigo)) {
					return e;
				}
			}

			return null;
		}
		public String getCodigo() {
			return codigo;
		}

		public String getLabel() {
			return label;
		}

		@Override
		public String toString() {
			return label;
		}
	}

	@SuppressWarnings("deprecation")
	public void atualizaMiniatura(File arquivo, String nomeArquivo, String acao, int contador) {
  
		 if(arquivo.length() > 0){
		 
				List<String> extensao= new ArrayList<String>();
				extensao.add(".exe");
				extensao.add(".bat");
				extensao.add(".bin");
				
				if(sources == null){
					
					nPanel = new Panel();
					nPanel.setImmediate(true);
					nPanel.setHeight("350px");
					nPanel.setWidth("100%");
					nPanel.setScrollTop(1600);
				    sources = new GridLayout(12,100);
				    nPanel.setContent(sources);
				    gridLayoutFoto.addComponent(nPanel, 0, 3, 5,3);
		           
				}else{
					
					if(acao.equals("A") && contador == 1){
						this.gridLayoutFoto.removeComponent(nPanel);
						this.sources.markAsDirtyRecursive();
						this.gridLayoutFoto.markAsDirtyRecursive();
						this.mainLayout.markAsDirtyRecursive();
						this.markAsDirtyRecursive();
						
						nPanel = new Panel();
						nPanel.setImmediate(true);
						nPanel.setHeight("350px");
						nPanel.setWidth("100%");
						nPanel.setScrollTop(1600);
					    sources = new GridLayout(12,100);
					    nPanel.setContent(sources);
					    gridLayoutFoto.addComponent(nPanel, 0, 3, 5, 3);
					}
					
				}
				
		
				if (!extensao.contains(getExtensao(nomeArquivo))) {
					
		            nomeArquivoVisualizacao = nomeArquivo;
				
					if(!this.idDocumento.equals("")){
						 nomeArquivoVisualizacao = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa + "/" + this.idDocumento+"/"+ nomeArquivoVisualizacao;
					}
					else{
						nomeArquivoVisualizacao = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa + "/" + nomeArquivoVisualizacao;
					}
					
					try {
						File tmp = gravarArquivo(nomeArquivoVisualizacao,
								Util.lerBytesArquivo(arquivo));
						nomeArquivoVisualizacao = tmp.getAbsolutePath();
						
						Embedded image = new Embedded();
						if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("doc") != -1){
							image.setSource(new ThemeResource("img/word.png"));
						}else if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("xls") != -1){
							image.setSource(new ThemeResource("img/excel.png"));
						}else if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("pdf") != -1){
							image.setSource(new ThemeResource("img/pdf.png"));
							
						}else if(getExtensao(nomeArquivo).toLowerCase().trim().indexOf("txt") != -1){
							image.setSource(new ThemeResource("img/txtfile.png"));
						}else{
							image.setSource(new FileResource(tmp));
						}
						
						image.setWidth("110px");
						image.setHeight("90px");
					
						image.setId(nomeArquivoVisualizacao);
						
						image.addListener(new ClickListener(){
						    @Override
						    public void click(com.vaadin.event.MouseEvents.ClickEvent event){
						    	
						    	VerticalLayout mainLayoutViewer = new VerticalLayout();
						    	mainLayoutViewer.setSizeFull();
						    	mainLayoutViewer.setMargin(true);
						    	mainLayoutViewer.setSpacing(true);
						        
						         imageViewer.setSizeFull();
						         imageViewer.setImages(createImageList());
						         imageViewer.setAnimationEnabled(false);
						         imageViewer.setSideImageRelativeWidth(0.7f);
		
						         imageViewer.addListener(new ImageViewer.ImageSelectionListener() {
									
									@Override
									public void imageSelected(ImageSelectedEvent e) {
										 if (e.getSelectedImageIndex() >= 0) {
						                     selectedImage.setValue(String.valueOf(e
						                             .getSelectedImageIndex()));
						                 } else {
						                     selectedImage.setValue("-");
						                 }
										
									}
							     });
						         HorizontalLayout hl = new HorizontalLayout();
						         hl.setSizeUndefined();
						         hl.setMargin(false);
						         hl.setSpacing(true);
						         mainLayoutViewer.addComponent(hl);
						         mainLayoutViewer.addComponent(imageViewer);
						         mainLayoutViewer.setExpandRatio(imageViewer, 1);
		
						         Layout ctrls = createControls();
						         mainLayoutViewer.addComponent(ctrls);
						         mainLayoutViewer.setComponentAlignment(ctrls, Alignment.BOTTOM_CENTER);
						         
						         VerticalLayout layout = new VerticalLayout();
						         layout.setMargin(true);
						         layout.setSpacing(true);
						        
						         com.vaadin.ui.Button close = new com.vaadin.ui.Button("Fechar", new com.vaadin.ui.Button.ClickListener() {
						             public void buttonClick(ClickEvent event) {
						             	subwindow.close();
						             }
						         });
						         close.setClickShortcut(KeyCode.ESCAPE, null);
						         layout.addComponent(close);
						         layout.setComponentAlignment(close, Alignment.BOTTOM_RIGHT);
						         mainLayoutViewer.addComponent(layout);
						        
						         imageViewer.setCenterImageIndex(0);
						         imageViewer.focus();
						         subwindow.setContent(mainLayoutViewer);
						         subwindow.center();
						         UI.getCurrent().addWindow(subwindow);
						    }
					    });
						
						
						// Wrap it in a Drag and Drop Wrapper
						DragAndDropWrapper wrapper = new DragAndDropWrapper(image);
						wrapper.setSizeUndefined(); // Shrink to fit
						// Enable dragging the wrapper
						wrapper.setDragStartMode(DragStartMode.WRAPPER);
						
		
						linkDonwload = new Link(nomeArquivo, new FileResource(tmp));
						linkDonwload.setTargetName("_blank");
						
						//GridLayout gridImage = new GridLayout(2,2);
						//gridImage.addComponent(wrapper, 0, 1);
						//gridImage.addComponent(linkDonwload, 1, 2);
									           
						//sources.addComponent(gridImage);
						
						sources.addComponent(wrapper);
						sources.addComponent(linkDonwload);
						
						listArquivos.add(nomeArquivoVisualizacao);
				
						
						
					} catch (Exception e) {
					}		
					
					this.markAsDirtyRecursive();
					this.requestRepaintAll();
					
					
					
				}
		 }else{
			 try{
				 arquivo.delete();
			 }catch(Exception e){}
		 }
	}

	public PopupDateField getPdfDataEntrada() {
		return pdfDataEntrada;
	}

	public void setPdfDataEntrada(PopupDateField pdfDataEntrada) {
		this.pdfDataEntrada = pdfDataEntrada;
	}

	public PopupDateField getPdfDataEfetiv() {
		return pdfDataEfetiv;
	}

	public void setPdfDataEfetiv(PopupDateField pdfDataEfetiv) {
		this.pdfDataEfetiv = pdfDataEfetiv;
	}

	public void setCbCliente(ManyToOneComboField<ClienteEntity> cbCliente) {
		this.cbCliente = cbCliente;
	}

	public void setCbPlaca(ManyToOneComboField<CarroEntity> cbPlaca) {
		this.cbPlaca = cbPlaca;
	}

	public void setCbRevenda(ManyToOneComboField<RevendaEntity> cbRevenda) {
		this.cbRevenda = cbRevenda;
	}

	public void setCbEquipamento(ManyToOneComboField<EquipamentoEntity> cbEquipamento) {
		this.cbEquipamento = cbEquipamento;
	}

	public void setCbMarca(ManyToOneComboField<MarcaOsEntity> cbMarca) {
		this.cbMarca = cbMarca;
	}

	public void setCbModelo(ManyToOneComboField<ModeloOsEntity> cbModelo) {
		this.cbModelo = cbModelo;
	}

	public void setCbCor(ManyToOneComboField<CorEntity> cbCor) {
		this.cbCor = cbCor;
	}

	public void setCbStatus(ManyToOneComboField<StatusOsEntity> cbStatus) {
		this.cbStatus = cbStatus;
	}

	public void setCbSituacaoServico(
			ManyToOneComboField<SituacaoServicoEntity> cbSituacaoServico) {
		this.cbSituacaoServico = cbSituacaoServico;
	}

	public void setCbAtendente(ManyToOneComboField<ColaboradorEntity> cbAtendente) {
		this.cbAtendente = cbAtendente;
	}

	public void setCbTipoServico(ManyToOneComboField<TipoServicoOsEntity> cbTipoServico) {
		this.cbTipoServico = cbTipoServico;
	}

	public void setCbFormaPagamento(ManyToOneComboField<TipoPagamento> cbFormaPagamento) {
		this.cbFormaPagamento = cbFormaPagamento;
	}

	public TextField getTfNumeroOS() {
		return tfNumeroOS;
	}

	public void setTfNumeroOS(TextField tfNumeroOS) {
		this.tfNumeroOS = tfNumeroOS;
	}

	public TextField getTfNumeroComanda() {
		return tfNumeroComanda;
	}

	public void setTfNumeroComanda(TextField tfNumeroComanda) {
		this.tfNumeroComanda = tfNumeroComanda;
	}

	public TextField getTfCliente() {
		return tfCliente;
	}

	public void setTfCliente(TextField tfCliente) {
		this.tfCliente = tfCliente;
	}

	public TextField getTfNumOsFabricante() {
		return tfNumOsFabricante;
	}

	public void setTfNumOsFabricante(TextField tfNumOsFabricante) {
		this.tfNumOsFabricante = tfNumOsFabricante;
	}

	public TextField getTfNumNotaFiscal() {
		return tfNumNotaFiscal;
	}

	public void setTfNumNotaFiscal(TextField tfNumNotaFiscal) {
		this.tfNumNotaFiscal = tfNumNotaFiscal;
	}

	public TextField getTfApelido() {
		return tfApelido;
	}

	public void setTfApelido(TextField tfApelido) {
		this.tfApelido = tfApelido;
	}

	public TextField getTfSerial() {
		return tfSerial;
	}

	public void setTfSerial(TextField tfSerial) {
		this.tfSerial = tfSerial;
	}
	
	public ManyToOneComboField<RevendaEntity> getCbRevenda() {
		return cbRevenda;
	}

	public ManyToOneComboField<EquipamentoEntity> getCbEquipamento() {
		return cbEquipamento;
	}

	public ManyToOneComboField<MarcaOsEntity> getCbMarca() {
		return cbMarca;
	}

	public ManyToOneComboField<ModeloOsEntity> getCbModelo() {
		return cbModelo;
	}

	public ManyToOneComboField<CorEntity> getCbCor() {
		return cbCor;
	}

	public TextField getTfLucroPeca() {
		return tfLucroPeca;
	}

	public void setTfLucroPeca(TextField tfLucroPeca) {
		this.tfLucroPeca = tfLucroPeca;
	}

	public TextField getTfTotalServico() {
		return tfTotalServico;
	}

	public void setTfTotalServico(TextField tfTotalServico) {
		this.tfTotalServico = tfTotalServico;
	}

	public TextField getTfLucroServico() {
		return tfLucroServico;
	}

	public void setTfLucroServico(TextField tfLucroServico) {
		this.tfLucroServico = tfLucroServico;
	}

	public TextField getTfComissaoTecnico() {
		return tfComissaoTecnico;
	}

	public void setTfComissaoTecnico(TextField tfComissaoTecnico) {
		this.tfComissaoTecnico = tfComissaoTecnico;
	}

	public TextField getTfComissaoVendedor() {
		return tfComissaoVendedor;
	}

	public void setTfComissaoVendedor(TextField tfComissaoVendedor) {
		this.tfComissaoVendedor = tfComissaoVendedor;
	}

	public TextField getTfComissaoAtendente() {
		return tfComissaoAtendente;
	}

	public void setTfComissaoAtendente(TextField tfComissaoAtendente) {
		this.tfComissaoAtendente = tfComissaoAtendente;
	}

	public TextField getTfDesconto() {
		return tfDesconto;
	}

	public void setTfDesconto(TextField tfDesconto) {
		this.tfDesconto = tfDesconto;
	}

	public TextField getTfLucroParcialServico() {
		return tfLucroParcialServico;
	}

	public void setTfLucroParcialServico(TextField tfLucroParcialServico) {
		this.tfLucroParcialServico = tfLucroParcialServico;
	}

	public TextArea getTaObservacaoLaudoTecnico() {
		return taObservacaoLaudoTecnico;
	}

	public void setTaObservacaoLaudoTecnico(TextArea taObservacaoLaudoTecnico) {
		this.taObservacaoLaudoTecnico = taObservacaoLaudoTecnico;
	}

	public TextArea getTaObservacaoLaudoFerramentas() {
		return taObservacaoLaudoFerramentas;
	}

	public void setTaObservacaoLaudoFerramentas(
			TextArea taObservacaoLaudoFerramentas) {
		this.taObservacaoLaudoFerramentas = taObservacaoLaudoFerramentas;
	}

	public TextArea getTaTermoGarantia() {
		return taTermoGarantia;
	}

	public void setTaTermoGarantia(TextArea taTermoGarantia) {
		this.taTermoGarantia = taTermoGarantia;
	}

	public TextArea getTaObservacaoLocal() {
		return taObservacaoLocal;
	}

	public void setTaObservacaoLocal(TextArea taObservacaoLocal) {
		this.taObservacaoLocal = taObservacaoLocal;
	}

	public TextArea getTaObservacaoOS() {
		return taObservacaoOS;
	}

	public void setTaObservacaoOS(TextArea taObservacaoOS) {
		this.taObservacaoOS = taObservacaoOS;
	}

	public ManyToOneComboField<ClienteEntity> getCbCliente() {
		return cbCliente;
	}

	public TextField getTfTotalServicoGeral() {
		return tfTotalServicoGeral;
	}

	public void setTfTotalServicoGeral(TextField tfTotalServicoGeral) {
		this.tfTotalServicoGeral = tfTotalServicoGeral;
	}

	public TextField getTfTotalProdutoGeral() {
		return tfTotalProdutoGeral;
	}

	public void setTfTotalProdutoGeral(TextField tfTotalProdutoGeral) {
		this.tfTotalProdutoGeral = tfTotalProdutoGeral;
	}

	public TextField getTfTotalFreteGeral() {
		return tfTotalFreteGeral;
	}

	public void setTfTotalFreteGeral(TextField tfTotalFreteGeral) {
		this.tfTotalFreteGeral = tfTotalFreteGeral;
	}

	public TextField getTfTotalOutrosGeral() {
		return tfTotalOutrosGeral;
	}

	public void setTfTotalOutrosGeral(TextField tfTotalOutrosGeral) {
		this.tfTotalOutrosGeral = tfTotalOutrosGeral;
	}

	public TextField getTfDescontoGeral() {
		return tfDescontoGeral;
	}

	public void setTfDescontoGeral(TextField tfDescontoGeral) {
		this.tfDescontoGeral = tfDescontoGeral;
	}

	public TextField getTfTotalGeral() {
		return tfTotalGeral;
	}

	public void setTfTotalGeral(TextField tfTotalGeral) {
		this.tfTotalGeral = tfTotalGeral;
	}

	public PopupDateField getPdfProximaRevisao() {
		return pdfProximaRevisao;
	}

	public void setPdfProximaRevisao(PopupDateField pdfProximaRevisao) {
		this.pdfProximaRevisao = pdfProximaRevisao;
	}

	public PopupDateField getPdfEntrega() {
		return pdfEntrega;
	}

	public void setPdfEntrega(PopupDateField pdfEntrega) {
		this.pdfEntrega = pdfEntrega;
	}

	public TextField getTfRazao() {
		return tfRazao;
	}

	public void setTfRazao(TextField tfRazao) {
		this.tfRazao = tfRazao;
	}

	public TextField getTfEndereco() {
		return tfEndereco;
	}

	public void setTfEndereco(TextField tfEndereco) {
		this.tfEndereco = tfEndereco;
	}

	public TextField getTfCidade() {
		return tfCidade;
	}

	public void setTfCidade(TextField tfCidade) {
		this.tfCidade = tfCidade;
	}

	public TextField getTfBairro() {
		return tfBairro;
	}

	public void setTfBairro(TextField tfBairro) {
		this.tfBairro = tfBairro;
	}

	public TextField getTfUf() {
		return tfUf;
	}

	public void setTfUf(TextField tfUf) {
		this.tfUf = tfUf;
	}

	public TextField getTfFone() {
		return tfFone;
	}

	public void setTfFone(TextField tfFone) {
		this.tfFone = tfFone;
	}

	public TextField getTfkm() {
		return tfkm;
	}

	public void setTfkm(TextField tfkm) {
		this.tfkm = tfkm;
	}

	public TextField getTfData() {
		return tfData;
	}

	public void setTfData(TextField tfData) {
		this.tfData = tfData;
	}

	public TextField getTfMarca() {
		return tfMarca;
	}

	public void setTfMarca(TextField tfMarca) {
		this.tfMarca = tfMarca;
	}

	public TextField getTfModelo() {
		return tfModelo;
	}

	public void setTfModelo(TextField tfModelo) {
		this.tfModelo = tfModelo;
	}

	public TextField getTfAno() {
		return tfAno;
	}

	public void setTfAno(TextField tfAno) {
		this.tfAno = tfAno;
	}

	public TextField getTfMotorizacao() {
		return tfMotorizacao;
	}

	public void setTfMotorizacao(TextField tfMotorizacao) {
		this.tfMotorizacao = tfMotorizacao;
	}

	public TextField getTfCombustivel() {
		return tfCombustivel;
	}

	public void setTfCombustivel(TextField tfCombustivel) {
		this.tfCombustivel = tfCombustivel;
	}

	public TextField getTfChassi() {
		return tfChassi;
	}

	public void setTfChassi(TextField tfChassi) {
		this.tfChassi = tfChassi;
	}

	public TextArea getTaObservacaoDefeito() {
		return taObservacaoDefeito;
	}

	public void setTaObservacaoDefeito(TextArea taObservacaoDefeito) {
		this.taObservacaoDefeito = taObservacaoDefeito;
	}
	
	public ManyToOneComboField<CarroEntity> getCbPlaca() {
		return cbPlaca;
	}

	public ManyToOneComboField<StatusOsEntity> getCbStatus() {
		return cbStatus;
	}

	public ManyToOneComboField<SituacaoServicoEntity> getCbSituacaoServico() {
		return cbSituacaoServico;
	}

	public ManyToOneComboField<ColaboradorEntity> getCbAtendente() {
		return cbAtendente;
	}

	public ManyToOneComboField<TipoServicoOsEntity> getCbTipoServico() {
		return cbTipoServico;
	}

	public ManyToOneComboField<TipoPagamento> getCbFormaPagamento() {
		return cbFormaPagamento;
	}
	
    public SlowMultiFileUpload getUpArquivo() {
		return upArquivo;
	}

	public void setUpArquivo(SlowMultiFileUpload upArquivo) {
		this.upArquivo = upArquivo;
	}

	public PopupDateField getPdfDataNotaFiscal() {
		return pdfDataNotaFiscal;
	}

	public void setPdfDataNotaFiscal(PopupDateField pdfDataNotaFiscal) {
		this.pdfDataNotaFiscal = pdfDataNotaFiscal;
	}

	public ManyToOneComboField<EquipamentoEntity> getCbEquipamentoGarantia() {
		return cbEquipamentoGarantia;
	}

	public void setCbEquipamentoGarantia(ManyToOneComboField<EquipamentoEntity> cbEquipamentoGarantia) {
		this.cbEquipamentoGarantia = cbEquipamentoGarantia;
	}

	public ManyToOneComboField<MarcaOsEntity> getCbMarcaGarantia() {
		return cbMarcaGarantia;
	}

	public void setCbMarcaGarantia(ManyToOneComboField<MarcaOsEntity> cbMarcaGarantia) {
		this.cbMarcaGarantia = cbMarcaGarantia;
	}

	public ManyToOneComboField<ModeloOsEntity> getCbModeloGarantia() {
		return cbModeloGarantia;
	}

	public void setCbModeloGarantia(ManyToOneComboField<ModeloOsEntity> cbModeloGarantia) {
		this.cbModeloGarantia = cbModeloGarantia;
	}

	public ManyToOneComboField<CorEntity> getCbCorGarantia() {
		return cbCorGarantia;
	}

	public void setCbCorGarantia(ManyToOneComboField<CorEntity> cbCorGarantia) {
		this.cbCorGarantia = cbCorGarantia;
	}

	public GridLayout getGridLayoutFoto() {
		return gridLayoutFoto;
	}

	public void setGridLayoutFoto(GridLayout gridLayoutFoto) {
		this.gridLayoutFoto = gridLayoutFoto;
	}

	public String getIdEmpresa() {
		return idEmpresa;
	}

	public void setIdEmpresa(String idEmpresa) {
		this.idEmpresa = idEmpresa;
	}

	public String getIdDocumento() {
		return idDocumento;
	}

	public void setIdDocumento(String idDocumento) {
		this.idDocumento = idDocumento;
	}

    public Button getBtnEfetivacao() {
		return btnEfetivacao;
	}

	public void setBtnEfetivacao(Button btnEfetivacao) {
		this.btnEfetivacao = btnEfetivacao;
	}

	public List<String> getListArquivos() {
		return listArquivos;
	}

	public void setListArquivos(List<String> listArquivos) {
		this.listArquivos = listArquivos;
	}

	public SubFormComponent<EntradaServicoEntity, Integer> getEntradaServicoSubForm() {
		return entradaServicoSubForm;
	}

	public void setEntradaServicoSubForm(SubFormComponent<EntradaServicoEntity, Integer> entradaServicoSubForm) {
		this.entradaServicoSubForm = entradaServicoSubForm;
	}

	public SubFormComponent<EntradaServicoEntity, Integer> getEntradaServicoFinanceiraSubForm() {
		return entradaServicoFinanceiraSubForm;
	}

	public void setEntradaServicoFinanceiraSubForm(SubFormComponent<EntradaServicoEntity, Integer> entradaServicoFinanceiraSubForm) {
		this.entradaServicoFinanceiraSubForm = entradaServicoFinanceiraSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getEfetivacaoChequeSubForm() {
		return efetivacaoChequeSubForm;
	}

	public void setEfetivacaoChequeSubForm(SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoChequeSubForm) {
		this.efetivacaoChequeSubForm = efetivacaoChequeSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getEfetivacaoCartaoSubForm() {
		return efetivacaoCartaoSubForm;
	}

	public void setEfetivacaoCartaoSubForm(
			SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCartaoSubForm) {
		this.efetivacaoCartaoSubForm = efetivacaoCartaoSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getEfetivacaoCarneSubForm() {
		return efetivacaoCarneSubForm;
	}

	public void setEfetivacaoCarneSubForm(
			SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoCarneSubForm) {
		this.efetivacaoCarneSubForm = efetivacaoCarneSubForm;
	}

	public SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> getEfetivacaoBoletoSubForm() {
		return efetivacaoBoletoSubForm;
	}

	public void setEfetivacaoBoletoSubForm(
			SubFormComponent<OrdemServicoEfetivacaoEntity, Integer> efetivacaoBoletoSubForm) {
		this.efetivacaoBoletoSubForm = efetivacaoBoletoSubForm;
	}

	public BigDecimal getValorTotalChequeOs() {
		return valorTotalChequeOs;
	}

	public void setValorTotalChequeOs(BigDecimal valorTotalChequeOs) {
		this.valorTotalChequeOs = valorTotalChequeOs;
	}

	public BigDecimal getValorTotalCarneOs() {
		return valorTotalCarneOs;
	}

	public void setValorTotalCarneOs(BigDecimal valorTotalCarneOs) {
		this.valorTotalCarneOs = valorTotalCarneOs;
	}

	public BigDecimal getValorTotalCartaoOs() {
		return valorTotalCartaoOs;
	}

	public void setValorTotalCartaoOs(BigDecimal valorTotalCartaoOs) {
		this.valorTotalCartaoOs = valorTotalCartaoOs;
	}

	public BigDecimal getValorTotalBoletoOs() {
		return valorTotalBoletoOs;
	}

	public void setValorTotalBoletoOs(BigDecimal valorTotalBoletoOs) {
		this.valorTotalBoletoOs = valorTotalBoletoOs;
	}

	public TextField getTfTotais() {
		return tfTotais;
	}

	public void setTfTotais(TextField tfTotais) {
		this.tfTotais = tfTotais;
	}

	public TextField getTfQtParcelaCheque() {
		return tfQtParcelaCheque;
	}

	public void setTfQtParcelaCheque(TextField tfQtParcelaCheque) {
		this.tfQtParcelaCheque = tfQtParcelaCheque;
	}

	public TextField getTfCheque() {
		return tfCheque;
	}

	public void setTfCheque(TextField tfCheque) {
		this.tfCheque = tfCheque;
	}

	public TextField getTfQtParcelaCarne() {
		return tfQtParcelaCarne;
	}

	public void setTfQtParcelaCarne(TextField tfQtParcelaCarne) {
		this.tfQtParcelaCarne = tfQtParcelaCarne;
	}

	public TextField getTfCartao() {
		return tfCartao;
	}

	public void setTfCartao(TextField tfCartao) {
		this.tfCartao = tfCartao;
	}

	public TextField getTfCarne() {
		return tfCarne;
	}

	public void setTfCarne(TextField tfCarne) {
		this.tfCarne = tfCarne;
	}

	public TextField getTfQtParcelaCartao() {
		return tfQtParcelaCartao;
	}

	public void setTfQtParcelaCartao(TextField tfQtParcelaCartao) {
		this.tfQtParcelaCartao = tfQtParcelaCartao;
	}
	
	public TextField getTfBoleto() {
		return tfBoleto;
	}

	public void setTfBoleto(TextField tfBoleto) {
		this.tfBoleto = tfBoleto;
	}

	public TextField getTfQtParcelaBoleto() {
		return tfQtParcelaBoleto;
	}

	public void setTfQtParcelaBoleto(TextField tfQtParcelaBoleto) {
		this.tfQtParcelaBoleto = tfQtParcelaBoleto;
	}

	private List<FileResource> createImageList() {
        List<FileResource> img = new ArrayList<FileResource>();
    	String diretorio = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa ;
		
		if(!this.idDocumento.equals("")){
			diretorio = homePath + "/"+ customCompanyBaseFolder + "/" + this.idEmpresa + "/" + this.idDocumento;
		}
		
		File dir = new File(diretorio); 
		File fList[] = dir.listFiles(); 

		for ( int i = 0; i < fList.length; i++ ){ 
		    String arquivo = fList[i].getAbsolutePath();
		    
		    File arqImg = new File(arquivo);
			img.add(new FileResource(arqImg));
		} 
		
        return img;
    }
    
	private File gravarArquivo(String caminho, byte[] dados) throws IOException {
		File arquivo = new File(caminho);
		FileOutputStream fos = null;
		try {
			if (!arquivo.exists()) {
				File pastaPai = arquivo.getParentFile();
				if (pastaPai != null) {
					pastaPai.mkdirs();
					arquivo.createNewFile();
				}
			}
			fos = new FileOutputStream(arquivo);
			fos.write(dados);
		} catch (IOException e) {
			throw e;
		} finally {
			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return arquivo;

	}

	private String getExtensao(String caminho) {
		if (caminho != null && !caminho.isEmpty()) {
			int indiceExtensao = caminho.lastIndexOf(".");
			if (indiceExtensao > -1) {
				return caminho.substring(indiceExtensao, caminho.length());
			}
		}
		return "";
	}
	
	private Layout createControls() {
        HorizontalLayout hl = new HorizontalLayout();
        hl.setSizeUndefined();
        hl.setMargin(false);
        hl.setSpacing(true);

        CheckBox c = new CheckBox("Efeito");
        c.setImmediate(true);
        c.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                boolean checked = (Boolean) event.getProperty().getValue();
                imageViewer.setHiLiteEnabled(checked);
                imageViewer.focus();
            }
        });
        c.setValue(true);
        hl.addComponent(c);
        hl.setComponentAlignment(c, Alignment.BOTTOM_CENTER);

        c = new CheckBox("Anima��o");
        c.setImmediate(true);
        c.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                boolean checked = (Boolean) event.getProperty().getValue();
                imageViewer.setAnimationEnabled(checked);
                imageViewer.focus();
            }
        });
        c.setValue(true);
        hl.addComponent(c);
        hl.setComponentAlignment(c, Alignment.BOTTOM_CENTER);

        Slider s = new Slider("Dura��o Anima��o");
        s.setMax(2000);
        s.setMin(200);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    int duration = (int) Math.round((Double) event
                            .getProperty().getValue());
                    imageViewer.setAnimationDuration(duration);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(350d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Largura da Imagem Centro");
        s.setResolution(2);
        s.setMax(1);
        s.setMin(0.1);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setCenterImageRelativeWidth((float) d);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(0.55);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Contagem imagem");
        s.setMax(5);
        s.setMin(1);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    int sideImageCount = (int) Math.round((Double) event
                            .getProperty().getValue());
                    imageViewer.setSideImageCount(sideImageCount);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(2d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Tamanho Imagem (miniatura)");
        s.setResolution(2);
        s.setMax(0.8);
        s.setMin(0.5);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setSideImageRelativeWidth((float) d);
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(0.65);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Preenchimento Horizontal");
        s.setMax(10);
        s.setMin(0);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setImageHorizontalPadding((int) Math.round(d));
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(1d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        s = new Slider("Preenchimento Vertical");
        s.setMax(10);
        s.setMin(0);
        s.setImmediate(true);
        s.setWidth("120px");
        s.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
                try {
                    double d = (Double) event.getProperty().getValue();
                    imageViewer.setImageVerticalPadding((int) Math.round(d));
                    imageViewer.focus();
                } catch (Exception ignored) {
                }
            }
        });
        try {
            s.setValue(5d);
        } catch (ValueOutOfBoundsException e) {
        }
        hl.addComponent(s);
        hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

        selectedImage.setWidth("50px");
        selectedImage.setImmediate(true);
        hl.addComponent(selectedImage);
        hl.setComponentAlignment(selectedImage, Alignment.BOTTOM_CENTER);

        return hl;
    }
	
	class SlowMultiFileUpload extends MultiFileUpload {
        @Override
        protected void handleFile(File file, String fileName, String mimeType,
                long length) {
            String msg = fileName + " uploaded.";
           new Notification("Arquivo", msg,
					Notification.TYPE_HUMANIZED_MESSAGE, true).show(Page
					.getCurrent());
        }

   
    }
	
	public void preencheEntradaServicoSubForm(List<EntradaServicoEntity> entradaServico) {
		entradaServicoSubForm.fillWith(entradaServico);
	}
	
	public void preencheVendaPecaSubForm(List<VendaPecaEntity> vendaPeca) {
		vendaPecaSubForm.fillWith(vendaPeca);
	}

	public void preencheOsAgrupadaSubForm(List<OrdemServicoEntity> ordemServico) {
		if(ordemServico!=null){
			osAgrupadaSubForm.fillWith(ordemServico);
		}
	}

	public void preencheVendaPecaFinanceiraSubForm(List<VendaPecaEntity> vendaPeca) {
		vendaPecaFinanceiraSubForm.fillWith(vendaPeca);
	}

	public void preencheEntradaServicoFinanceiraSubForm(List<EntradaServicoEntity> entradaServico) {
		entradaServicoFinanceiraSubForm.fillWith(entradaServico);
	}

	public void preencheMaterialServicoSubForm(List<MaterialServicoEntity> materialServico) {
		materialServicoSubForm.fillWith(materialServico);
	}
	
	public void preencheAcessorioOsSubForm(List<AcessorioOsEntity> acessorioOs) {
		acessorioOsSubForm.fillWith(acessorioOs);
	}

	public Button getBtnFinalizar() {
		return btnFinalizar;
	}

	public void setBtnFinalizar(Button btnFinalizar) {
		this.btnFinalizar = btnFinalizar;
	}

	public Button getBtnCancelar() {
		return btnCancelar;
	}

	public void setBtnCancelar(Button btnCancelar) {
		this.btnCancelar = btnCancelar;
	}

	public TextField getTfTotalPeca() {
		return tfTotalPeca;
	}

	public void setTfTotalPeca(TextField tfTotalPeca) {
		this.tfTotalPeca = tfTotalPeca;
	}

	public TextField getTfDinheiro() {
		return tfDinheiro;
	}

	public void setTfDinheiro(TextField tfDinheiro) {
		this.tfDinheiro = tfDinheiro;
	}

	public TextField getTfDuplicata() {
		return tfDuplicata;
	}

	public void setTfDuplicata(TextField tfDuplicata) {
		this.tfDuplicata = tfDuplicata;
	}

	public TextField getTfVale() {
		return tfVale;
	}

	public void setTfVale(TextField tfVale) {
		this.tfVale = tfVale;
	}

	public TextField getTfCobrancaBancaria() {
		return tfCobrancaBancaria;
	}

	public void setTfCobrancaBancaria(TextField tfCobrancaBancaria) {
		this.tfCobrancaBancaria = tfCobrancaBancaria;
	}

	public TextField getTfCobrancaCarteira() {
		return tfCobrancaCarteira;
	}

	public void setTfCobrancaCarteira(TextField tfCobrancaCarteira) {
		this.tfCobrancaCarteira = tfCobrancaCarteira;
	}

	public TextField getTfQtParcelaDinheiro() {
		return tfQtParcelaDinheiro;
	}

	public void setTfQtParcelaDinheiro(TextField tfQtParcelaDinheiro) {
		this.tfQtParcelaDinheiro = tfQtParcelaDinheiro;
	}

	public TextField getTfQtParcelaDuplicata() {
		return tfQtParcelaDuplicata;
	}

	public void setTfQtParcelaDuplicata(TextField tfQtParcelaDuplicata) {
		this.tfQtParcelaDuplicata = tfQtParcelaDuplicata;
	}

	public TextField getTfQtParcelaVale() {
		return tfQtParcelaVale;
	}

	public void setTfQtParcelaVale(TextField tfQtParcelaVale) {
		this.tfQtParcelaVale = tfQtParcelaVale;
	}

	public TextField getTfQtParcelaCobrancaBancaria() {
		return tfQtParcelaCobrancaBancaria;
	}

	public void setTfQtParcelaCobrancaBancaria(TextField tfQtParcelaCobrancaBancaria) {
		this.tfQtParcelaCobrancaBancaria = tfQtParcelaCobrancaBancaria;
	}

	public TextField getTfQtParcelaCobrancaCarteira() {
		return tfQtParcelaCobrancaCarteira;
	}

	public void setTfQtParcelaCobrancaCarteira(TextField tfQtParcelaCobrancaCarteira) {
		this.tfQtParcelaCobrancaCarteira = tfQtParcelaCobrancaCarteira;
	}
	

	public void preencheTotalVendaPecaSubForm(List<VendaPecaEntity> vendaPeca) {
		if(vendaPeca!= null){
			Double valorTotalCompra = 0D;
			Double valorTotalLucro = 0D;
			this.valorTotalGeral = 0D;
			Double valorSubTotal = 0D;
			this.valorTotalDesconto = 0D;
			
			this.tfTotalPeca.setValue(vendaPecaSubForm.getTotalSumary(vendaPeca).toString().replace(".", ","));
			valorVendaPeca = vendaPecaSubForm.getTotalSumary(vendaPeca);
			valorTotalGeral = valorTotalGeral + valorVendaPeca;
			this.valorTotalGeral = this.valorTotalEntradaServico+this.valorTotalMaterialServico+this.valorVendaPeca;
			this.tfTotais.setValue(valorTotalGeral.toString().replace(".", ","));
			valorSubTotal = vendaPecaSubForm.getTotalSumary(vendaPeca, "valorSubtotal");
			this.valorDescontoPeca = valorSubTotal - valorVendaPeca;
			
			for(VendaPecaEntity vp : vendaPeca){
				valorTotalCompra = valorTotalCompra + (vp.getValorCompra().doubleValue() * vp.getQuantidadeProduto().doubleValue());
			}
			valorTotalLucro = valorVendaPeca - valorTotalCompra; 
			this.tfLucroPeca.setValue(valorTotalLucro.toString().replace(".", ","));
			this.valorTotalDesconto = this.valorDescontoPeca + this.valorDescontoServico;
			if(this.valorTotalDesconto > 0){
				this.tfDesconto.setValue(this.valorTotalDesconto.toString().replace(".", ","));
			}

		} 
	}
	public void preencheTotalEntradaServicoSubForm(List<EntradaServicoEntity> entradaServico) {
		if(entradaServico!= null){
			Double valorComissaoTecnico = 0D;
			Double valorComissaoVendedor = 0D;
			Double totalLucroServico = 0D;
			Double valorSubTotal = 0D;
			this.valorTotalGeral = 0D;
			this.valorTotalDesconto = 0D;
			
			valorTotalEntradaServico = valorTotalMaterialServico + entradaServicoSubForm.getTotalSumary(entradaServico);
			this.tfTotalServico.setValue(valorTotalEntradaServico.toString().replace(".", ","));			
			this.valorTotalGeral = this.valorTotalEntradaServico+this.valorVendaPeca;
			this.tfTotais.setValue(valorTotalGeral.toString().replace(".", ","));

			valorComissaoTecnico = entradaServicoSubForm.getTotalSumary(entradaServico, "comissaoTecnico");
			valorSubTotal = entradaServicoSubForm.getTotalSumary(entradaServico, "valorSubtotal");
 
			this.valorDescontoServico = valorSubTotal - entradaServicoSubForm.getTotalSumary(entradaServico);
			for(EntradaServicoEntity es : entradaServico){
				if(es.getVendedor()!=null){
					if(es.getServico().getTipoComissaoVendedor().equals("P")){
						valorComissaoVendedor = valorComissaoVendedor + (((es.getValorCobrado().doubleValue() * es.getQuantidadeServico().doubleValue()) * es.getServico().getValorComissaoVendedor().doubleValue()) / 100);
					}else{
						valorComissaoVendedor = valorComissaoVendedor + (es.getQuantidadeServico().doubleValue() * es.getServico().getValorComissaoVendedor().doubleValue());
					}
				}
			}
			this.tfComissaoTecnico.setValue(valorComissaoTecnico.toString().replace(".", ","));
			this.tfComissaoVendedor.setValue(valorComissaoVendedor.toString().replace(".", ","));
			this.valorTotalDesconto = this.valorDescontoServico + this.valorDescontoPeca;
			
			totalLucroServico = (valorTotalEntradaServico - valorComissaoVendedor - valorComissaoTecnico - this.valorTotalCompraMaterial);
			this.tfLucroServico.setValue(totalLucroServico.toString().replace(".", ","));
			this.tfLucroParcialServico.setValue(totalLucroServico.toString().replace(".", ","));
			if(this.valorTotalDesconto > 0){
				this.tfDesconto.setValue(this.valorTotalDesconto.toString().replace(".", ","));
			}
		}
	}

	public void preencheTotalMaterialServicoSubForm(List<MaterialServicoEntity> materialServico) {
		if(materialServico!= null){
			Double valorServico = 0D;
			Double lucroMaterial = 0D;
			Double valorTotalCompra = 0D;
			
			this.valorTotalGeral = 0D;
			valorTotalMaterialServico = materialServicoSubForm.getTotalSumary(materialServico);
			
			for(MaterialServicoEntity ms : materialServico){
				valorTotalCompra = valorTotalCompra + (ms.getValorCompra().doubleValue() * ms.getQuantidadeProduto().doubleValue());
			}
			this.valorTotalCompraMaterial = valorTotalCompra;
			this.valorTotalLucroMaterial = valorTotalMaterialServico - valorTotalCompra; 
			valorServico = this.valorTotalMaterialServico + this.valorTotalEntradaServico;
			if(this.tfLucroServico.getValue()!=null){
				lucroMaterial = Double.parseDouble(this.tfLucroServico.getValue().toString().replace(",", "."))+this.valorTotalLucroMaterial;
			}else{
				lucroMaterial = this.valorTotalLucroMaterial;
			}
			this.tfLucroServico.setValue(lucroMaterial.toString().replace(".", ","));
			this.tfLucroParcialServico.setValue(lucroMaterial.toString().replace(".", ","));
			this.tfTotalServico.setValue(valorServico.toString().replace(".", ","));
			this.tfTotais.setValue(valorTotalMaterialServico.toString().replace(".", ","));
			this.valorTotalGeral = this.valorTotalEntradaServico + this.valorTotalMaterialServico+this.valorVendaPeca;
			this.tfTotais.setValue(valorTotalGeral.toString().replace(".", ","));
		}
	}
	
	public void preencheForm(OrdemServicoEntity currentBean) {
		this.cbCliente.setValue(currentBean.getCliente());
	}
}