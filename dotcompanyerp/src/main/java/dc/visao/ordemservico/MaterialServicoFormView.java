package dc.visao.ordemservico;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.ordemservico.OrdemServicoFormController;
import dc.entidade.ordemservico.MaterialServicoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.util.ComponentUtil;

public class MaterialServicoFormView extends CustomComponent {

	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private GridLayout materialServicoLine1, materialServicoLine2;
	
	@AutoGenerated
	private VerticalLayout mainLayout;
	
	@AutoGenerated
	private ComboBox cbTecnico;
	
	@AutoGenerated
	private TextField txCod, txNomeProduto, txQtd, txValorUnitario, txValorTotal;
	
	@AutoGenerated
	private TabSheet tabSheet;
	
	private OrdemServicoFormController controller;

	private SubFormComponent<MaterialServicoEntity, Integer> materialServicoSubForm;

	public MaterialServicoFormView(OrdemServicoFormController controller) {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		this.controller = controller;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		setSizeFull();
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("100.0%");
		// setHeight("100.0%");

		// subForm
		tabSheet = BuildTabs();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1);

		return mainLayout;
	}

	private TabSheet BuildTabs() {
		tabSheet = new TabSheet();
		tabSheet.setImmediate(true);
		tabSheet.setSizeFull();

		tabSheet.addTab(buildSubFormMaterialServico(), "Material de Serviço", null);

		return tabSheet;
	}

	 
	private Component buildSubFormMaterialServico() {
		String[] atributos = new String[] {"tecnico,nome","produto.descricao","quantidadeServico","valorUnitario","valorTotal"};
		String[] headers = new String[] {"Técnico", "Descrição produto","Qtd", "Valor unitário", "Valor Total"};
		
		this.materialServicoSubForm = new SubFormComponent<MaterialServicoEntity, Integer>(MaterialServicoEntity.class, atributos, headers) {

			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container, Object itemId, Object propertyId, Component uiContext) {

						if ("produto.descricao".equals(propertyId)) {
							TextField textField = ComponentUtil.buildNumberField(null);
							return textField;
						} else if ("valorUnitario".equals(propertyId)) {
							return ComponentUtil.buildCurrencyField(null);
						}else {
							return ComponentUtil.buildTextField(null);
						}
					}

				};
			}

			@Override
			public boolean validateItems(List<MaterialServicoEntity> items) {

				return true;
			}

			protected MaterialServicoEntity getNovo() {
//				MaterialServico materialServico = controller.novoMaterialServico();
//				return materialServico;
				return null;
			}
	
			protected void getRemoverSelecionados(List<MaterialServicoEntity> values) {
//				controller.removerMaterialServicoItem(values);
			}

		};

		return this.materialServicoSubForm;
	}
}
