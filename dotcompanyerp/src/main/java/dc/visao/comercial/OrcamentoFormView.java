package dc.visao.comercial;

import java.math.BigDecimal;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.FieldEvents.BlurEvent;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.controller.comercial.OrcamentoFormController;
import dc.entidade.comercial.CondicaoPagamento;
import dc.entidade.comercial.ItemOrcamento;
import dc.entidade.folhapagamento.VendedorEntity;
import dc.entidade.geral.pessoal.ClienteEntity;
import dc.entidade.geral.pessoal.TransportadoraEntity;
import dc.entidade.geral.produto.ProdutoEntity;
import dc.visao.framework.component.SubFormComponent;
import dc.visao.framework.component.manytoonecombo.ManyToOneComboField;
import dc.visao.framework.util.ComponentUtil;

public class OrcamentoFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout mainLayout;

	OrcamentoFormController controller;

	@AutoGenerated
	private GridLayout fields;

	ManyToOneComboField<VendedorEntity> cmbVendedor;
	ManyToOneComboField<ClienteEntity> cmbCliente;
	ManyToOneComboField<TransportadoraEntity> cmbTransportadora;
	ManyToOneComboField<CondicaoPagamento> cmbCondicaoPagamento;
	
	ComboBox cmbTipo, cmbFrete;

	TextField txtCodigo;

	PopupDateField dataCadastro, dataEntrega, dataValidade;

	TextField txtValorSubTotal, txtValorFrete, txtTaxaComissao,
			txtValorComissao, txtTaxaDesconto, txtValorDesconto, txtValorTotal;

	TextArea txtDescricao;
	
	@AutoGenerated
	private TabSheet tabSheet;

	private SubFormComponent<ItemOrcamento, Integer> itensSubForm;

	@AutoGenerated
	private TabSheet subForms;

	public OrcamentoFormView(OrcamentoFormController controller) {
		this.controller = controller;
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setSizeFull();
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		setHeight("100%");

		tabSheet = BuildTabs();
		mainLayout.addComponent(tabSheet);
		mainLayout.setExpandRatio(tabSheet, 1);

		mainLayout.addComponent(subForms);
		mainLayout.setExpandRatio(subForms, 1);

		return mainLayout;

	}

	@AutoGenerated
	private GridLayout buildFields() {
		// common part: create layout
		fields = new GridLayout(7, 7);
		fields.setImmediate(false);
		fields.setWidth("100.0%");
		fields.setHeight("-1px");
		fields.setMargin(true);
		fields.setSpacing(true);

		cmbVendedor = new ManyToOneComboField<>(VendedorEntity.class);
		cmbVendedor.setCaption("Vendedor");
		fields.addComponent(cmbVendedor, 0, 0);

		cmbCliente = new ManyToOneComboField<>(ClienteEntity.class);
		cmbCliente.setCaption("Cliente");
		fields.addComponent(cmbCliente, 2, 0);

		cmbTransportadora = new ManyToOneComboField<>(TransportadoraEntity.class);
		cmbTransportadora.setCaption("Transportadora");
		fields.addComponent(cmbTransportadora, 4, 0);

		cmbCondicaoPagamento = new ManyToOneComboField<>(CondicaoPagamento.class);
		cmbCondicaoPagamento.setCaption("Condição Pagamento");
		fields.addComponent(cmbCondicaoPagamento, 6, 0);

		cmbTipo = ComponentUtil.buildComboBox("Tipo");
		fields.addComponent(cmbTipo, 0, 2);

		cmbFrete = ComponentUtil.buildComboBox("Frete");
		fields.addComponent(cmbFrete, 1, 2);

		txtCodigo = ComponentUtil.buildTextField("Código");
		fields.addComponent(txtCodigo, 2, 2);

		dataCadastro = ComponentUtil.buildPopupDateField("Data Cadastro");
		fields.addComponent(dataCadastro, 3, 2);

		dataEntrega = ComponentUtil.buildPopupDateField("Data Entrega");
		fields.addComponent(dataEntrega, 4, 2);

		dataValidade = ComponentUtil.buildPopupDateField("Data Validade");
		fields.addComponent(dataValidade, 5, 2);

		txtValorSubTotal = ComponentUtil.buildCurrencysField("Valor SubTotal");
		fields.addComponent(txtValorSubTotal, 0, 3);

		txtValorFrete = ComponentUtil.buildCurrencysField("Valor Frete");
		fields.addComponent(txtValorFrete, 1, 3);

		txtTaxaComissao = ComponentUtil.buildPercentageField("Taxa Comissão");
		fields.addComponent(txtTaxaComissao, 2, 3);

		txtValorComissao = ComponentUtil.buildCurrencysField("Valor Comissão");
		fields.addComponent(txtValorComissao, 3, 3);

		txtTaxaDesconto = ComponentUtil.buildPercentageField("Taxa Desconto");
		fields.addComponent(txtTaxaDesconto, 4, 3);

		txtValorDesconto = ComponentUtil.buildCurrencysField("Valor Desconto");
		fields.addComponent(txtValorDesconto, 5, 3);

		txtValorTotal = ComponentUtil.buildCurrencysField("Valor Total");
		fields.addComponent(txtValorTotal, 6, 3);

		txtDescricao = ComponentUtil.buildTextArea("Descrição");
		txtDescricao.setHeight("10%");
		fields.addComponent(txtDescricao, 0, 4, 6, 4);

		return fields;

	}
	
	private TabSheet BuildTabs() {
		subForms = new TabSheet();
		subForms.setImmediate(true);
		subForms.setSizeFull();

		subForms.addTab(buildFields(), "Dados Principais", null);
		subForms.addTab(buildSubFormItens(), "Itens do Orçamento", null);
		
		return subForms;
	}
	
	private SubFormComponent<ItemOrcamento, Integer> buildSubFormItens() {
		//private Component buildSubFormNaturezaFinanceira() {
			
			String[] atributos = new String[] { "produto", "quantidade","valorUnitario", "valorSubTotal", "taxaDesconto","valorDesconto", "valorTotal" };
			String[] headers = new String[] { "Produto", "Quantidade", "Valor Unitário","Valor SubTotal", "Taxa Desconto", "Valor Desconto","Valor Total"  };

			this.itensSubForm = new SubFormComponent<ItemOrcamento, Integer>(
					ItemOrcamento.class, atributos, headers) {

				private static final long serialVersionUID = 1L;

				@Override
				protected TableFieldFactory getFieldFactory() {
					return new TableFieldFactory() {

						/**
						 * 
						 */
						private static final long serialVersionUID = 1L;

						@Override
						public Field<?> createField(Container container,
								Object itemId, Object propertyId,
								Component uiContext) {

						if ("produto".equals(propertyId)) {
							
							ComboBox comboBox = ComponentUtil.buildComboBox(null);
							BeanItemContainer<ProdutoEntity> produtoContainer = new BeanItemContainer<>(ProdutoEntity.class,
									controller.buscarProdutos());
							produtoContainer.addNestedContainerProperty("nome");
							comboBox.setContainerDataSource(produtoContainer);
							comboBox.setItemCaptionPropertyId("nome");
							return comboBox;
							
						}

						if ("quantidade".equals(propertyId)) {
							TextField field = ComponentUtil
									.buildNumberField(null);
							field.addBlurListener(getBlurListener(container,itemId, propertyId));
							return field;
						}

						if ("valorUnitario".equals(propertyId)) {
							TextField field = ComponentUtil
									.buildCurrencysField(null);
							field.addBlurListener(getBlurListener(container,itemId, propertyId));
							return field;
						}

						if ("valorSubTotal".equals(propertyId)) {
						    TextField field =ComponentUtil.buildCurrencyField(null);
						    field.addBlurListener(getBlurListener(container, itemId, propertyId));
						 return field;
						}

						if ("taxaDesconto".equals(propertyId)) {
							TextField field = ComponentUtil
									.buildNumberField(null);
							field.addBlurListener(getBlurListener(container,itemId, propertyId));
							return field;
						}

						if ("valorDesconto".equals(propertyId)) {
							TextField field = ComponentUtil
									.buildCurrencysField(null);
							field.addBlurListener(getBlurListener(container,itemId, propertyId));
							return field;
						}

						if ("valorTotal".equals(propertyId)) {
							TextField field = ComponentUtil
									.buildCurrencyField(null);
							field.addBlurListener(getBlurListener(container,itemId, propertyId));
							return field;
						}

						else {
							return ComponentUtil.buildTextField(null);
						}
					}

					private BlurListener getBlurListener(
							final Container container, final Object itemId,
							final Object propertyId) {
						return new BlurListener() {
							@Override
							public void blur(BlurEvent event) {
								Property<BigDecimal> quantidade = get("quantidade");
								Property<BigDecimal> valorUnitario = get("valorUnitario");
								Property<BigDecimal> valorSubtotal = get("valorSubTotal");
								Property<BigDecimal> valorDesconto = get("valorDesconto");
								Property<BigDecimal> valorTotal = get("valorTotal");

								if (quantidade.getValue() != null
										&& valorUnitario.getValue() != null) {
									BigDecimal q = quantidade.getValue();
									BigDecimal vu = valorUnitario.getValue();
									valorSubtotal.setValue(q.multiply(vu));
								}

								if (valorSubtotal.getValue() != null) {
									BigDecimal vs = valorSubtotal.getValue();
									BigDecimal vd = BigDecimal.ZERO;
									if (valorDesconto.getValue() != null) {
										vd = valorDesconto.getValue();
									} else {
										valorDesconto.setValue(BigDecimal.ZERO);
									}
									valorTotal.setValue(vs.subtract(vd));
								}

							}

							@SuppressWarnings("unchecked")
							private Property<BigDecimal> get(String property) {
								Item item = container.getItem(itemId);
								return item.getItemProperty(property);
							}
						};

					}
				};
			}

			protected ItemOrcamento getNovo() {
				ItemOrcamento item = controller
						.adicionarItem();
				return item;
			}

			@Override
			protected void getRemoverSelecionados(
					List<ItemOrcamento> values) {
				controller.removerItem(values);
			}

			@Override
			public boolean validateItems(List<ItemOrcamento> items) {
				// TODO Auto-generated method stub
				return true;
			}

		};

		
		return itensSubForm;
	}

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public OrcamentoFormController getController() {
		return controller;
	}

	public void setController(OrcamentoFormController controller) {
		this.controller = controller;
	}

	public GridLayout getFields() {
		return fields;
	}

	public void setFields(GridLayout fields) {
		this.fields = fields;
	}
	
	public ManyToOneComboField<VendedorEntity> getCmbVendedor() {
		return cmbVendedor;
	}

	public void setCmbVendedor(ManyToOneComboField<VendedorEntity> cmbVendedor) {
		this.cmbVendedor = cmbVendedor;
	}

	public ManyToOneComboField<ClienteEntity> getCmbCliente() {
		return cmbCliente;
	}

	public void setCmbCliente(ManyToOneComboField<ClienteEntity> cmbCliente) {
		this.cmbCliente = cmbCliente;
	}

	public ManyToOneComboField<TransportadoraEntity> getCmbTransportadora() {
		return cmbTransportadora;
	}

	public void setCmbTransportadora(
			ManyToOneComboField<TransportadoraEntity> cmbTransportadora) {
		this.cmbTransportadora = cmbTransportadora;
	}

	public ManyToOneComboField<CondicaoPagamento> getCmbCondicaoPagamento() {
		return cmbCondicaoPagamento;
	}

	public void setCmbCondicaoPagamento(
			ManyToOneComboField<CondicaoPagamento> cmbCondicaoPagamento) {
		this.cmbCondicaoPagamento = cmbCondicaoPagamento;
	}

	public ComboBox getCmbTipo() {
		return cmbTipo;
	}

	public void setCmbTipo(ComboBox cmbTipo) {
		this.cmbTipo = cmbTipo;
	}

	public ComboBox getCmbFrete() {
		return cmbFrete;
	}

	public void setCmbFrete(ComboBox cmbFrete) {
		this.cmbFrete = cmbFrete;
	}

	public TextField getTxtCodigo() {
		return txtCodigo;
	}

	public void setTxtCodigo(TextField txtCodigo) {
		this.txtCodigo = txtCodigo;
	}

	public PopupDateField getDataCadastro() {
		return dataCadastro;
	}

	public void setDataCadastro(PopupDateField dataCadastro) {
		this.dataCadastro = dataCadastro;
	}

	public PopupDateField getDataEntrega() {
		return dataEntrega;
	}

	public void setDataEntrega(PopupDateField dataEntrega) {
		this.dataEntrega = dataEntrega;
	}

	public PopupDateField getDataValidade() {
		return dataValidade;
	}

	public void setDataValidade(PopupDateField dataValidade) {
		this.dataValidade = dataValidade;
	}

	public TextField getTxtValorSubTotal() {
		return txtValorSubTotal;
	}

	public void setTxtValorSubTotal(TextField txtValorSubTotal) {
		this.txtValorSubTotal = txtValorSubTotal;
	}

	public TextField getTxtValorFrete() {
		return txtValorFrete;
	}

	public void setTxtValorFrete(TextField txtValorFrete) {
		this.txtValorFrete = txtValorFrete;
	}

	public TextField getTxtTaxaComissao() {
		return txtTaxaComissao;
	}

	public void setTxtTaxaComissao(TextField txtTaxaComissao) {
		this.txtTaxaComissao = txtTaxaComissao;
	}

	public TextField getTxtValorComissao() {
		return txtValorComissao;
	}

	public void setTxtValorComissao(TextField txtValorComissao) {
		this.txtValorComissao = txtValorComissao;
	}

	public TextField getTxtTaxaDesconto() {
		return txtTaxaDesconto;
	}

	public void setTxtTaxaDesconto(TextField txtTaxaDesconto) {
		this.txtTaxaDesconto = txtTaxaDesconto;
	}

	public TextField getTxtValorDesconto() {
		return txtValorDesconto;
	}

	public void setTxtValorDesconto(TextField txtValorDesconto) {
		this.txtValorDesconto = txtValorDesconto;
	}

	public TextField getTxtValorTotal() {
		return txtValorTotal;
	}

	public void setTxtValorTotal(TextField txtValorTotal) {
		this.txtValorTotal = txtValorTotal;
	}

	public TextArea getTxtDescricao() {
		return txtDescricao;
	}

	public void setTxtDescricao(TextArea txtDescricao) {
		this.txtDescricao = txtDescricao;
	}

	public SubFormComponent<ItemOrcamento, Integer> getItensSubForm() {
		return itensSubForm;
	}

	public void setItensSubForm(
			SubFormComponent<ItemOrcamento, Integer> itensSubForm) {
		this.itensSubForm = itensSubForm;
	}

	public TabSheet getSubForms() {
		return subForms;
	}

	public void setSubForms(TabSheet subForms) {
		this.subForms = subForms;
	}

	public void preencheSubForm(List<ItemOrcamento> detalhes) {
		itensSubForm.fillWith(detalhes);
	}

}