package dc.visao.nfe;

import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Field;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import dc.control.validator.ObjectValidator;
import dc.controller.nfe.ProdutoServicoFormController;
import dc.entidade.nfe.NfeDetEspecificoMedicamentoEntity;
import dc.visao.framework.component.SubFormComponent;

/**
 * 
 * 
 */

public class NfeDetEspecificoMedicamentoFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private ProdutoServicoFormController controller;

	/**
	 * 
	 */

	@AutoGenerated
	private String titulo = "Medicamento";

	@AutoGenerated
	private VerticalLayout vlNdeMedicamento;

	@AutoGenerated
	private Panel plNdeMedicamentoSubForm;

	@AutoGenerated
	private Panel plNdeMedicamento;

	@AutoGenerated
	private GridLayout glNdeMedicamento;

	@AutoGenerated
	private SubFormComponent<NfeDetEspecificoMedicamentoEntity, Integer> sfNdeMedicamento;

	@AutoGenerated
	private TextField tfNumeroLoteMedicamento;

	@AutoGenerated
	private TextField tfQuantidadeLoteMedicamento;

	@AutoGenerated
	private PopupDateField pdfDataFabricacaoMedicamento;

	@AutoGenerated
	private PopupDateField pdfDataValidadeMedicamento;

	@AutoGenerated
	private TextField tfPrecoMaximoConsumidorMedicamento;

	public String getTitulo() {
		return titulo;
	}

	public SubFormComponent<NfeDetEspecificoMedicamentoEntity, Integer> getSfNdeMedicamento() {
		return sfNdeMedicamento;
	}

	public void setSfNdeMedicamento(
			SubFormComponent<NfeDetEspecificoMedicamentoEntity, Integer> sfNdeMedicamento) {
		this.sfNdeMedicamento = sfNdeMedicamento;
	}

	public TextField getTfNumeroLoteMedicamento() {
		return tfNumeroLoteMedicamento;
	}

	public void setTfNumeroLoteMedicamento(TextField tfNumeroLoteMedicamento) {
		this.tfNumeroLoteMedicamento = tfNumeroLoteMedicamento;
	}

	public TextField getTfQuantidadeLoteMedicamento() {
		return tfQuantidadeLoteMedicamento;
	}

	public void setTfQuantidadeLoteMedicamento(
			TextField tfQuantidadeLoteMedicamento) {
		this.tfQuantidadeLoteMedicamento = tfQuantidadeLoteMedicamento;
	}

	public PopupDateField getPdfDataFabricacaoMedicamento() {
		return pdfDataFabricacaoMedicamento;
	}

	public void setPdfDataFabricacaoMedicamento(
			PopupDateField pdfDataFabricacaoMedicamento) {
		this.pdfDataFabricacaoMedicamento = pdfDataFabricacaoMedicamento;
	}

	public PopupDateField getPdfDataValidadeMedicamento() {
		return pdfDataValidadeMedicamento;
	}

	public void setPdfDataValidadeMedicamento(
			PopupDateField pdfDataValidadeMedicamento) {
		this.pdfDataValidadeMedicamento = pdfDataValidadeMedicamento;
	}

	public TextField getTfPrecoMaximoConsumidorMedicamento() {
		return tfPrecoMaximoConsumidorMedicamento;
	}

	public void setTfPrecoMaximoConsumidorMedicamento(
			TextField tfPrecoMaximoConsumidorMedicamento) {
		this.tfPrecoMaximoConsumidorMedicamento = tfPrecoMaximoConsumidorMedicamento;
	}

	/**
	 * CONSTRUTOR
	 * 
	 * @param controller
	 */

	public NfeDetEspecificoMedicamentoFormView(
			ProdutoServicoFormController controller) {
		this.controller = controller;
	}

	/**
	 * GET / SET
	 */

	@AutoGenerated
	public VerticalLayout bvlNdeMedicamento() {
		// common part: create layout
		vlNdeMedicamento = new VerticalLayout();
		vlNdeMedicamento.setImmediate(false);
		vlNdeMedicamento.setWidth("100.0%");
		vlNdeMedicamento.setHeight("100.0%");
		vlNdeMedicamento.setMargin(true);
		vlNdeMedicamento.setSpacing(true);

		// panel_2
		vlNdeMedicamento.addComponent(bplNdeMedicamentoSubForm());

		// panel_3
		vlNdeMedicamento.addComponent(bplNdeMedicamento());

		return vlNdeMedicamento;
	}

	@AutoGenerated
	private Panel bplNdeMedicamentoSubForm() {
		// common part: create layout
		plNdeMedicamentoSubForm = new Panel();
		plNdeMedicamentoSubForm.setImmediate(false);
		// pNfeDetalheSubForm.setWidth("100.0%");
		// pNfeDetalheSubForm.setHeight("100.0%");
		plNdeMedicamentoSubForm.setSizeFull();
		plNdeMedicamentoSubForm.setEnabled(false);

		plNdeMedicamentoSubForm.setContent(buildNdeMedicamentoSubForm());

		return plNdeMedicamentoSubForm;
	}

	@AutoGenerated
	private Panel bplNdeMedicamento() {
		// common part: create layout
		plNdeMedicamento = new Panel();
		plNdeMedicamento.setImmediate(false);
		// pNfeDetalhe.setWidth("100.0%");
		// pNfeDetalhe.setHeight("100.0%");
		plNdeMedicamento.setSizeFull();

		plNdeMedicamento.setContent(bglNdeMedicamento());

		return plNdeMedicamento;
	}

	@AutoGenerated
	private GridLayout bglNdeMedicamento() {
		glNdeMedicamento = new GridLayout();
		glNdeMedicamento.setImmediate(false);
		glNdeMedicamento.setSizeUndefined();
		glNdeMedicamento.setMargin(true);
		glNdeMedicamento.setSpacing(true);
		glNdeMedicamento.setRows(6);
		glNdeMedicamento.setColumns(3);
		glNdeMedicamento.setEnabled(false);

		// tfNumeroLoteMedicamento
		tfNumeroLoteMedicamento = new TextField("Número do lote:");
		tfNumeroLoteMedicamento.setWidth("-1px");
		tfNumeroLoteMedicamento.setHeight("-1px");
		tfNumeroLoteMedicamento.setSizeFull();
		tfNumeroLoteMedicamento.setNullRepresentation("");
		tfNumeroLoteMedicamento.setImmediate(true);
		tfNumeroLoteMedicamento.setId("tfNumeroLoteMedicamento");
		tfNumeroLoteMedicamento
				.addValueChangeListener(new ValueChangeListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						if (ObjectValidator.validateEventValue(event)) {
							controller.ndeMedicamentoSetarValor(
									tfNumeroLoteMedicamento.getId(), event
											.getProperty().getValue());
						}
					}
				});
		glNdeMedicamento.addComponent(tfNumeroLoteMedicamento, 0, 0);

		// tfQuantidadeLoteMedicamento
		tfQuantidadeLoteMedicamento = new TextField("Quantidade do lote:");
		tfQuantidadeLoteMedicamento.setWidth("-1px");
		tfQuantidadeLoteMedicamento.setHeight("-1px");
		tfQuantidadeLoteMedicamento.setSizeFull();
		tfQuantidadeLoteMedicamento.setNullRepresentation("");
		tfQuantidadeLoteMedicamento.setImmediate(true);
		tfQuantidadeLoteMedicamento.setId("tfQuantidadeLoteMedicamento");
		tfQuantidadeLoteMedicamento
				.addValueChangeListener(new ValueChangeListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						if (ObjectValidator.validateEventValue(event)) {
							if (ObjectValidator.validateValue(event)) {
								controller.ndeMedicamentoSetarValor(
										tfQuantidadeLoteMedicamento.getId(),
										event.getProperty().getValue());
							}
						}
					}
				});
		glNdeMedicamento.addComponent(tfQuantidadeLoteMedicamento, 1, 0);

		// pdfDataFabricacaoMedicamento
		pdfDataFabricacaoMedicamento = new PopupDateField("Data da fabricação:");
		pdfDataFabricacaoMedicamento.setWidth("-1px");
		pdfDataFabricacaoMedicamento.setHeight("-1px");
		pdfDataFabricacaoMedicamento.setSizeFull();
		pdfDataFabricacaoMedicamento.setImmediate(true);
		pdfDataFabricacaoMedicamento.setId("pdfDataFabricacaoMedicamento");
		pdfDataFabricacaoMedicamento
				.addValueChangeListener(new ValueChangeListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						if (ObjectValidator.validateEventValue(event)) {
							if (ObjectValidator.validateNotRequiredDate(event)) {
								controller.ndeMedicamentoSetarValor(
										pdfDataFabricacaoMedicamento.getId(),
										event.getProperty().getValue());
							}
						}
					}
				});
		glNdeMedicamento.addComponent(pdfDataFabricacaoMedicamento, 2, 0);

		// pdfDataValidadeMedicamento
		pdfDataValidadeMedicamento = new PopupDateField("Data da validade:");
		pdfDataValidadeMedicamento.setWidth("-1px");
		pdfDataValidadeMedicamento.setHeight("-1px");
		pdfDataValidadeMedicamento.setSizeFull();
		pdfDataValidadeMedicamento.setImmediate(true);
		pdfDataValidadeMedicamento.setId("pdfDataValidadeMedicamento");
		pdfDataValidadeMedicamento
				.addValueChangeListener(new ValueChangeListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						if (ObjectValidator.validateEventValue(event)) {
							if (ObjectValidator.validateNotRequiredDate(event)) {
								controller.ndeMedicamentoSetarValor(
										pdfDataValidadeMedicamento.getId(),
										event.getProperty().getValue());
							}
						}
					}
				});
		glNdeMedicamento.addComponent(pdfDataValidadeMedicamento, 0, 1);

		// tfPrecoMaximoConsumidorMedicamento
		tfPrecoMaximoConsumidorMedicamento = new TextField(
				"Preço máximo para consumidor:");
		tfPrecoMaximoConsumidorMedicamento.setWidth("-1px");
		tfPrecoMaximoConsumidorMedicamento.setHeight("-1px");
		tfPrecoMaximoConsumidorMedicamento.setSizeFull();
		tfPrecoMaximoConsumidorMedicamento.setNullRepresentation("");
		tfPrecoMaximoConsumidorMedicamento.setImmediate(true);
		tfPrecoMaximoConsumidorMedicamento
				.setId("tfPrecoMaximoConsumidorMedicamento");
		tfPrecoMaximoConsumidorMedicamento
				.addValueChangeListener(new ValueChangeListener() {
					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						// TODO Auto-generated method stub
						if (ObjectValidator.validateEventValue(event)) {
							if (ObjectValidator.validateValue(event)) {
								controller.ndeMedicamentoSetarValor(
										tfPrecoMaximoConsumidorMedicamento
												.getId(), event.getProperty()
												.getValue());
							}
						}
					}
				});
		glNdeMedicamento.addComponent(tfPrecoMaximoConsumidorMedicamento, 1, 1);

		return glNdeMedicamento;
	}

	private SubFormComponent<NfeDetEspecificoMedicamentoEntity, Integer> buildNdeMedicamentoSubForm() {
		// common part: create layout
		sfNdeMedicamento = new SubFormComponent<NfeDetEspecificoMedicamentoEntity, Integer>(
				NfeDetEspecificoMedicamentoEntity.class,
				new String[] { "numeroLote", "quantidadeLote",
						"precoMaximoConsumidor" }, new String[] {
						"Número do lote", "Quantidade do lote",
						"Preço máximo ao consumidor" }) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			protected TableFieldFactory getFieldFactory() {
				return new TableFieldFactory() {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					@Override
					public Field<?> createField(Container container,
							Object itemId, Object propertyId,
							Component uiContext) {
						return null;
					}

				};
			}

			@Override
			public boolean validateItems(
					List<NfeDetEspecificoMedicamentoEntity> items) {
				// TODO Auto-generated method stub
				return true;
			}

			@Override
			protected NfeDetEspecificoMedicamentoEntity getNovo() {
				// TODO Auto-generated method stub
				NfeDetEspecificoMedicamentoEntity ent = controller
						.ndeMedicamentoAdicionar();

				return ent;
			}

			@Override
			protected void onSelect(NfeDetEspecificoMedicamentoEntity item) {
				// TODO Auto-generated method stub
				// super.onSelect(item);

				controller.ndeMedicamentoSelecionar(item);
			}

		};

		return sfNdeMedicamento;
	}

	/**
	 * NFEDETALHE - POPULAR
	 * 
	 * @param nfeDetalheList
	 */

	public void carregarSfNdeMedicamento(
			List<NfeDetEspecificoMedicamentoEntity> ndeMedicamentoList) {
		try {
			sfNdeMedicamento.fillWith(ndeMedicamentoList);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}