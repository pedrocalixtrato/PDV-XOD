package dc.visao.relatorio;

import org.vaadin.dialogs.ConfirmDialog;
import org.vaadin.easyuploads.FileBuffer;
import org.vaadin.easyuploads.UploadField;
import org.vaadin.easyuploads.UploadField.FieldType;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.server.Page;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;

import dc.entidade.administrativo.empresa.EmpresaEntity;
import dc.entidade.administrativo.seguranca.PapelEntity;
import dc.entidade.administrativo.seguranca.UsuarioEntity;
import dc.entidade.framework.FmMenu;
import dc.entidade.framework.SeguimentoEntity;
import dc.entidade.relatorio.Relatorio;
import dc.entidade.relatorio.TipoRelatorio;
import dc.framework.DcConstants;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.geral.MainUI;
import dc.visao.framework.util.ComponentUtil;

public class RelatorioFormView extends CustomComponent {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final String FANTASY_NAME_PROPERTY = "nomeFantasia";
	private static final String NAME_PROPERTY = "nome";
	private static final Object LOGIN_PROPERTY = "login";

	@AutoGenerated
	private VerticalLayout mainLayout;
	private GridLayout detalhesLayout;
	private VerticalLayout empresaLayout;
	private VerticalLayout papelLayout;
	private VerticalLayout usuarioLayout;
	private VerticalLayout seguimentoLayout;

	private TabSheet tabForm;

	private TextField txNome;
	private TextField txDescricao;
	private TextField txTelaParametros;
	private UploadField relatorioUpload;
	private String nomeRelatorio;
	private ComboBox cbTipos;

	private ManyToOneCombo<FmMenu> comboMenus;
	private ManyToOneCombo<Relatorio> comboRelatorios;

	private ManyToOneCombo<SeguimentoEntity> comboSeguimentos;
	private Table tableSeguimentos;
	private BeanItemContainer<SeguimentoEntity> seguimentoContainer;
	private SeguimentoEntity seguimentoSelecionado;

	private ManyToOneCombo<EmpresaEntity> comboEmpresas;
	private Table tableEmpresas;
	private BeanItemContainer<EmpresaEntity> empresaContainer;
	private EmpresaEntity empresaSelecionado;

	private ManyToOneCombo<PapelEntity> comboPapeis;
	private Table tablePapel;
	private BeanItemContainer<PapelEntity> papelContainer;
	private PapelEntity papelSelecionado;

	private ManyToOneCombo<UsuarioEntity> comboUsuarios;
	private Table tableUsuarios;
	private BeanItemContainer<UsuarioEntity> usuarioContainer;
	private UsuarioEntity usuarioSelecionado;

	private Button btnDownload;

	public RelatorioFormView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		configuraComponentes();
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		mainLayout = new VerticalLayout();
		setHeight("100%");
		mainLayout.setSizeFull();
		tabForm = buildTabForm();
		tabForm.setSizeFull();

		mainLayout.addComponent(tabForm);
		return mainLayout;
	}

	private TabSheet buildTabForm() {

		tabForm = new TabSheet();

		buildDetalhesTab();
		buildEmpresaTab();
		buildPapelTab();
		buildUsuarioTab();
		buildSeguimentoTab();

		tabForm.addTab(detalhesLayout, "Detalhes", null);
		tabForm.addTab(seguimentoLayout, "Seguimento", null);
		tabForm.addTab(empresaLayout, "Empresa", null);
		tabForm.addTab(papelLayout, "Papel", null);
		tabForm.addTab(usuarioLayout, "Usuario", null);

		return tabForm;
	}

	private void buildSeguimentoTab() {

		seguimentoLayout = new VerticalLayout();
		seguimentoLayout.setImmediate(false);
		seguimentoLayout.setSizeFull();
		seguimentoLayout.setMargin(true);
		seguimentoLayout.setSpacing(true);

		HorizontalLayout hl = new HorizontalLayout();
		hl.setMargin(false);
		hl.setSpacing(true);

		comboSeguimentos = new ManyToOneCombo<SeguimentoEntity>();
		comboSeguimentos.setCaption("Seguimento");
		comboSeguimentos.setWidth("600px");
		comboSeguimentos.setHeight("-1px");

		hl.addComponent(comboSeguimentos);

		Button adicionaSeguimento = new Button("Adicionar");
		adicionaSeguimento.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				SeguimentoEntity seguimento = (SeguimentoEntity) comboSeguimentos.getValue();
				addSeguimento(seguimento);
			}

		});

		hl.addComponent(adicionaSeguimento);

		Button removeSeguimento = new Button("Remover");
		removeSeguimento.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (seguimentoSelecionado == null) {
					mensagemErro("Nenhum registro selecionado para remoção");
				} else {
					ConfirmDialog.show(MainUI.getCurrent(), "Confirme a remoção",
							"Você tem certeza? Isso apagará os registros selecionados e Não poderá ser revertido.", "Sim", "Não",
							new ConfirmDialog.Listener() {

								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										try {
											seguimentoContainer.removeItem(seguimentoSelecionado);
											seguimentoSelecionado = null;
										} catch (Exception e) {
											mensagemErro("Houve um erro remover registro. Verifique se o mesmo Não tem dependência com outros registros.");
										}
									}
								}

							});
				}
			}
		});

		hl.addComponent(removeSeguimento);

		seguimentoLayout.addComponent(hl);

		tableSeguimentos = new Table();
		tableSeguimentos.setSizeFull();
		seguimentoContainer = new BeanItemContainer<>(SeguimentoEntity.class);
		tableSeguimentos.setContainerDataSource(seguimentoContainer);

		tableSeguimentos.setColumnCollapsingAllowed(true);
		tableSeguimentos.setImmediate(true);
		tableSeguimentos.setEditable(false);
		tableSeguimentos.setSelectable(true);

		tableSeguimentos.setColumnHeader(NAME_PROPERTY, "Nome");

		tableSeguimentos.setColumnExpandRatio(NAME_PROPERTY, 1.0f);

		tableSeguimentos.addItemClickListener(new ItemClickListener() {
			@Override
			public void itemClick(ItemClickEvent event) {
				seguimentoSelecionado = seguimentoContainer.getItem(event.getItemId()).getBean();

			}
		});

		Object[] cs = new Object[] { NAME_PROPERTY };

		tableSeguimentos.setVisibleColumns(cs);
		seguimentoLayout.addComponent(tableSeguimentos);

		seguimentoLayout.setExpandRatio(hl, 1f);
		seguimentoLayout.setExpandRatio(tableSeguimentos, 3f);

	}

	private void buildUsuarioTab() {
		usuarioLayout = new VerticalLayout();
		usuarioLayout.setImmediate(false);
		usuarioLayout.setSizeFull();
		usuarioLayout.setMargin(true);
		usuarioLayout.setSpacing(true);

		HorizontalLayout hl = new HorizontalLayout();
		hl.setMargin(false);
		hl.setSpacing(true);

		comboUsuarios = new ManyToOneCombo<UsuarioEntity>();
		comboUsuarios.setCaption("Usuario");
		comboUsuarios.setWidth("600px");
		comboUsuarios.setHeight("-1px");

		hl.addComponent(comboUsuarios);

		Button adicionaUsuario = new Button("Adicionar");
		adicionaUsuario.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				UsuarioEntity usuario = (UsuarioEntity) comboUsuarios.getValue();
				addUsuario(usuario);
			}

		});

		hl.addComponent(adicionaUsuario);

		Button removeUsuario = new Button("Remover");
		removeUsuario.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (usuarioSelecionado == null) {
					mensagemErro("Nenhum registro selecionado para remoção");
				} else {
					ConfirmDialog.show(MainUI.getCurrent(), "Confirme a remoção",
							"Você tem certeza? Isso apagará os registros selecionados e Não poderá ser revertido.", "Sim", "Não",
							new ConfirmDialog.Listener() {

								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										try {
											usuarioContainer.removeItem(usuarioSelecionado);
											usuarioSelecionado = null;
										} catch (Exception e) {
											mensagemErro("Houve um erro remover registro. Verifique se o mesmo Não tem dependência com outros registros.");
										}
									}
								}

							});
				}
			}
		});

		hl.addComponent(removeUsuario);

		usuarioLayout.addComponent(hl);

		tableUsuarios = new Table();
		tableUsuarios.setSizeFull();
		usuarioContainer = new BeanItemContainer<>(UsuarioEntity.class);
		tableUsuarios.setContainerDataSource(usuarioContainer);

		tableUsuarios.setColumnCollapsingAllowed(true);
		tableUsuarios.setImmediate(true);
		tableUsuarios.setEditable(false);
		tableUsuarios.setSelectable(true);

		tableUsuarios.setColumnHeader(LOGIN_PROPERTY, "Login");

		tableUsuarios.setColumnExpandRatio(LOGIN_PROPERTY, 1.0f);

		tableUsuarios.addItemClickListener(new ItemClickListener() {
			@Override
			public void itemClick(ItemClickEvent event) {
				usuarioSelecionado = usuarioContainer.getItem(event.getItemId()).getBean();

			}
		});

		Object[] cs = new Object[] { LOGIN_PROPERTY };

		tableUsuarios.setVisibleColumns(cs);
		usuarioLayout.addComponent(tableUsuarios);

		usuarioLayout.setExpandRatio(hl, 1f);
		usuarioLayout.setExpandRatio(tableUsuarios, 3f);
	}

	private void buildPapelTab() {

		papelLayout = new VerticalLayout();
		papelLayout.setImmediate(false);
		papelLayout.setSizeFull();
		papelLayout.setMargin(true);
		papelLayout.setSpacing(true);

		HorizontalLayout hl = new HorizontalLayout();
		hl.setMargin(false);
		hl.setSpacing(true);

		comboPapeis = new ManyToOneCombo<PapelEntity>();
		comboPapeis.setCaption("Papel");
		comboPapeis.setWidth("600px");
		comboPapeis.setHeight("-1px");

		hl.addComponent(comboPapeis);

		Button adicionaSeguimento = new Button("Adicionar");
		adicionaSeguimento.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				PapelEntity papel = (PapelEntity) comboPapeis.getValue();
				addPapel(papel);
			}

		});

		hl.addComponent(adicionaSeguimento);

		Button removeSeguimento = new Button("Remover");
		removeSeguimento.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (papelSelecionado == null) {
					mensagemErro("Nenhum registro selecionado para remoção");
				} else {
					ConfirmDialog.show(MainUI.getCurrent(), "Confirme a remoção",
							"Você tem certeza? Isso apagará os registros selecionados e Não poderá ser revertido.", "Sim", "Não",
							new ConfirmDialog.Listener() {

								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										try {
											papelContainer.removeItem(papelSelecionado);
											papelSelecionado = null;
										} catch (Exception e) {
											mensagemErro("Houve um erro remover registro. Verifique se o mesmo Não tem dependência com outros registros.");
										}
									}
								}

							});
				}
			}
		});

		hl.addComponent(removeSeguimento);

		papelLayout.addComponent(hl);

		tablePapel = new Table();
		tablePapel.setSizeFull();
		papelContainer = new BeanItemContainer<>(PapelEntity.class);
		tablePapel.setContainerDataSource(papelContainer);

		tablePapel.setColumnCollapsingAllowed(true);
		tablePapel.setImmediate(true);
		tablePapel.setEditable(false);
		tablePapel.setSelectable(true);

		tablePapel.setColumnHeader(NAME_PROPERTY, "Nome");

		tablePapel.setColumnExpandRatio(NAME_PROPERTY, 1.0f);

		tablePapel.addItemClickListener(new ItemClickListener() {
			@Override
			public void itemClick(ItemClickEvent event) {
				papelSelecionado = papelContainer.getItem(event.getItemId()).getBean();

			}
		});

		Object[] cs = new Object[] { NAME_PROPERTY };

		tablePapel.setVisibleColumns(cs);
		papelLayout.addComponent(tablePapel);

		papelLayout.setExpandRatio(hl, 1f);
		papelLayout.setExpandRatio(tablePapel, 3f);

	}

	private void buildEmpresaTab() {

		empresaLayout = new VerticalLayout();
		empresaLayout.setImmediate(false);
		empresaLayout.setSizeFull();
		empresaLayout.setMargin(true);
		empresaLayout.setSpacing(true);

		HorizontalLayout hl = new HorizontalLayout();
		hl.setMargin(false);
		hl.setSpacing(true);

		comboEmpresas = new ManyToOneCombo<EmpresaEntity>();
		comboEmpresas.setCaption("Empresa");
		comboEmpresas.setWidth("600px");
		comboEmpresas.setHeight("-1px");

		hl.addComponent(comboEmpresas);

		Button adicionaEmpresa = new Button("Adicionar");
		adicionaEmpresa.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {

				EmpresaEntity empresa = (EmpresaEntity) comboEmpresas.getValue();
				addEmpresa(empresa);
			}

		});

		hl.addComponent(adicionaEmpresa);

		Button removeEmpresa = new Button("Remover");
		removeEmpresa.addClickListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				if (empresaSelecionado == null) {
					mensagemErro("Nenhum registro selecionado para remoção");
				} else {
					ConfirmDialog.show(MainUI.getCurrent(), "Confirme a remoção",
							"Você tem certeza? Isso apagará os registros selecionados e Não poderá ser revertido.", "Sim", "Não",
							new ConfirmDialog.Listener() {

								public void onClose(ConfirmDialog dialog) {
									if (dialog.isConfirmed()) {
										try {
											empresaContainer.removeItem(empresaSelecionado);
											empresaSelecionado = null;
										} catch (Exception e) {
											mensagemErro("Houve um erro remover registro. Verifique se o mesmo Não tem dependência com outros registros.");
										}
									}
								}

							});
				}
			}
		});

		hl.addComponent(removeEmpresa);

		empresaLayout.addComponent(hl);

		tableEmpresas = new Table();
		tableEmpresas.setSizeFull();
		empresaContainer = new BeanItemContainer<>(EmpresaEntity.class);
		tableEmpresas.setContainerDataSource(empresaContainer);

		tableEmpresas.setColumnCollapsingAllowed(true);
		tableEmpresas.setImmediate(true);
		tableEmpresas.setEditable(false);
		tableEmpresas.setSelectable(true);

		tableEmpresas.setColumnHeader(FANTASY_NAME_PROPERTY, "Nome");

		tableEmpresas.setColumnExpandRatio(FANTASY_NAME_PROPERTY, 1.0f);

		tableEmpresas.addItemClickListener(new ItemClickListener() {
			@Override
			public void itemClick(ItemClickEvent event) {
				empresaSelecionado = empresaContainer.getItem(event.getItemId()).getBean();

			}
		});

		Object[] cs = new Object[] { FANTASY_NAME_PROPERTY };

		tableEmpresas.setVisibleColumns(cs);
		empresaLayout.addComponent(tableEmpresas);

		empresaLayout.setExpandRatio(hl, 1f);
		empresaLayout.setExpandRatio(tableEmpresas, 3f);
	}

	private void buildDetalhesTab() {
		detalhesLayout = new GridLayout();
		detalhesLayout.setImmediate(false);
		detalhesLayout.setWidth("100%");
		detalhesLayout.setHeight("-1px");
		detalhesLayout.setMargin(true);
		detalhesLayout.setSpacing(true);
		detalhesLayout.setRows(7);
		detalhesLayout.setColumns(3);

		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");

		txNome = ComponentUtil.buildTextField("Nome");
		detalhesLayout.addComponent(txNome, 0, 0);

		txDescricao = ComponentUtil.buildTextField("Descrição");
		detalhesLayout.addComponent(txDescricao, 0, 1);

		cbTipos = ComponentUtil.buildComboBox("Tipo Relatório");
		cbTipos.addItem(TipoRelatorio.LISTAGEM);
		cbTipos.addItem(TipoRelatorio.FORMULARIO);
		cbTipos.addItem(TipoRelatorio.LISTAGEM_FORMULARIO);
		detalhesLayout.addComponent(cbTipos, 0, 2);

		txTelaParametros = ComponentUtil.buildTextField("Tela de parâmetros");
		detalhesLayout.addComponent(txTelaParametros, 0, 3);

		relatorioUpload = new UploadField();
		relatorioUpload.setCaption("Relatório");
		relatorioUpload.setImmediate(false);
		relatorioUpload.setHeight("-1px");
		relatorioUpload.setWidth("-1px");
		detalhesLayout.addComponent(relatorioUpload, 0, 4);

		btnDownload = new Button("Download Arquivo Relatório");
		detalhesLayout.addComponent(btnDownload, 1, 4);

		comboMenus = new ManyToOneCombo<FmMenu>();
		comboMenus.setCaption("Menu");
		comboMenus.setSizeFull();
		comboMenus.setRequired(true);
		detalhesLayout.addComponent(comboMenus, 0, 5);

		comboRelatorios = new ManyToOneCombo<Relatorio>();
		comboRelatorios.setCaption("Relatório Pai");
		comboRelatorios.setSizeFull();
		detalhesLayout.addComponent(comboRelatorios, 0, 6);
	}

	public void preencheBean(Relatorio currentBean) {
		currentBean.setNome(txNome.getValue());
		currentBean.setDescricao(txDescricao.getValue());
		currentBean.setTipo(((TipoRelatorio) cbTipos.getValue()).getTipo());
		currentBean.setMenu(comboMenus.getValue());
		currentBean.setTelaParametros(txTelaParametros.getValue());
		currentBean.setRelatorioParent(comboRelatorios.getValue());

	}

	public void preencheForm(Relatorio currentBean) {
		txNome.setValue(currentBean.getNome());
		txDescricao.setValue(currentBean.getDescricao());
		comboMenus.setValue(currentBean.getMenu());

		if (currentBean.getRelatorioParent() != null) {
			comboRelatorios.setValue(currentBean.getRelatorioParent());
		}
		cbTipos.setValue(TipoRelatorio.getEnum(currentBean.getTipo()));
		txTelaParametros.setValue(currentBean.getTelaParametros());

		seguimentoContainer.removeAllItems();
		papelContainer.removeAllItems();
		empresaContainer.removeAllItems();
		usuarioContainer.removeAllItems();

		if (currentBean.getSeguimentos() != null) {
			seguimentoContainer.addAll(currentBean.getSeguimentos());
		}
		if (currentBean.getPapeis() != null) {
			papelContainer.addAll(currentBean.getPapeis());
		}
		if (currentBean.getEmpresas() != null) {
			empresaContainer.addAll(currentBean.getEmpresas());
		}
		if (currentBean.getUsuarios() != null) {
			usuarioContainer.addAll(currentBean.getUsuarios());
		}
	}

	public TextField getTxNome() {
		return txNome;
	}

	public void setTxNome(TextField txNome) {
		this.txNome = txNome;
	}

	public TextField getTxDescricao() {
		return txDescricao;
	}

	public void setTxDescricao(TextField txDescricao) {
		this.txDescricao = txDescricao;
	}

	@SuppressWarnings("serial")
	private void configuraComponentes() {

		relatorioUpload.setFieldType(FieldType.FILE);
		relatorioUpload.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
				UploadField upload = (UploadField) event.getProperty();
				Upload up = (Upload) upload.getRootLayout().getComponent(0);
				nomeRelatorio = ((FileBuffer) up.getReceiver()).getLastFileName();

			}
		});

	}

	public UploadField getRelatorioUpload() {
		return relatorioUpload;
	}

	public void setRelatorioUpload(UploadField relatorioUpload) {
		this.relatorioUpload = relatorioUpload;
	}

	public String getNomeRelatorio() {
		return nomeRelatorio;
	}

	public void setNomeRelatorio(String nomeRelatorio) {
		this.nomeRelatorio = nomeRelatorio;
	}

	public ManyToOneCombo<FmMenu> getComboMenus() {
		return comboMenus;
	}

	public void setComboMenus(ManyToOneCombo<FmMenu> comboMenus) {
		this.comboMenus = comboMenus;
	}

	public TextField getTxTelaParametros() {
		return txTelaParametros;
	}

	public void setTxTelaParametros(TextField txTelaParametros) {
		this.txTelaParametros = txTelaParametros;
	}

	public ComboBox getCbTipos() {
		return cbTipos;
	}

	public void setCbTipos(ComboBox cbTipos) {
		this.cbTipos = cbTipos;
	}

	public void addEmpresa(EmpresaEntity empresa) {
		if (empresa != null && !empresaContainer.containsId(empresa.getId())) {

			empresaContainer.addItem(empresa);
		}
	}

	public void addSeguimento(SeguimentoEntity seguimento) {
		if (seguimento != null && !seguimentoContainer.containsId(seguimento.getId())) {

			seguimentoContainer.addItem(seguimento);
		}
	}

	public void addPapel(PapelEntity papel) {
		if (papel != null && !papelContainer.containsId(papel.getId())) {

			papelContainer.addItem(papel);
		}
	}

	public void addUsuario(UsuarioEntity usuario) {
		if (usuario != null && !usuarioContainer.containsId(usuario.getId())) {

			usuarioContainer.addItem(usuario);
		}
	}

	public void mensagemErro(String message) {
		new Notification(DcConstants.ERROR_TITLE, message, Type.ERROR_MESSAGE, true).show(Page.getCurrent());
	}

	public ManyToOneCombo<SeguimentoEntity> getComboSeguimentos() {
		return comboSeguimentos;
	}

	public void setComboSeguimentos(ManyToOneCombo<SeguimentoEntity> comboSeguimentos) {
		this.comboSeguimentos = comboSeguimentos;
	}

	public ManyToOneCombo<EmpresaEntity> getComboEmpresas() {
		return comboEmpresas;
	}

	public void setComboEmpresas(ManyToOneCombo<EmpresaEntity> comboEmpresas) {
		this.comboEmpresas = comboEmpresas;
	}

	public ManyToOneCombo<PapelEntity> getComboPapeis() {
		return comboPapeis;
	}

	public void setComboPapeis(ManyToOneCombo<PapelEntity> comboPapeis) {
		this.comboPapeis = comboPapeis;
	}

	public ManyToOneCombo<UsuarioEntity> getComboUsuarios() {
		return comboUsuarios;
	}

	public void setComboUsuarios(ManyToOneCombo<UsuarioEntity> comboUsuarios) {
		this.comboUsuarios = comboUsuarios;
	}

	public BeanItemContainer<SeguimentoEntity> getSeguimentoContainer() {
		return seguimentoContainer;
	}

	public void setSeguimentoContainer(BeanItemContainer<SeguimentoEntity> seguimentoContainer) {
		this.seguimentoContainer = seguimentoContainer;
	}

	public BeanItemContainer<EmpresaEntity> getEmpresaContainer() {
		return empresaContainer;
	}

	public void setEmpresaContainer(BeanItemContainer<EmpresaEntity> empresaContainer) {
		this.empresaContainer = empresaContainer;
	}

	public BeanItemContainer<PapelEntity> getPapelContainer() {
		return papelContainer;
	}

	public void setPapelContainer(BeanItemContainer<PapelEntity> papelContainer) {
		this.papelContainer = papelContainer;
	}

	public BeanItemContainer<UsuarioEntity> getUsuarioContainer() {
		return usuarioContainer;
	}

	public void setUsuarioContainer(BeanItemContainer<UsuarioEntity> usuarioContainer) {
		this.usuarioContainer = usuarioContainer;
	}

	public ManyToOneCombo<Relatorio> getComboRelatorios() {
		return comboRelatorios;
	}

	public void setComboRelatorios(ManyToOneCombo<Relatorio> comboRelatorios) {
		this.comboRelatorios = comboRelatorios;
	}

	public Button getBtnDownload() {
		return btnDownload;
	}

	public void setBtnDownload(Button btnDownload) {
		this.btnDownload = btnDownload;
	}

}