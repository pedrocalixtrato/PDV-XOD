package dc.visao.geral.ged;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.vaadin.easyuploads.FileBuffer;
import org.vaadin.easyuploads.UploadField;
import org.vaadin.easyuploads.UploadField.FieldType;
import org.vaadin.tepi.imageviewer.ImageViewer;
import org.vaadin.tepi.imageviewer.ImageViewer.ImageSelectedEvent;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.event.MouseEvents.ClickListener;
import com.vaadin.event.ShortcutAction.KeyCode;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.server.FileResource;
import com.vaadin.server.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.DragAndDropWrapper.DragStartMode;
import com.vaadin.ui.DragAndDropWrapper.WrapperTransferable;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Layout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Slider;
import com.vaadin.ui.Slider.ValueOutOfBoundsException;
import com.vaadin.ui.TextField;
import com.vaadin.ui.UI;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import dc.controller.geral.ged.DocumentoFormController;
import dc.entidade.geral.ged.DocumentoArquivo;
import dc.entidade.geral.ged.TipoDocumento;
import dc.visao.framework.component.manytoonecombo.ManyToOneCombo;
import dc.visao.framework.component.upload.DCMultiFileUpload;
import dc.visao.framework.component.upload.UploadFileListner;
import dc.visao.framework.util.ComponentUtil;

public class DocumentoFormView extends CustomComponent {
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private GridLayout gridLayout;
	@AutoGenerated
	private Panel panel_1;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private AbsoluteLayout absoluteLayout_2;

	@AutoGenerated
	private Button linkDownload;
	@AutoGenerated
	private DCMultiFileUpload upArquivo;
	@AutoGenerated
	private CheckBox ckbAssinado;
	@AutoGenerated
	private UploadField upAssinatura;
	@AutoGenerated
	private PasswordField pwSenhaCertificado;
	@AutoGenerated
	private CheckBox ckbPodeExcluir;
	@AutoGenerated
	private CheckBox ckbPodeAlterar;
	@AutoGenerated
	private CheckBox ckbTemplate;
	@AutoGenerated
	private PopupDateField dtFimVigencia;
	@AutoGenerated
	private TextField txtPalavraChave;
	@AutoGenerated
	private TextField txtDescricao;
	@AutoGenerated
	private TextField txtNome;
	private static final long serialVersionUID = 1L;
	private String nomeArquivo;
	private String nomeArquivoAssinatura;
	private GridLayout sources;
	private Window subwindow;
	private Panel nPanel;
	private final TextField selectedImage = new TextField();
	private ImageViewer imageViewer = new ImageViewer();
	private List<String> listArquivos = new ArrayList<String>();
	private List<String> listArquivosDeletados = new ArrayList<String>();
	private DocumentoFormController documentoFormController;

	private ManyToOneCombo<TipoDocumento> cmbTipoDocumento;

	public VerticalLayout getMainLayout() {
		return mainLayout;
	}

	public void setListArquivos(List<String> listArquivos) {
		this.listArquivos = listArquivos;
	}

	public void setMainLayout(VerticalLayout mainLayout) {
		this.mainLayout = mainLayout;
	}

	public TextField getTxtPalavraChave() {
		return txtPalavraChave;
	}

	public void setTxtPalavraChave(TextField txtPalavraChave) {
		this.txtPalavraChave = txtPalavraChave;
	}

	public PopupDateField getDtFimVigencia() {
		return dtFimVigencia;
	}

	public void setDtFimVigencia(PopupDateField dtFimVigencia) {
		this.dtFimVigencia = dtFimVigencia;
	}

	public List<String> getListArquivos() {
		return listArquivos;
	}

	public DocumentoFormView(DocumentoFormController documentoFormController) {
		this.documentoFormController = documentoFormController;
		buildMainLayout();
		setCompositionRoot(mainLayout);
		configuraComponentes();
	}

	@SuppressWarnings("serial")
	private void configuraComponentes() {

		upAssinatura.setFieldType(FieldType.FILE);
		upAssinatura.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(com.vaadin.data.Property.ValueChangeEvent event) {
				UploadField upload = (UploadField) event.getProperty();
				Upload up = (Upload) upload.getRootLayout().getComponent(0);
				nomeArquivoAssinatura = ((FileBuffer) up.getReceiver()).getLastFileName();

			}
		});
	}

	public void atualizaMiniatura(List<DocumentoArquivo> documentos) {
		for (DocumentoArquivo documento : documentos) {
			uploadArquivo(documento.getFile(), documento.getFile().getName(), "", 0);
		}

	}

	@SuppressWarnings("deprecation")
	public void uploadArquivo(File arquivo, String nomeArquivo, String acao, int contador) {

		if (arquivo.length() > 0) {
			List<String> extensao = new ArrayList<String>();
			extensao.add(".exe");
			extensao.add(".bat");
			extensao.add(".bin");

			if (sources == null) {
				montarPainelMiniaturas();
			} else {
				if (acao.equals("A") && contador == 1) {
					gridLayout.removeComponent(nPanel);
					this.sources.markAsDirtyRecursive();
					this.gridLayout.markAsDirtyRecursive();
					this.mainLayout.markAsDirtyRecursive();
					this.markAsDirtyRecursive();

					montarPainelMiniaturas();
				}

			}

			if (!extensao.contains(DCMultiFileUpload.getExtensao(nomeArquivo))) {

				try {
					final File arquivoMiniatura;
					// Caso o arquivo esteja em uma pasta temporária do SO o
					// componente não consegue rendereizar a miniatura
					// Para isso guardamos o arquivo temporariamente em uma
					// pasta dentro do sistema.
					if (documentoFormController.isArquivoTemporario(arquivo)) {
						arquivoMiniatura = documentoFormController.gravaArquivoTemporario(arquivo, nomeArquivo);
					} else {
						arquivoMiniatura = arquivo;
					}
					Embedded image = DCMultiFileUpload.gerarMiniaturaArquivo(nomeArquivo, arquivoMiniatura);
					image.addListener(getImageClickListener());
					// Wrap it in a Drag and Drop Wrapper
					DragAndDropWrapper wrapper = new DragAndDropWrapper(image);
					wrapper.setSizeUndefined(); // Shrink to fit
					// Enable dragging the wrapper
					wrapper.setDragStartMode(DragStartMode.WRAPPER);

					linkDownload = new Button("baixar");
					linkDownload.setStyleName("link");
					linkDownload.addListener(DCMultiFileUpload.buildDownloadButtonListener(arquivoMiniatura));

					sources.addComponent(wrapper);
					sources.addComponent(linkDownload);

					listArquivos.add(arquivoMiniatura.getAbsolutePath());

				} catch (Exception e) {
				}

				this.markAsDirtyRecursive();
				this.requestRepaintAll();

			}
		} else {
			try {
				listArquivosDeletados.add(arquivo.getAbsolutePath());
			} catch (Exception e) {
			}
		}
	}

	public void montarPainelMiniaturas() {
		nPanel = new Panel();
		nPanel.setImmediate(true);
		nPanel.setHeight("350px");
		nPanel.setWidth("100%");
		nPanel.setScrollTop(1600);
		sources = new GridLayout(12, 100);
		nPanel.setContent(sources);
		gridLayout.addComponent(nPanel, 0, 6, 5, 6);
	}

	public void limparMiniaturas() {
		if (sources != null) {
			sources.removeAllComponents();
		}
	}

	private Layout createControls() {
		HorizontalLayout hl = new HorizontalLayout();
		hl.setSizeUndefined();
		hl.setMargin(false);
		hl.setSpacing(true);

		CheckBox c = new CheckBox("Efeito");
		c.setImmediate(true);
		c.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				boolean checked = (Boolean) event.getProperty().getValue();
				imageViewer.setHiLiteEnabled(checked);
				imageViewer.focus();
			}
		});
		c.setValue(true);
		hl.addComponent(c);
		hl.setComponentAlignment(c, Alignment.BOTTOM_CENTER);

		c = new CheckBox("Animação");
		c.setImmediate(true);
		c.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				boolean checked = (Boolean) event.getProperty().getValue();
				imageViewer.setAnimationEnabled(checked);
				imageViewer.focus();
			}
		});
		c.setValue(true);
		hl.addComponent(c);
		hl.setComponentAlignment(c, Alignment.BOTTOM_CENTER);

		Slider s = new Slider("Duração Animação");
		s.setMax(2000);
		s.setMin(200);
		s.setImmediate(true);
		s.setWidth("120px");
		s.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				try {
					int duration = (int) Math.round((Double) event.getProperty().getValue());
					imageViewer.setAnimationDuration(duration);
					imageViewer.focus();
				} catch (Exception ignored) {
				}
			}
		});
		try {
			s.setValue(350d);
		} catch (ValueOutOfBoundsException e) {
		}
		hl.addComponent(s);
		hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

		s = new Slider("Largura da Imagem Centro");
		s.setResolution(2);
		s.setMax(1);
		s.setMin(0.1);
		s.setImmediate(true);
		s.setWidth("120px");
		s.addValueChangeListener(new Property.ValueChangeListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				try {
					double d = (Double) event.getProperty().getValue();
					imageViewer.setCenterImageRelativeWidth((float) d);
					imageViewer.focus();
				} catch (Exception ignored) {
				}
			}
		});
		try {
			s.setValue(0.55);
		} catch (ValueOutOfBoundsException e) {
		}
		hl.addComponent(s);
		hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

		s = new Slider("Contagem imagem");
		s.setMax(5);
		s.setMin(1);
		s.setImmediate(true);
		s.setWidth("120px");
		s.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				try {
					int sideImageCount = (int) Math.round((Double) event.getProperty().getValue());
					imageViewer.setSideImageCount(sideImageCount);
					imageViewer.focus();
				} catch (Exception ignored) {
				}
			}
		});
		try {
			s.setValue(2d);
		} catch (ValueOutOfBoundsException e) {
		}
		hl.addComponent(s);
		hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

		s = new Slider("Tamanho Imagem (miniatura)");
		s.setResolution(2);
		s.setMax(0.8);
		s.setMin(0.5);
		s.setImmediate(true);
		s.setWidth("120px");
		s.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				try {
					double d = (Double) event.getProperty().getValue();
					imageViewer.setSideImageRelativeWidth((float) d);
					imageViewer.focus();
				} catch (Exception ignored) {
				}
			}
		});
		try {
			s.setValue(0.65);
		} catch (ValueOutOfBoundsException e) {
		}
		hl.addComponent(s);
		hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

		s = new Slider("Preenchimento Horizontal");
		s.setMax(10);
		s.setMin(0);
		s.setImmediate(true);
		s.setWidth("120px");
		s.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				try {
					double d = (Double) event.getProperty().getValue();
					imageViewer.setImageHorizontalPadding((int) Math.round(d));
					imageViewer.focus();
				} catch (Exception ignored) {
				}
			}
		});
		try {
			s.setValue(1d);
		} catch (ValueOutOfBoundsException e) {
		}
		hl.addComponent(s);
		hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

		s = new Slider("Preenchimento Vertical");
		s.setMax(10);
		s.setMin(0);
		s.setImmediate(true);
		s.setWidth("120px");
		s.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			public void valueChange(ValueChangeEvent event) {
				try {
					double d = (Double) event.getProperty().getValue();
					imageViewer.setImageVerticalPadding((int) Math.round(d));
					imageViewer.focus();
				} catch (Exception ignored) {
				}
			}
		});
		try {
			s.setValue(5d);
		} catch (ValueOutOfBoundsException e) {
		}
		hl.addComponent(s);
		hl.setComponentAlignment(s, Alignment.BOTTOM_CENTER);

		selectedImage.setWidth("50px");
		selectedImage.setImmediate(true);
		hl.addComponent(selectedImage);
		hl.setComponentAlignment(selectedImage, Alignment.BOTTOM_CENTER);

		return hl;
	}

	/**
	 * Creates a list of Resources to be shown in the ImageViewer.
	 * 
	 * @return List of Resource instances
	 */
	private List<FileResource> createImageList() {
		List<FileResource> img = new ArrayList<FileResource>();

		for (String arquivo : listArquivos) {
			if (DCMultiFileUpload.isImageFile(arquivo)) {
				File arqImg = new File(arquivo);
				img.add(new FileResource(arqImg));

			}
		}

		return img;
	}

	public AbsoluteLayout getAbsoluteLayout_2() {
		return absoluteLayout_2;
	}

	public void setAbsoluteLayout_2(AbsoluteLayout absoluteLayout_2) {
		this.absoluteLayout_2 = absoluteLayout_2;
	}

	public TextField getTxtDescricao() {
		return txtDescricao;
	}

	public void setTxtDescricao(TextField txtDescricao) {
		this.txtDescricao = txtDescricao;
	}

	public TextField getTxtNome() {
		return txtNome;
	}

	public void setTxtNome(TextField txtNome) {
		this.txtNome = txtNome;
	}

	public CheckBox getCkbPodeAlterar() {
		return ckbPodeAlterar;
	}

	public void setCkbPodeAlterar(CheckBox ckbPodeAlterar) {
		this.ckbPodeAlterar = ckbPodeAlterar;
	}

	public CheckBox getCkbPodeExcluir() {
		return ckbPodeExcluir;
	}

	public void setCkbPodeExcluir(CheckBox ckbPodeExcluir) {
		this.ckbPodeExcluir = ckbPodeExcluir;
	}

	public CheckBox getCkbAssinado() {
		return ckbAssinado;
	}

	public void setCkbAssinado(CheckBox ckbAssinado) {
		this.ckbAssinado = ckbAssinado;
	}

	public PasswordField getPwSenhaCertificado() {
		return pwSenhaCertificado;
	}

	public void setPwSenhaCertificado(PasswordField pwSenhaCertificado) {
		this.pwSenhaCertificado = pwSenhaCertificado;
	}

	public DCMultiFileUpload getUpArquivo() {
		return upArquivo;
	}

	public void setUpArquivo(DCMultiFileUpload upArquivo) {
		this.upArquivo = upArquivo;
	}

	public UploadField getUpAssinatura() {
		return upAssinatura;
	}

	public void setUpAssinatura(UploadField upAssinatura) {
		this.upAssinatura = upAssinatura;
	}

	public String getNomeArquivo() {
		return nomeArquivo;
	}

	public void setNomeArquivo(String nomeArquivo) {
		this.nomeArquivo = nomeArquivo;
	}

	public String getNomeArquivoAssinatura() {
		return nomeArquivoAssinatura;
	}

	public void setNomeArquivoAssinatura(String nomeArquivoAssinatura) {
		this.nomeArquivoAssinatura = nomeArquivoAssinatura;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	public Button getLinkDonwload() {
		return linkDownload;
	}

	public void setLinkDonwload(Button linkDonwload) {
		this.linkDownload = linkDonwload;
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setHeight("500px");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);

		gridLayout = buildGridLayout();
		mainLayout.addComponent(gridLayout);
		mainLayout.setExpandRatio(gridLayout, 1);

		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("100.0%");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);

		// absoluteLayout_2
		gridLayout = buildGridLayout();
		verticalLayout_1.addComponent(gridLayout);

		return verticalLayout_1;
	}

	@AutoGenerated
	private GridLayout buildGridLayout() {
		// common part: create layout
		gridLayout = new GridLayout(6, 15);
		gridLayout.setImmediate(false);
		gridLayout.setWidth("100%");
		gridLayout.setSpacing(true);

		// txtNome
		txtNome = ComponentUtil.buildTextField("Nome");
		gridLayout.addComponent(txtNome, 0, 0);

		// txtDescricao
		txtDescricao = ComponentUtil.buildTextField("Descrição");
		gridLayout.addComponent(txtDescricao, 0, 1);

		// txtPalavraChave
		txtPalavraChave = ComponentUtil.buildTextField("Palavra Chave");
		gridLayout.addComponent(txtPalavraChave, 0, 2);

		// cbmTipoDocumento
		cmbTipoDocumento = new ManyToOneCombo<>();
		cmbTipoDocumento.setCaption("Tipo Documento");
		cmbTipoDocumento.setWidth("290px");
		cmbTipoDocumento.setSizeFull();

		UI.getCurrent().getPage().getStyles().add(".v-slot { position:static !important;}");

		gridLayout.addComponent(cmbTipoDocumento, 0, 3);

		// dtFimVigencia
		dtFimVigencia = ComponentUtil.buildPopupDateField("Data Vigência");
		gridLayout.addComponent(dtFimVigencia, 1, 1);

		// pwSenhaCertificado
		pwSenhaCertificado = new PasswordField();
		pwSenhaCertificado.setCaption("Senha Certificado");
		pwSenhaCertificado.setImmediate(false);
		gridLayout.addComponent(pwSenhaCertificado, 1, 0);

		// ckbAssinado
		ckbAssinado = ComponentUtil.buildCheckBox("Assinado");
		gridLayout.addComponent(ckbAssinado, 2, 2);

		// ckbPodeAlterar
		ckbPodeAlterar = ComponentUtil.buildCheckBox("Pode Alterar");
		gridLayout.addComponent(ckbPodeAlterar, 3, 2);

		// ckbPodeExcluir
		ckbPodeExcluir = ComponentUtil.buildCheckBox("Pode Excluir");
		gridLayout.addComponent(ckbPodeExcluir, 4, 2);

		ckbTemplate = ComponentUtil.buildCheckBox("Template Contrato");
		gridLayout.addComponent(ckbTemplate, 5, 2);

		upAssinatura = new UploadField();
		upAssinatura.setCaption("Certificado");
		upAssinatura.setImmediate(false);
		gridLayout.addComponent(upAssinatura, 5, 0);

		// upArquivo
		upArquivo = new DCMultiFileUpload(new UploadFileListner() {
			@Override
			public void handleFile(File file, String fileName, String mimeType, long length) {
				uploadArquivo(file, fileName.toLowerCase().trim(), "", 0);
			}
		});

		upArquivo.setCaption("Documento");
		upArquivo.setUploadButtonCaption("Selecione o(s) arquivo(s)");
		gridLayout.addComponent(upArquivo, 0, 4);

		Embedded imageLixeira = new Embedded(null, new ThemeResource("img/lixeira.png"));
		imageLixeira.setWidth("64px");
		imageLixeira.setHeight("64px");

		DragAndDropWrapper targetWrapper = new DragAndDropWrapper(imageLixeira);
		targetWrapper.setWidth("100px");
		targetWrapper.setHeight("100px");

		gridLayout.addComponent(targetWrapper, 5, 4);

		// Handle drops
		targetWrapper.setDropHandler(new DropHandler() {
			private static final long serialVersionUID = -5709370299130660699L;

			@Override
			public AcceptCriterion getAcceptCriterion() {
				// Accept all drops from anywhere
				return AcceptAll.get();
			}

			@Override
			public void drop(DragAndDropEvent event) {
				WrapperTransferable t = (WrapperTransferable) event.getTransferable();

				// Get the dragged component (not the wrapper)
				Embedded sourceDD = (Embedded) t.getDraggedComponent();
				try {
					listArquivosDeletados.add(sourceDD.getId());
					listArquivos.remove(sourceDD.getId());
				} catch (Exception e) {

				}

				sources.removeComponent(t.getDraggedComponent());
				repaint();

			}
		});

		// Create the window...
		subwindow = new Window("GED Documentos - Visualizador de Imagens");
		// ...and make it modal
		subwindow.setModal(true);
		subwindow.setWidth("100%");
		subwindow.setHeight("100%");

		return gridLayout;
	}

	public void repaint() {
		for (String documento : listArquivos) {
			uploadArquivo(new File(documento), documento, "", 0);
		}
	}

	public ManyToOneCombo<TipoDocumento> getCmbTipoDocumento() {
		return cmbTipoDocumento;
	}

	public void setCmbTipoDocumento(ManyToOneCombo<TipoDocumento> cbmTipoDocumento) {
		this.cmbTipoDocumento = cbmTipoDocumento;
	}

	public CheckBox getCkbTemplate() {
		return ckbTemplate;
	}

	public void setCkbTemplate(CheckBox ckbTemplate) {
		this.ckbTemplate = ckbTemplate;
	}

	public ClickListener getImageClickListener() {
		return new ClickListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void click(com.vaadin.event.MouseEvents.ClickEvent event) {

				VerticalLayout mainLayoutViewer = new VerticalLayout();
				// mainLayoutViewer.addStyleName(Reindeer.LAYOUT_BLACK);
				mainLayoutViewer.setSizeFull();
				mainLayoutViewer.setMargin(true);
				mainLayoutViewer.setSpacing(true);

				imageViewer.setSizeFull();
				imageViewer.setImages(createImageList());
				imageViewer.setAnimationEnabled(false);
				imageViewer.setSideImageRelativeWidth(0.7f);

				imageViewer.addListener(new ImageViewer.ImageSelectionListener() {

					@Override
					public void imageSelected(ImageSelectedEvent e) {
						if (e.getSelectedImageIndex() >= 0) {
							selectedImage.setValue(String.valueOf(e.getSelectedImageIndex()));
						} else {
							selectedImage.setValue("-");
						}

					}
				});
				HorizontalLayout hl = new HorizontalLayout();
				hl.setSizeUndefined();
				hl.setMargin(false);
				hl.setSpacing(true);
				mainLayoutViewer.addComponent(hl);
				mainLayoutViewer.addComponent(imageViewer);
				mainLayoutViewer.setExpandRatio(imageViewer, 1);

				Layout ctrls = createControls();
				mainLayoutViewer.addComponent(ctrls);
				mainLayoutViewer.setComponentAlignment(ctrls, Alignment.BOTTOM_CENTER);

				// Configure the windws layout; by default a VerticalLayout
				VerticalLayout layout = new VerticalLayout();
				layout.setMargin(true);
				layout.setSpacing(true);

				com.vaadin.ui.Button close = new com.vaadin.ui.Button("Fechar", new com.vaadin.ui.Button.ClickListener() {
					private static final long serialVersionUID = 1L;

					// inline click-listener
					public void buttonClick(ClickEvent event) {
						// close the window by removing it from the main window
						subwindow.close();
					}
				});
				close.setClickShortcut(KeyCode.ESCAPE, null);

				// The components added to the window are actually added to the
				// window's
				// layout; you can use either. Alignments are set using the
				// layout
				layout.addComponent(close);
				layout.setComponentAlignment(close, Alignment.BOTTOM_RIGHT);
				mainLayoutViewer.addComponent(layout);

				imageViewer.setCenterImageIndex(0);
				imageViewer.focus();
				subwindow.setContent(mainLayoutViewer);

				subwindow.center();
				UI.getCurrent().addWindow(subwindow);
			}
		};
	}

	public List<String> getListArquivosExcluidos() {
		return listArquivosDeletados;
	}

	public void setListArquivosDeletados(List<String> listArquivosDeletados) {
		this.listArquivosDeletados = listArquivosDeletados;
	}

}
